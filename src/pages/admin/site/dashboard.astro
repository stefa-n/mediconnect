---
import MainLayout from '../../../layouts/main.astro';
import Navbar from '../../../components/Navbar.astro';
import StatsCard from '../../../components/dashboard/StatsCard.astro';
import CollapsibleHospitalsList from '../../../components/admin/CollapsibleHospitalsList.astro';
import UsersList from '../../../components/admin/UsersList.astro';

// Pass placeholder user for navbar (will be updated client-side)
const placeholderUser = { email: 'loading@example.com' };
---

<MainLayout content={{ title: 'Site Admin Dashboard - MediConnect' }}>
  <!-- Font Awesome for icons - Must load before content renders -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous"
    referrerPolicy="no-referrer"
  />
  
  <Navbar user={placeholderUser} />
  
  <div class="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
    <!-- Loading State -->
    <div id="loading-screen" class="flex items-center justify-center min-h-screen">
      <div class="relative">
        <div class="flex flex-col items-center space-y-6">
          <div class="relative">
            <div class="absolute inset-0 w-24 h-24 rounded-full bg-primary/20 animate-ping"></div>
            <div class="absolute inset-2 w-20 h-20 rounded-full bg-primary/30 animate-pulse"></div>
            <div class="relative w-24 h-24 bg-gradient-to-br from-primary to-blue-600 rounded-full flex items-center justify-center shadow-2xl">
              <i class="fas fa-shield-alt text-white text-4xl animate-pulse"></i>
            </div>
          </div>
          <div class="text-center">
            <h2 class="text-2xl font-bold text-foreground mb-2">MediConnect</h2>
            <p class="text-muted-foreground text-sm mb-4">Loading admin dashboard...</p>
            <div class="w-48 h-1.5 bg-gray-200 rounded-full overflow-hidden">
              <div class="h-full bg-gradient-to-r from-primary to-blue-600 rounded-full animate-progress"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Toast Notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-[100] space-y-3 pointer-events-none">
      <!-- Toasts will be dynamically inserted here -->
    </div>

    <!-- Custom Confirmation Modal -->
    <div id="confirm-modal" class="hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-[90] p-4" style="display: none; align-items: center; justify-content: center;">
      <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full transform transition-all scale-95 opacity-0" id="confirm-modal-content">
        <div class="p-6">
          <div class="flex items-start gap-4">
            <div id="confirm-icon" class="flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center">
              <i class="fas fa-question-circle text-2xl"></i>
            </div>
            <div class="flex-1">
              <h3 id="confirm-title" class="text-xl font-bold text-gray-900 mb-2"></h3>
              <p id="confirm-message" class="text-gray-600 text-sm leading-relaxed whitespace-pre-line"></p>
            </div>
          </div>
        </div>
        <div class="px-6 pb-6 flex gap-3">
          <button 
            id="confirm-cancel-btn"
            class="flex-1 px-4 py-2.5 rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 font-medium text-gray-700 transition-all"
          >
            Cancel
          </button>
          <button 
            id="confirm-ok-btn"
            class="flex-1 px-4 py-2.5 rounded-lg font-medium text-white transition-all shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            Confirm
          </button>
        </div>
      </div>
    </div>

    <!-- Dashboard Content -->
    <main id="dashboard-content" class="hidden container mx-auto px-4 py-8">
      <!-- Welcome Section -->
      <div class="mb-8">
        <h2 class="text-3xl font-bold mb-2 text-foreground">
          Welcome, <span id="admin-name">Admin</span>!
        </h2>
        <p class="text-muted-foreground flex items-center gap-2">
          <i class="fas fa-shield-alt"></i>
          Site Administrator Dashboard
        </p>
      </div>

      <!-- Stats Grid - 4 cards in a row -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6" id="stats-grid">
        <div class="stats-card">
          <StatsCard 
            label="Total Hospitals" 
            value="0" 
            icon="fas fa-hospital" 
            color="text-blue-500"
            delay={0}
          />
        </div>
        <div class="stats-card">
          <StatsCard 
            label="Total Admins" 
            value="0" 
            icon="fas fa-user-shield" 
            color="text-green-500"
            delay={100}
          />
        </div>
        <div class="stats-card">
          <StatsCard 
            label="Site Admins" 
            value="0" 
            icon="fas fa-users-cog" 
            color="text-purple-500"
            delay={200}
          />
        </div>
        <div class="stats-card">
          <StatsCard 
            label="Total Users" 
            value="0" 
            icon="fas fa-users" 
            color="text-orange-500"
            delay={300}
          />
        </div>
      </div>

      <!-- Main Content -->
      <div class="space-y-6">
        <!-- Hospitals Section with Collapsible Details -->
        <div id="hospitals-section">
          <CollapsibleHospitalsList />
        </div>

        <!-- Pharmacies Section -->
        <div id="pharmacies-section">
          <!-- This will be populated dynamically -->
        </div>

        <!-- Site Administrators Section (only show site admins, not hospital admins) -->
        <div id="site-admins-section">
          <UsersList 
            role="mediconnect_admin"
            title="Site Administrators"
          />
        </div>
      </div>
    </main>
  </div>

  <!-- Add Hospital Modal -->
  <div id="hospital-modal" class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="hospital-modal-content" class="bg-card rounded-xl shadow-2xl max-w-md w-full border border-border transform transition-all scale-95 opacity-0">
      <div class="p-6 border-b border-border">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground" id="hospital-modal-title">Add Hospital</h3>
          <button id="close-hospital-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      <form id="hospital-form" class="p-6 space-y-4">
        <input type="hidden" id="hospital-id" />
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Hospital Name *</label>
          <input 
            type="text" 
            id="hospital-name" 
            required
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter hospital name"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Address</label>
          <input 
            type="text" 
            id="hospital-address"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter address"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Phone</label>
          <input 
            type="tel" 
            id="hospital-phone"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter phone number"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Email</label>
          <input 
            type="email" 
            id="hospital-email"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter email"
          />
        </div>
        <div class="flex gap-3 pt-4">
          <button 
            type="submit"
            class="flex-1 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
          >
            <i class="fas fa-save mr-2"></i>
            Save Hospital
          </button>
          <button 
            type="button"
            id="cancel-hospital-btn"
            class="px-4 py-2 border border-border rounded-lg hover:bg-accent transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Add/Edit User Modal -->
  <div id="user-modal" class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="user-modal-content" class="bg-card rounded-xl shadow-2xl max-w-md w-full border border-border transform transition-all scale-95 opacity-0">
      <div class="p-6 border-b border-border">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground" id="user-modal-title">Assign Role to User</h3>
          <button id="close-user-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      <div class="p-6 space-y-4">
        <input type="hidden" id="user-id" />
        <input type="hidden" id="user-role-target" />
        
        <!-- User Selection (shown when adding) -->
        <div id="user-search-section">
          <label class="block text-sm font-medium text-foreground mb-2">
            Search for User by Email
          </label>
          <div class="relative">
            <input 
              type="email" 
              id="user-email-search" 
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="Start typing email address..."
              autocomplete="off"
            />
            <div class="absolute right-2 top-1/2 -translate-y-1/2">
              <i id="search-spinner" class="fas fa-spinner fa-spin text-primary hidden"></i>
            </div>
          </div>
          <p class="text-xs text-muted-foreground mt-2">
            ℹ️ Start typing to search for existing users
          </p>
          <div id="search-results-dropdown" class="hidden mt-1 max-h-60 overflow-y-auto border border-border rounded-lg bg-white shadow-lg"></div>
        </div>

        <!-- User Form (shown when editing or after selection) -->
        <form id="user-form" class="hidden space-y-4">
          <div>
            <label class="block text-sm font-medium text-foreground mb-2">Email</label>
            <input 
              type="email" 
              id="user-email" 
              readonly
              class="w-full px-4 py-2 border border-border rounded-lg bg-gray-50 text-gray-600"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-foreground mb-2">Full Name *</label>
            <input 
              type="text" 
              id="user-fullname" 
              required
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="Enter full name"
            />
          </div>
          <div id="role-display-container">
            <label class="block text-sm font-medium text-foreground mb-2">Assigned Role</label>
            <div class="w-full px-4 py-2 border border-border rounded-lg bg-gray-50 text-gray-700 font-medium">
              <i class="fas fa-user-shield mr-2 text-primary"></i>
              <span id="user-role-display"></span>
            </div>
          </div>
          <div id="hospital-select-container" class="hidden">
            <label class="block text-sm font-medium text-foreground mb-2">Hospital *</label>
            <select 
              id="user-hospital"
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="">Select a hospital</option>
            </select>
          </div>
          <div class="flex gap-3 pt-4">
            <button 
              type="submit"
              class="flex-1 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
            >
              <i class="fas fa-save mr-2"></i>
              Save Changes
            </button>
            <button 
              type="button"
              id="cancel-user-btn"
              class="px-4 py-2 border border-border rounded-lg hover:bg-accent transition-colors"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Add Pharmacy Modal -->
  <div id="pharmacy-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="pharmacy-modal-content" class="bg-card rounded-xl shadow-2xl max-w-md w-full border border-border transform transition-all scale-95 opacity-0">
      <div class="p-6 border-b border-border">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground">Add Pharmacy</h3>
          <button id="close-pharmacy-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      <form id="pharmacy-form" class="p-6 space-y-4">
        <input type="hidden" id="pharmacy-id" />
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Pharmacy Name *</label>
          <input 
            type="text" 
            id="pharmacy-name" 
            required
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter pharmacy name"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Address</label>
          <input 
            type="text" 
            id="pharmacy-address"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter address"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Phone</label>
          <input 
            type="tel" 
            id="pharmacy-phone"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter phone number"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Email</label>
          <input 
            type="email" 
            id="pharmacy-email"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Enter email address"
          />
        </div>
        <div class="flex gap-3 pt-4">
          <button 
            type="submit"
            class="flex-1 px-4 py-2 bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-lg hover:from-green-700 hover:to-teal-700 transition-colors"
          >
            <i class="fas fa-save mr-2"></i>
            Add Pharmacy
          </button>
          <button 
            type="button"
            id="cancel-pharmacy-btn"
            class="px-4 py-2 border border-border rounded-lg hover:bg-accent transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Assign Pharmacy Admin Modal -->
  <div id="assign-pharmacy-admin-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="assign-pharmacy-admin-content" class="bg-card rounded-xl shadow-2xl max-w-md w-full border border-border transform transition-all scale-95 opacity-0">
      <div class="p-6 border-b border-border">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground">Assign Pharmacy Admin</h3>
          <button id="close-assign-pharmacy-admin-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      <div class="p-6 space-y-4">
        <input type="hidden" id="assign-pharmacy-id" />
        
        <div class="bg-green-50 border border-green-200 rounded-lg p-3">
          <p class="text-sm text-gray-700">
            <strong>Pharmacy:</strong> <span id="assign-pharmacy-name"></span>
          </p>
        </div>

        <!-- User Search Section -->
        <div id="pharmacy-user-search-section">
          <label class="block text-sm font-medium text-foreground mb-2">
            Search for User by Email
          </label>
          <div class="relative">
            <input 
              type="email" 
              id="pharmacy-user-email-search" 
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="Start typing email address..."
              autocomplete="off"
            />
            <div class="absolute right-2 top-1/2 -translate-y-1/2">
              <i id="pharmacy-search-spinner" class="fas fa-spinner fa-spin text-green-600 hidden"></i>
            </div>
          </div>
          <p class="text-xs text-muted-foreground mt-2">
            ℹ️ Start typing to search for existing users
          </p>
          <div id="pharmacy-search-results-dropdown" class="hidden mt-1 max-h-60 overflow-y-auto border border-border rounded-lg bg-white shadow-lg"></div>
        </div>

        <!-- Pharmacy Admin Form (shown after user selection) -->
        <form id="assign-pharmacy-admin-form" class="hidden space-y-4">
          <input type="hidden" id="pharmacy-admin-user-id" />
          
          <div>
            <label class="block text-sm font-medium text-foreground mb-2">Email</label>
            <input 
              type="email" 
              id="pharmacy-admin-email" 
              readonly
              class="w-full px-4 py-2 border border-border rounded-lg bg-gray-50 text-gray-600"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-foreground mb-2">Full Name *</label>
            <input 
              type="text" 
              id="pharmacy-admin-fullname" 
              required
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="Enter full name"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-foreground mb-2">CNP (Optional)</label>
            <input 
              type="text" 
              id="pharmacy-admin-cnp"
              maxlength="13"
              pattern="[0-9]{13}"
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="1234567890123"
            />
            <p class="text-xs text-gray-500 mt-1">13 digits</p>
          </div>
          <div class="flex gap-3 pt-4">
            <button 
              type="submit"
              class="flex-1 px-4 py-2 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-lg hover:from-purple-700 hover:to-purple-800 transition-colors"
            >
              <i class="fas fa-user-plus mr-2"></i>
              Assign Admin
            </button>
            <button 
              type="button"
              id="cancel-assign-pharmacy-admin-btn"
              class="px-4 py-2 border border-border rounded-lg hover:bg-accent transition-colors"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    import { supabase } from '../../../lib/supabase';

    let hospitalsData: any[] = [];
    let usersData: any[] = [];

    // Custom Toast Notification System
    type ToastType = 'success' | 'error' | 'warning' | 'info';
    
    function showToast(message: string, type: ToastType = 'info', duration: number = 4000) {
      const container = document.getElementById('toast-container');
      if (!container) return;

      const toast = document.createElement('div');
      toast.className = 'pointer-events-auto transform translate-x-full transition-all duration-300 ease-out';
      
      const icons = {
        success: { icon: 'fa-check-circle', bgColor: 'bg-green-500', textColor: 'text-green-50' },
        error: { icon: 'fa-times-circle', bgColor: 'bg-red-500', textColor: 'text-red-50' },
        warning: { icon: 'fa-exclamation-triangle', bgColor: 'bg-orange-500', textColor: 'text-orange-50' },
        info: { icon: 'fa-info-circle', bgColor: 'bg-blue-500', textColor: 'text-blue-50' }
      };

      const config = icons[type];
      
      toast.innerHTML = `
        <div class="flex items-start gap-3 ${config.bgColor} ${config.textColor} px-5 py-4 rounded-xl shadow-2xl min-w-[300px] max-w-md backdrop-blur-sm border border-white/20">
          <i class="fas ${config.icon} text-xl mt-0.5 flex-shrink-0"></i>
          <p class="flex-1 font-medium leading-relaxed">${message}</p>
          <button onclick="this.closest('[class*=translate]').remove()" class="ml-2 hover:opacity-80 transition-opacity flex-shrink-0">
            <i class="fas fa-times text-sm"></i>
          </button>
        </div>
      `;
      
      container.appendChild(toast);
      
      // Trigger entrance animation
      setTimeout(() => {
        toast.classList.remove('translate-x-full');
        toast.classList.add('translate-x-0');
      }, 10);
      
      // Auto remove after duration
      setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => toast.remove(), 300);
      }, duration);
    }

    // Custom Confirmation Dialog
    function showConfirm(
      title: string, 
      message: string, 
      options: {
        type?: 'danger' | 'warning' | 'info',
        confirmText?: string,
        cancelText?: string
      } = {}
    ): Promise<boolean> {
      return new Promise((resolve) => {
        const modal = document.getElementById('confirm-modal');
        const modalContent = document.getElementById('confirm-modal-content');
        const iconEl = document.getElementById('confirm-icon');
        const titleEl = document.getElementById('confirm-title');
        const messageEl = document.getElementById('confirm-message');
        const confirmBtn = document.getElementById('confirm-ok-btn');
        const cancelBtn = document.getElementById('confirm-cancel-btn');
        
        if (!modal || !modalContent || !iconEl || !titleEl || !messageEl || !confirmBtn || !cancelBtn) {
          resolve(false);
          return;
        }

        const type = options.type || 'warning';
        const configs = {
          danger: { 
            icon: 'fa-exclamation-triangle', 
            iconBg: 'bg-red-100 text-red-600',
            btnBg: 'bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800'
          },
          warning: { 
            icon: 'fa-exclamation-circle', 
            iconBg: 'bg-orange-100 text-orange-600',
            btnBg: 'bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800'
          },
          info: { 
            icon: 'fa-info-circle', 
            iconBg: 'bg-blue-100 text-blue-600',
            btnBg: 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800'
          }
        };

        const config = configs[type];
        
        // Set content
        iconEl.className = `flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${config.iconBg}`;
        iconEl.querySelector('i')!.className = `fas ${config.icon} text-2xl`;
        titleEl.textContent = title;
        messageEl.textContent = message;
        confirmBtn.textContent = options.confirmText || 'Confirm';
        confirmBtn.className = `flex-1 px-4 py-2.5 rounded-lg font-medium text-white transition-all shadow-lg hover:shadow-xl transform hover:scale-105 ${config.btnBg}`;
        cancelBtn.textContent = options.cancelText || 'Cancel';
        
        // Show modal with animation
        modal.style.display = 'flex';
        modal.classList.remove('hidden');
        
        setTimeout(() => {
          modalContent.classList.remove('scale-95', 'opacity-0');
          modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);
        
        const closeModal = (result: boolean) => {
          modalContent.classList.add('scale-95', 'opacity-0');
          modalContent.classList.remove('scale-100', 'opacity-100');
          
          setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.add('hidden');
            resolve(result);
          }, 200);
        };
        
        // Event handlers
        const handleConfirm = () => {
          confirmBtn.removeEventListener('click', handleConfirm);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(true);
        };
        
        const handleCancel = () => {
          confirmBtn.removeEventListener('click', handleConfirm);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(false);
        };
        
        confirmBtn.addEventListener('click', handleConfirm);
        cancelBtn.addEventListener('click', handleCancel);
      });
    }

    // Update navbar with user data
    function updateNavbar(user: any, profile: any) {
      const avatarElements = document.querySelectorAll('[class*="rounded-full"][class*="bg-gradient"]');
      const initial = profile?.full_name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase() || 'A';
      avatarElements.forEach(el => {
        if (el.textContent && el.textContent.trim().length <= 1) {
          el.textContent = initial;
        }
      });

      const dropdownContainer = document.getElementById('user-dropdown');
      if (dropdownContainer) {
        const paragraphs = dropdownContainer.querySelectorAll('p');
        if (paragraphs[0]) paragraphs[0].textContent = profile?.full_name || user.user_metadata?.full_name || 'Admin';
        if (paragraphs[1]) paragraphs[1].textContent = user.email || '';
      }
    }

    async function loadDashboardData() {
      try {
        // Check authentication
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError || !user) {
          console.error('Not authenticated:', authError);
          window.location.href = '/auth';
          return;
        }

        // Get user profile and verify they're a site admin
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (profileError || !profile) {
          console.error('Error fetching profile:', profileError);
          showToast('Unable to load profile', 'error');
          window.location.href = '/auth';
          return;
        }

        // Verify user is site admin
        if (profile.role !== 'mediconnect_admin') {
          showToast('Access denied. This page is for site administrators only.', 'error');
          window.location.href = '/dashboard';
          return;
        }

        // Update admin name and navbar
        const nameElement = document.getElementById('admin-name');
        if (nameElement) {
          nameElement.textContent = profile.full_name || user.email?.split('@')[0] || 'Admin';
        }
        updateNavbar(user, profile);

        // Fetch all data
        await Promise.all([
          loadHospitals(),
          loadUsers(),
          loadPharmacies(),
          loadPharmacyUsers()
        ]);

        // Now render everything after both are loaded
        renderHospitals();
        renderUsers();
        renderPharmacies();
        updateHospitalNames();

        // Calculate and update stats
        updateStats();

        // Show dashboard
        const loading = document.getElementById('loading-screen');
        const content = document.getElementById('dashboard-content');
        
        if (loading) {
          loading.style.opacity = '0';
          setTimeout(() => loading.classList.add('hidden'), 300);
        }
        if (content) {
          content.classList.remove('hidden');
          setTimeout(() => content.style.opacity = '1', 100);
        }

      } catch (error) {
        console.error('Error loading dashboard:', error);
        showToast('Failed to load dashboard. Please try again.', 'error');
      }
    }

    async function loadHospitals() {
      const { data, error } = await supabase
        .from('hospitals')
        .select('*')
        .order('name');

      if (error) {
        console.error('Error fetching hospitals:', error);
        return;
      }

      hospitalsData = data || [];
      // Don't render yet - wait for users to load too
    }

    async function loadUsers() {
      const { data, error } = await supabase
        .from('profiles')
        .select('*, hospital:hospitals(*)')
        .in('role', ['hospital_admin', 'mediconnect_admin'])
        .order('full_name');

      if (error) {
        console.error('Error fetching users:', error);
        return;
      }

      usersData = data || [];
      // Don't render yet - wait for both to load
    }

    let pharmaciesData: any[] = [];
    let pharmacyUsersData: any[] = [];

    async function loadPharmacies() {
      const { data, error } = await supabase
        .from('pharmacies')
        .select('*')
        .order('name');

      if (error) {
        console.error('Error fetching pharmacies:', error);
        return;
      }

      pharmaciesData = data || [];
    }

    async function loadPharmacyUsers() {
      const { data, error } = await supabase
        .from('profiles')
        .select('*, pharmacy:pharmacies(*)')
        .in('role', ['pharmacy_admin', 'pharmacist'])
        .order('full_name');

      if (error) {
        console.error('Error fetching pharmacy users:', error);
        return;
      }

      pharmacyUsersData = data || [];
    }

    async function renderPharmacies() {
      const container = document.getElementById('pharmacies-section');
      if (!container) return;

      if (pharmaciesData.length === 0) {
        container.innerHTML = `
          <div class="bg-white rounded-xl shadow-lg border border-border overflow-hidden">
            <div class="p-6 border-b border-border bg-gradient-to-r from-green-50 to-teal-50">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center shadow-lg">
                    <i class="fas fa-pills text-white text-2xl"></i>
                  </div>
                  <div>
                    <h2 class="text-2xl font-bold text-foreground">Pharmacies</h2>
                    <p class="text-sm text-muted-foreground">0 registered pharmacies</p>
                  </div>
                </div>
                <button onclick="showAddPharmacyModal()" class="px-4 py-2 bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 text-white rounded-lg font-medium shadow-lg hover:shadow-xl transition-all transform hover:scale-105 flex items-center gap-2">
                  <i class="fas fa-plus"></i>
                  <span>Add Pharmacy</span>
                </button>
              </div>
            </div>
            <div class="p-6">
              <div class="text-center py-12 text-muted-foreground">
                <i class="fas fa-pills text-5xl mb-4 opacity-50"></i>
                <p class="text-lg font-medium mb-2">No pharmacies yet</p>
                <p class="text-sm">Add your first pharmacy to get started</p>
              </div>
            </div>
          </div>
        `;
        return;
      }

      const pharmaciesHtml = await Promise.all(pharmaciesData.map(async pharmacy => {
        const admins = pharmacyUsersData.filter(u => u.pharmacy_id === pharmacy.id && u.role === 'pharmacy_admin');
        
        return `
          <div class="pharmacy-item rounded-xl border border-border bg-white overflow-hidden" data-pharmacy-id="${pharmacy.id}">
            <!-- Pharmacy Header (Always Visible) -->
            <div class="pharmacy-header flex items-center justify-between p-5 cursor-pointer hover:bg-accent/30 transition-colors"
                 onclick="togglePharmacy('${pharmacy.id}')">
              <div class="flex items-center gap-4 flex-1">
                <div class="w-14 h-14 rounded-xl bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center shadow-lg">
                  <i class="fas fa-pills text-white text-2xl"></i>
                </div>
                <div class="flex-1">
                  <div class="flex items-center gap-3 mb-1">
                    <h4 class="font-bold text-lg text-foreground">${pharmacy.name}</h4>
                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-700">
                      ${admins.length} Admin${admins.length !== 1 ? 's' : ''}
                    </span>
                  </div>
                  <p class="text-sm text-muted-foreground flex items-center gap-2">
                    <i class="fas fa-map-marker-alt text-xs"></i>
                    ${pharmacy.address || 'No address specified'}
                  </p>
                  ${pharmacy.phone ? `
                    <p class="text-xs text-muted-foreground mt-1 flex items-center gap-2">
                      <i class="fas fa-phone text-xs"></i>
                      ${pharmacy.phone}
                    </p>
                  ` : ''}
                </div>
              </div>
              <div class="flex items-center gap-3">
                <button 
                  class="edit-pharmacy-btn px-4 py-2 text-sm border-2 border-border rounded-lg hover:bg-accent hover:border-green-500 transition-all"
                  data-pharmacy-id="${pharmacy.id}"
                  onclick="event.stopPropagation();"
                  title="Edit pharmacy details"
                >
                  <i class="fas fa-edit mr-2"></i>
                  Edit
                </button>
                <button 
                  class="delete-pharmacy-btn px-4 py-2 text-sm text-red-600 border-2 border-red-200 rounded-lg hover:bg-red-50 hover:border-red-400 transition-all"
                  data-pharmacy-id="${pharmacy.id}"
                  onclick="event.stopPropagation();"
                  title="Delete pharmacy"
                >
                  <i class="fas fa-trash mr-2"></i>
                  Delete
                </button>
                <div class="expand-icon text-green-600 ml-2">
                  <i class="fas fa-chevron-right text-xl"></i>
                </div>
              </div>
            </div>

            <!-- Pharmacy Details (Collapsible) -->
            <div class="pharmacy-details hidden" data-pharmacy-id="${pharmacy.id}">
              <div class="px-5 pb-5 space-y-4 border-t border-border bg-gradient-to-b from-green-50/20 to-transparent">
                <!-- Loading State (hidden by default) -->
                <div class="pharmacy-loading hidden py-8 text-center">
                  <div class="inline-flex items-center gap-3 text-muted-foreground">
                    <i class="fas fa-spinner fa-spin text-2xl text-green-600"></i>
                    <span class="text-sm font-medium">Loading pharmacy data...</span>
                  </div>
                </div>

                <!-- Content Container (will be populated when expanded) -->
                <div class="pharmacy-content hidden">
                </div>
              </div>
            </div>
          </div>
        `;
      }));

      container.innerHTML = `
        <div class="bg-white rounded-xl shadow-lg border border-border overflow-hidden">
          <div class="p-6 border-b border-border bg-gradient-to-r from-green-50 to-teal-50">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-3">
                <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center shadow-lg">
                  <i class="fas fa-pills text-white text-2xl"></i>
                </div>
                <div>
                  <h2 class="text-2xl font-bold text-foreground">Pharmacies</h2>
                  <p class="text-sm text-muted-foreground">${pharmaciesData.length} registered pharmacies</p>
                </div>
              </div>
              <button onclick="showAddPharmacyModal()" class="px-4 py-2 bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 text-white rounded-lg font-medium shadow-lg hover:shadow-xl transition-all transform hover:scale-105 flex items-center gap-2">
                <i class="fas fa-plus"></i>
                <span>Add Pharmacy</span>
              </button>
            </div>
          </div>
          <div class="p-6">
            <div id="pharmacies-collapsible-list" class="space-y-3">
              ${pharmaciesHtml.join('')}
            </div>
          </div>
        </div>
      `;

      // Attach event listeners for pharmacy-level buttons
      document.querySelectorAll('.edit-pharmacy-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.pharmacyId;
          const pharmacy = pharmaciesData.find(p => p.id === id);
          if (pharmacy) openPharmacyModal(pharmacy);
        });
      });

      document.querySelectorAll('.delete-pharmacy-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.pharmacyId;
          deletePharmacy(id!);
        });
      });
    }

    // Toggle pharmacy expansion
    async function togglePharmacy(pharmacyId: string) {
      const pharmacyItem = document.querySelector(`.pharmacy-item[data-pharmacy-id="${pharmacyId}"]`) as HTMLElement;
      const detailsSection = document.querySelector(`.pharmacy-details[data-pharmacy-id="${pharmacyId}"]`) as HTMLElement;
      const expandIcon = pharmacyItem?.querySelector('.expand-icon') as HTMLElement;
      
      if (!pharmacyItem || !detailsSection) {
        console.error('Pharmacy elements not found:', { pharmacyItem, detailsSection, pharmacyId });
        return;
      }

      const isExpanded = pharmacyItem.classList.contains('expanded');

      if (isExpanded) {
        // Collapse
        pharmacyItem.classList.remove('expanded');
        detailsSection.classList.add('hidden');
        if (expandIcon) {
          expandIcon.style.transition = '0.3s';
          expandIcon.style.transform = 'rotate(0deg)';
        }
      } else {
        // Expand
        pharmacyItem.classList.add('expanded');
        detailsSection.classList.remove('hidden');
        if (expandIcon) {
          expandIcon.style.transition = '0.3s';
          expandIcon.style.transform = 'rotate(90deg)';
        }
        
        // Load pharmacy data if not already loaded
        if (!detailsSection.classList.contains('data-loaded')) {
          await loadPharmacyData(pharmacyId);
        }
      }
    }

    // Load pharmacy data when expanded
    async function loadPharmacyData(pharmacyId: string) {
      const detailsSection = document.querySelector(`.pharmacy-details[data-pharmacy-id="${pharmacyId}"]`) as HTMLElement;
      const loadingDiv = detailsSection?.querySelector('.pharmacy-loading') as HTMLElement;
      const contentDiv = detailsSection?.querySelector('.pharmacy-content') as HTMLElement;
      
      if (!detailsSection || !loadingDiv || !contentDiv) return;

      // Show loading state
      loadingDiv.classList.remove('hidden');
      contentDiv.classList.add('hidden');

      try {
        const pharmacy = pharmaciesData.find(p => p.id === pharmacyId);
        const admins = pharmacyUsersData.filter(u => u.pharmacy_id === pharmacyId && u.role === 'pharmacy_admin');
        const pharmacists = pharmacyUsersData.filter(u => u.pharmacy_id === pharmacyId && u.role === 'pharmacist');

        // Get dispensation stats
        const { count: totalDispensations } = await supabase
          .from('prescription_dispensations')
          .select('*', { count: 'exact', head: true })
          .eq('pharmacy_id', pharmacyId);

        const contentHtml = `
          <div class="mt-4 space-y-4">
            <!-- Pharmacy Information -->
            <div class="bg-white rounded-lg border border-border p-4">
              <h5 class="font-semibold text-foreground mb-3 flex items-center gap-2">
                <i class="fas fa-info-circle text-green-600"></i>
                Pharmacy Information
              </h5>
              <div class="grid grid-cols-2 gap-3 text-sm">
                <div>
                  <span class="text-muted-foreground">Name:</span>
                  <p class="font-medium text-foreground">${pharmacy.name}</p>
                </div>
                <div>
                  <span class="text-muted-foreground">Address:</span>
                  <p class="font-medium text-foreground">${pharmacy.address || 'N/A'}</p>
                </div>
                <div>
                  <span class="text-muted-foreground">Phone:</span>
                  <p class="font-medium text-foreground">${pharmacy.phone || 'N/A'}</p>
                </div>
                <div>
                  <span class="text-muted-foreground">Email:</span>
                  <p class="font-medium text-foreground">${pharmacy.email || 'N/A'}</p>
                </div>
                <div>
                  <span class="text-muted-foreground">Total Dispensations:</span>
                  <p class="font-medium text-foreground">${totalDispensations || 0}</p>
                </div>
              </div>
            </div>

            <!-- Pharmacy Admins -->
            <div class="bg-white rounded-lg border border-border p-4">
              <div class="flex items-center justify-between mb-3">
                <h5 class="font-semibold text-foreground flex items-center gap-2">
                  <i class="fas fa-user-shield text-purple-600"></i>
                  Pharmacy Admins (${admins.length})
                </h5>
                <button 
                  onclick="assignPharmacyAdmin('${pharmacyId}', '${pharmacy.name.replace(/'/g, "\\'")}')"
                  class="px-3 py-1 text-xs bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors flex items-center gap-1"
                >
                  <i class="fas fa-plus"></i>
                  Add Admin
                </button>
              </div>
              ${admins.length === 0 ? `
                <p class="text-sm text-muted-foreground italic">No admins assigned yet</p>
              ` : `
                <div class="space-y-2">
                  ${admins.map(admin => `
                    <div class="flex items-center justify-between p-2 bg-purple-50 rounded-lg border border-purple-100">
                      <div>
                        <p class="font-medium text-sm text-foreground">${admin.full_name || admin.email}</p>
                        <p class="text-xs text-muted-foreground">${admin.email}</p>
                      </div>
                    </div>
                  `).join('')}
                </div>
              `}
            </div>

            <!-- Pharmacists -->
            <div class="bg-white rounded-lg border border-border p-4">
              <h5 class="font-semibold text-foreground mb-3 flex items-center gap-2">
                <i class="fas fa-user-md text-green-600"></i>
                Pharmacists (${pharmacists.length})
              </h5>
              ${pharmacists.length === 0 ? `
                <p class="text-sm text-muted-foreground italic">No pharmacists assigned yet</p>
              ` : `
                <div class="space-y-2">
                  ${pharmacists.map(pharmacist => `
                    <div class="flex items-center justify-between p-2 bg-green-50 rounded-lg border border-green-100">
                      <div>
                        <p class="font-medium text-sm text-foreground">${pharmacist.full_name || pharmacist.email}</p>
                        <p class="text-xs text-muted-foreground">${pharmacist.email}</p>
                      </div>
                    </div>
                  `).join('')}
                </div>
              `}
            </div>
          </div>
        `;

        contentDiv.innerHTML = contentHtml;
        contentDiv.classList.remove('hidden');
        loadingDiv.classList.add('hidden');
        detailsSection.classList.add('data-loaded');

      } catch (error) {
        console.error('Error loading pharmacy data:', error);
        contentDiv.innerHTML = `
          <div class="text-center py-6 text-red-600">
            <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
            <p class="text-sm">Failed to load pharmacy details</p>
          </div>
        `;
        contentDiv.classList.remove('hidden');
        loadingDiv.classList.add('hidden');
      }
    }

    // Make togglePharmacy global
    (window as any).togglePharmacy = togglePharmacy;

    function updateStats() {
      const statsGrid = document.getElementById('stats-grid');
      if (!statsGrid) return;

      const statCards = statsGrid.querySelectorAll('.stats-card');
      
      // Total Hospitals
      if (statCards[0]) {
        const valueEl = statCards[0].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = hospitalsData.length.toString();
      }
      
      // Total Admins (both hospital and site admins)
      if (statCards[1]) {
        const valueEl = statCards[1].querySelector('.text-3xl');
        const count = usersData.filter(u => u.role === 'hospital_admin' || u.role === 'mediconnect_admin').length;
        if (valueEl) valueEl.textContent = count.toString();
      }
      
      // Site Admins only
      if (statCards[2]) {
        const valueEl = statCards[2].querySelector('.text-3xl');
        const count = usersData.filter(u => u.role === 'mediconnect_admin').length;
        if (valueEl) valueEl.textContent = count.toString();
      }
      
      // Total Users (all profiles)
      if (statCards[3]) {
        const valueEl = statCards[3].querySelector('.text-3xl');
        // This would ideally fetch total from DB, but for now use current data
        if (valueEl) valueEl.textContent = (usersData.length + 1).toString(); // +1 for current admin
      }
    }

    async function renderHospitals() {
      const container = document.getElementById('hospitals-collapsible-list');
      if (!container) return;

      if (hospitalsData.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-hospital text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No hospitals yet</p>
            <p class="text-sm">Add your first hospital to get started</p>
          </div>
        `;
        return;
      }

      const hospitalsHtml = await Promise.all(hospitalsData.map(async hospital => {
        const admins = usersData.filter(u => u.hospital_id === hospital.id && u.role === 'hospital_admin');
        
        return `
          <div class="hospital-item rounded-xl border border-border bg-white overflow-hidden" data-hospital-id="${hospital.id}">
            <!-- Hospital Header (Always Visible) -->
            <div class="hospital-header flex items-center justify-between p-5 cursor-pointer hover:bg-accent/30 transition-colors"
                 onclick="toggleHospital('${hospital.id}')">
              <div class="flex items-center gap-4 flex-1">
                <div class="w-14 h-14 rounded-xl bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-lg">
                  <i class="fas fa-hospital text-white text-2xl"></i>
                </div>
                <div class="flex-1">
                  <div class="flex items-center gap-3 mb-1">
                    <h4 class="font-bold text-lg text-foreground">${hospital.name}</h4>
                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-700">
                      ${admins.length} Admin${admins.length !== 1 ? 's' : ''}
                    </span>
                  </div>
                  <p class="text-sm text-muted-foreground flex items-center gap-2">
                    <i class="fas fa-map-marker-alt text-xs"></i>
                    ${hospital.address || 'No address specified'}
                  </p>
                  ${hospital.phone ? `
                    <p class="text-xs text-muted-foreground mt-1 flex items-center gap-2">
                      <i class="fas fa-phone text-xs"></i>
                      ${hospital.phone}
                    </p>
                  ` : ''}
                </div>
              </div>
              <div class="flex items-center gap-3">
                <button 
                  class="edit-hospital-btn px-4 py-2 text-sm border-2 border-border rounded-lg hover:bg-accent hover:border-primary transition-all"
                  data-hospital-id="${hospital.id}"
                  onclick="event.stopPropagation();"
                  title="Edit hospital details"
                >
                  <i class="fas fa-edit mr-2"></i>
                  Edit
                </button>
                <button 
                  class="delete-hospital-btn px-4 py-2 text-sm text-red-600 border-2 border-red-200 rounded-lg hover:bg-red-50 hover:border-red-400 transition-all"
                  data-hospital-id="${hospital.id}"
                  onclick="event.stopPropagation();"
                  title="Delete hospital"
                >
                  <i class="fas fa-trash mr-2"></i>
                  Delete
                </button>
                <div class="expand-icon text-primary ml-2">
                  <i class="fas fa-chevron-right text-xl"></i>
                </div>
              </div>
            </div>

            <!-- Hospital Details (Collapsible) -->
            <div class="hospital-details hidden" data-hospital-id="${hospital.id}">
              <div class="px-5 pb-5 space-y-4 border-t border-border bg-gradient-to-b from-accent/20 to-transparent">
                <!-- Loading State (hidden by default) -->
                <div class="hospital-loading hidden py-8 text-center">
                  <div class="inline-flex items-center gap-3 text-muted-foreground">
                    <i class="fas fa-spinner fa-spin text-2xl text-primary"></i>
                    <span class="text-sm font-medium">Loading hospital data...</span>
                  </div>
                </div>

                <!-- Content Container (will be populated when expanded) -->
                <div class="hospital-content hidden">
                </div>
              </div>
            </div>
          </div>
        `;
      }));

      container.innerHTML = `<div class="space-y-3">${hospitalsHtml.join('')}</div>`;

      // Attach event listeners for hospital-level buttons only
      document.querySelectorAll('.edit-hospital-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.hospitalId;
          const hospital = hospitalsData.find(h => h.id === id);
          if (hospital) openHospitalModal(hospital);
        });
      });

      document.querySelectorAll('.delete-hospital-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.hospitalId;
          deleteHospital(id!);
        });
      });
    }

    // Toggle hospital expansion
    async function toggleHospital(hospitalId: string) {
      const hospitalItem = document.querySelector(`.hospital-item[data-hospital-id="${hospitalId}"]`) as HTMLElement;
      const detailsSection = document.querySelector(`.hospital-details[data-hospital-id="${hospitalId}"]`) as HTMLElement;
      const expandIcon = hospitalItem?.querySelector('.expand-icon') as HTMLElement;
      
      if (!hospitalItem || !detailsSection) {
        console.error('Hospital elements not found:', { hospitalItem, detailsSection, hospitalId });
        return;
      }

      const isExpanded = hospitalItem.classList.contains('expanded');

      if (isExpanded) {
        // Collapse
        hospitalItem.classList.remove('expanded');
        detailsSection.classList.add('hidden');
        if (expandIcon) {
          expandIcon.style.transition = '0.3s';
          expandIcon.style.transform = 'rotate(0deg)';
        }
      } else {
        // Expand
        hospitalItem.classList.add('expanded');
        detailsSection.classList.remove('hidden');
        if (expandIcon) {
          expandIcon.style.transition = '0.3s';
          expandIcon.style.transform = 'rotate(90deg)';
        }
        
        // Load hospital data if not already loaded
        if (!detailsSection.classList.contains('data-loaded')) {
          await loadHospitalData(hospitalId);
          detailsSection.classList.add('data-loaded');
        }
      }
    }

    // Make toggleHospital available globally
    (window as any).toggleHospital = toggleHospital;

    async function loadHospitalData(hospitalId: string) {
      const detailsSection = document.querySelector(`.hospital-details[data-hospital-id="${hospitalId}"]`);
      if (!detailsSection) return;

      const loadingEl = detailsSection.querySelector('.hospital-loading');
      const contentEl = detailsSection.querySelector('.hospital-content');

      // Show skeleton loader
      if (loadingEl) {
        loadingEl.classList.remove('hidden');
        loadingEl.innerHTML = `
          <div class="space-y-4 animate-pulse">
            <!-- Stats Skeleton -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
              ${[1,2,3,4].map(() => `
                <div class="bg-gradient-to-br from-gray-200 via-gray-100 to-gray-200 bg-[length:200%_100%] animate-shimmer rounded-lg p-4 h-24">
                  <div class="h-3 bg-gray-300 rounded w-2/3 mb-3"></div>
                  <div class="h-8 bg-gray-300 rounded w-1/3"></div>
                </div>
              `).join('')}
            </div>
            
            <!-- Admins Skeleton -->
            <div class="mt-5">
              <div class="h-5 bg-gray-300 rounded w-48 mb-3"></div>
              <div class="space-y-2">
                ${[1,2].map(() => `
                  <div class="bg-gradient-to-br from-gray-200 via-gray-100 to-gray-200 bg-[length:200%_100%] animate-shimmer rounded-lg p-4 h-16"></div>
                `).join('')}
              </div>
            </div>
            
            <!-- Recent Appointments Skeleton -->
            <div class="mt-5">
              <div class="h-5 bg-gray-300 rounded w-56 mb-3"></div>
              <div class="space-y-2">
                ${[1,2,3].map(() => `
                  <div class="bg-gradient-to-br from-gray-200 via-gray-100 to-gray-200 bg-[length:200%_100%] animate-shimmer rounded-lg p-4 h-20"></div>
                `).join('')}
              </div>
            </div>
          </div>
        `;
      }
      if (contentEl) contentEl.classList.add('hidden');

      try {
        // Get admins for this hospital
        const admins = usersData.filter(u => u.hospital_id === hospitalId && u.role === 'hospital_admin');

        // Fetch appointments for this hospital - simplified query without joins
        const { data: appointments, error } = await supabase
          .from('appointments')
          .select('*')
          .eq('hospital_id', hospitalId)
          .order('appointment_date', { ascending: false })
          .limit(10);

        if (error) {
          console.error('Error fetching appointments:', error);
        }

        const appointmentsList = appointments || [];
        
        // Update stats
        const totalCount = appointmentsList.length;
        const pendingCount = appointmentsList.filter(a => a.status === 'pending').length;
        const confirmedCount = appointmentsList.filter(a => a.status === 'confirmed').length;
        const completedCount = appointmentsList.filter(a => a.status === 'completed').length;

        // Generate the content HTML
        const contentHtml = `
          <!-- Stats Grid -->
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 mt-4">
            <div class="stat-badge bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-xs font-medium text-green-600 mb-1">Total Appointments</p>
                  <p class="text-2xl font-bold text-green-700">${totalCount}</p>
                </div>
                <i class="fas fa-calendar-check text-3xl text-green-400"></i>
              </div>
            </div>
            <div class="stat-badge bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-xs font-medium text-blue-600 mb-1">Pending</p>
                  <p class="text-2xl font-bold text-blue-700">${pendingCount}</p>
                </div>
                <i class="fas fa-clock text-3xl text-blue-400"></i>
              </div>
            </div>
            <div class="stat-badge bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-xs font-medium text-purple-600 mb-1">Confirmed</p>
                  <p class="text-2xl font-bold text-purple-700">${confirmedCount}</p>
                </div>
                <i class="fas fa-check-circle text-3xl text-purple-400"></i>
              </div>
            </div>
            <div class="stat-badge bg-gradient-to-br from-orange-50 to-orange-100 border border-orange-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-xs font-medium text-orange-600 mb-1">Completed</p>
                  <p class="text-2xl font-bold text-orange-700">${completedCount}</p>
                </div>
                <i class="fas fa-check-double text-3xl text-orange-400"></i>
              </div>
            </div>
          </div>

          <!-- Hospital Administrators Section -->
          <div class="mt-5">
            <div class="flex items-center justify-between mb-3">
              <h5 class="font-bold text-foreground flex items-center gap-2">
                <i class="fas fa-user-shield text-primary"></i>
                Hospital Administrators
              </h5>
              <button 
                class="add-hospital-admin-btn px-3 py-1.5 text-xs bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
                data-hospital-id="${hospitalId}"
                onclick="event.stopPropagation();"
              >
                <i class="fas fa-plus mr-1"></i>
                Add Admin
              </button>
            </div>
            ${admins.length > 0 ? `
              <div class="space-y-2">
                ${admins.map(admin => `
                  <div class="admin-badge flex items-center justify-between p-3 rounded-lg border border-border bg-white hover:shadow-md transition-all">
                    <div class="flex items-center gap-3">
                      <div class="w-10 h-10 rounded-full bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center text-white font-semibold text-sm">
                        ${admin.full_name?.charAt(0).toUpperCase() || admin.email?.charAt(0).toUpperCase() || 'U'}
                      </div>
                      <div>
                        <p class="font-semibold text-sm text-foreground">${admin.full_name || 'No name'}</p>
                        <p class="text-xs text-muted-foreground">${admin.email}</p>
                      </div>
                    </div>
                    <div class="flex items-center gap-2">
                      <button 
                        class="edit-admin-btn px-2 py-1 text-xs border border-border rounded hover:bg-accent transition-colors"
                        data-user-id="${admin.id}"
                        onclick="event.stopPropagation();"
                        title="Edit admin"
                      >
                        <i class="fas fa-edit"></i>
                      </button>
                      <button 
                        class="demote-admin-btn px-2 py-1 text-xs text-orange-600 border border-orange-200 rounded hover:bg-orange-50 transition-colors"
                        data-user-id="${admin.id}"
                        onclick="event.stopPropagation();"
                        title="Demote to patient"
                      >
                        <i class="fas fa-user-minus"></i>
                      </button>
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : `
              <div class="text-center py-6 text-muted-foreground bg-accent/30 rounded-lg border border-dashed border-border">
                <i class="fas fa-user-shield text-3xl mb-2 opacity-50"></i>
                <p class="text-sm">No administrators assigned yet</p>
              </div>
            `}
          </div>

          <!-- Recent Appointments Section -->
          <div class="mt-5">
            <h5 class="font-bold text-foreground mb-3 flex items-center gap-2">
              <i class="fas fa-calendar-alt text-primary"></i>
              Recent Appointments
            </h5>
            ${appointmentsList.length > 0 ? `
              <div class="bg-white rounded-lg border border-border overflow-hidden">
                <div class="overflow-x-auto">
                  <table class="w-full text-sm">
                    <thead class="bg-accent/50 border-b border-border">
                      <tr>
                        <th class="px-4 py-3 text-left font-semibold text-foreground">Date</th>
                        <th class="px-4 py-3 text-left font-semibold text-foreground">Time</th>
                        <th class="px-4 py-3 text-left font-semibold text-foreground">Patient ID</th>
                        <th class="px-4 py-3 text-left font-semibold text-foreground">Specialty</th>
                        <th class="px-4 py-3 text-left font-semibold text-foreground">Status</th>
                      </tr>
                    </thead>
                    <tbody class="divide-y divide-border">
                      ${appointmentsList.slice(0, 5).map((apt, idx) => {
                        const statusColors: Record<string, string> = {
                          'pending': 'bg-yellow-100 text-yellow-700 border-yellow-300',
                          'confirmed': 'bg-blue-100 text-blue-700 border-blue-300',
                          'completed': 'bg-green-100 text-green-700 border-green-300',
                          'cancelled': 'bg-red-100 text-red-700 border-red-300'
                        };
                        const statusColor = statusColors[apt.status] || statusColors['pending'];
                        const appointmentDate = new Date(apt.appointment_date);
                        const dateStr = appointmentDate.toLocaleDateString();
                        const timeStr = appointmentDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
                        
                        return `
                          <tr class="appointment-row hover:bg-accent/30 transition-colors">
                            <td class="px-4 py-3 text-foreground font-medium">
                              ${dateStr}
                            </td>
                            <td class="px-4 py-3 text-muted-foreground">
                              ${timeStr}
                            </td>
                            <td class="px-4 py-3">
                              <div>
                                <p class="font-medium text-foreground text-xs">${apt.patient_id.substring(0, 8)}...</p>
                              </div>
                            </td>
                            <td class="px-4 py-3 text-muted-foreground">
                              ${apt.specialty || 'General'}
                            </td>
                            <td class="px-4 py-3">
                              <span class="px-2 py-1 text-xs font-medium rounded-full border ${statusColor}">
                                ${apt.status.charAt(0).toUpperCase() + apt.status.slice(1)}
                              </span>
                            </td>
                          </tr>
                        `;
                      }).join('')}
                    </tbody>
                  </table>
                </div>
                ${appointmentsList.length > 5 ? `
                  <div class="px-4 py-3 bg-accent/20 border-t border-border text-center">
                    <p class="text-xs text-muted-foreground">
                      Showing 5 of ${appointmentsList.length} appointments
                    </p>
                  </div>
                ` : ''}
              </div>
            ` : `
              <div class="text-center py-8 text-muted-foreground bg-accent/30 rounded-lg border border-dashed border-border">
                <i class="fas fa-calendar-times text-4xl mb-3 opacity-50"></i>
                <p class="text-sm font-medium">No recent appointments</p>
                <p class="text-xs mt-1">Appointments will appear here once scheduled</p>
              </div>
            `}
          </div>
        `;

        // Update content
        if (contentEl) {
          contentEl.innerHTML = contentHtml;
        }

        // Attach event listeners for dynamically created buttons
        document.querySelectorAll('.add-hospital-admin-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const hospitalId = (e.currentTarget as HTMLElement).dataset.hospitalId;
            openUserModal(undefined, 'hospital_admin');
            // Pre-select the hospital
            setTimeout(() => {
              const hospitalSelect = document.getElementById('user-hospital') as HTMLSelectElement;
              if (hospitalSelect) {
                hospitalSelect.value = hospitalId || '';
              }
            }, 100);
          });
        });

        document.querySelectorAll('.edit-admin-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const userId = (e.currentTarget as HTMLElement).dataset.userId;
            const user = usersData.find(u => u.id === userId);
            if (user) openUserModal(user, 'hospital_admin');
          });
        });

        document.querySelectorAll('.demote-admin-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const userId = (e.currentTarget as HTMLElement).dataset.userId;
            demoteUserToPatient(userId!);
          });
        });

        // Hide loading with fade out, show content with fade in
        if (loadingEl) {
          (loadingEl as HTMLElement).style.opacity = '0';
          setTimeout(() => {
            loadingEl.classList.add('hidden');
          }, 300);
        }
        
        if (contentEl) {
          (contentEl as HTMLElement).style.opacity = '0';
          contentEl.classList.remove('hidden');
          setTimeout(() => {
            (contentEl as HTMLElement).style.transition = 'opacity 0.5s ease-in';
            (contentEl as HTMLElement).style.opacity = '1';
          }, 300);
        }

      } catch (error) {
        console.error('Error loading hospital data:', error);
        if (loadingEl) {
          loadingEl.innerHTML = `
            <div class="text-center py-6 text-red-600 animate-shake">
              <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
              <p class="text-sm">Failed to load hospital data</p>
            </div>
          `;
        }
      }
    }

    async function demoteUserToPatient(id: string) {
      const user = usersData.find(u => u.id === id);
      if (!user) return;

      const currentRole = getRoleDisplayName(user.role);
      
      const confirmed = await showConfirm(
        `Demote ${user.full_name || user.email}?`,
        `Current role: ${currentRole}\nNew role: Patient\n\nThis will:\n• Remove their administrator privileges\n• Clear hospital assignment\n• Give them patient-level access only\n\nContinue?`,
        { type: 'warning', confirmText: 'Demote to Patient', cancelText: 'Cancel' }
      );
      
      if (!confirmed) return;

      try {
        const { error } = await supabase
          .from('profiles')
          .update({
            role: 'patient',
            hospital_id: null // Clear hospital assignment
          })
          .eq('id', id);

        if (error) {
          console.error('Error demoting user:', error);
          if (error.code === '42501') {
            throw new Error('Permission denied. Please ensure you have site administrator privileges.');
          }
          throw new Error(error.message || 'Failed to demote user');
        }
        
        showToast(`${user.full_name || user.email} has been demoted to Patient role successfully!`, 'success');
        
        await loadUsers();
        renderUsers();
        renderHospitals(); // Re-render hospitals to update admin counts
        updateStats();
      } catch (error: any) {
        console.error('Error demoting user:', error);
        showToast(error.message || 'Failed to demote user.', 'error');
      }
    }

    function getRoleDisplayName(role: string): string {
      const roleMap: Record<string, string> = {
        'mediconnect_admin': 'Site Administrator',
        'hospital_admin': 'Hospital Administrator',
        'hospital_medic': 'Hospital Medic',
        'patient': 'Patient'
      };
      return roleMap[role] || role;
    }

    function renderUsers() {
      const siteAdmins = usersData.filter(u => u.role === 'mediconnect_admin');

      // Only render site admins list - hospital admins are now shown under each hospital
      renderUserList('site-admins-section', siteAdmins, 'mediconnect_admin');
    }

    function renderUserList(containerId: string, users: any[], role: string) {
      const section = document.getElementById(containerId);
      if (!section) return;

      const listContainer = section.querySelector(`#${role}-list`);
      if (!listContainer) return;

      const roleLabel = role === 'hospital_admin' ? 'Hospital Administrator' : 'Site Administrator';

      if (users.length === 0) {
        listContainer.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-users text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No ${roleLabel.toLowerCase()}s yet</p>
            <p class="text-sm">Add your first ${roleLabel.toLowerCase()} to get started</p>
          </div>
        `;
        return;
      }

      listContainer.innerHTML = `
        <div class="space-y-3">
          ${users.map(user => `
            <div class="flex items-center justify-between p-4 rounded-lg border border-border hover:bg-accent/50 transition-colors">
              <div class="flex items-center gap-4">
                <div class="w-10 h-10 rounded-full bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center text-white font-semibold">
                  ${user.full_name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase() || 'U'}
                </div>
                <div>
                  <p class="font-semibold text-foreground">${user.full_name || 'No name'}</p>
                  <p class="text-sm text-muted-foreground">${user.email}</p>
                  ${user.hospital_id ? `
                    <p class="text-xs text-muted-foreground mt-1">
                      <i class="fas fa-hospital text-xs mr-1"></i>
                      <span class="hospital-name" data-hospital-id="${user.hospital_id}">Loading...</span>
                    </p>
                  ` : ''}
                </div>
              </div>
              <div class="flex items-center gap-2">
                <button 
                  class="edit-user-btn px-3 py-2 text-sm border border-border rounded-lg hover:bg-accent transition-colors"
                  data-user-id="${user.id}"
                  data-role="${role}"
                  title="Edit user details"
                >
                  <i class="fas fa-edit mr-1"></i>
                  Edit
                </button>
                <button 
                  class="demote-user-btn px-3 py-2 text-sm text-orange-600 border border-orange-200 rounded-lg hover:bg-orange-50 transition-colors"
                  data-user-id="${user.id}"
                  title="Remove admin role and make patient"
                >
                  <i class="fas fa-user-minus mr-1"></i>
                  Demote
                </button>
                <button 
                  class="delete-user-btn px-3 py-2 text-sm text-red-600 border border-red-200 rounded-lg hover:bg-red-50 transition-colors"
                  data-user-id="${user.id}"
                  title="Delete user permanently"
                >
                  <i class="fas fa-trash mr-1"></i>
                  Delete
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      `;

      // Attach event listeners
      document.querySelectorAll('.edit-user-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.userId;
          const role = (e.currentTarget as HTMLElement).dataset.role;
          const user = usersData.find(u => u.id === id);
          if (user) openUserModal(user, role!);
        });
      });

      document.querySelectorAll('.demote-user-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.userId;
          demoteUserToPatient(id!);
        });
      });

      document.querySelectorAll('.delete-user-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.userId;
          deleteUser(id!);
        });
      });
    }

    function updateHospitalNames() {
      document.querySelectorAll('.hospital-name').forEach(el => {
        const hospitalId = el.getAttribute('data-hospital-id');
        
        // First try to find hospital from the user's joined data
        const user = usersData.find(u => u.hospital_id === hospitalId);
        if (user && user.hospital) {
          el.textContent = user.hospital.name;
          return;
        }
        
        // Fallback to hospitalsData array
        const hospital = hospitalsData.find(h => h.id === hospitalId);
        if (hospital) {
          el.textContent = hospital.name;
        } else {
          el.textContent = 'Unknown Hospital';
        }
      });
    }

    // Modal functions
    function openHospitalModal(hospital?: any) {
      const modal = document.getElementById('hospital-modal');
      const modalContent = document.getElementById('hospital-modal-content');
      const title = document.getElementById('hospital-modal-title');
      const form = document.getElementById('hospital-form') as HTMLFormElement;
      
      if (!modal || !modalContent || !title || !form) return;

      if (hospital) {
        title.textContent = 'Edit Hospital';
        (document.getElementById('hospital-id') as HTMLInputElement).value = hospital.id;
        (document.getElementById('hospital-name') as HTMLInputElement).value = hospital.name;
        (document.getElementById('hospital-address') as HTMLInputElement).value = hospital.address || '';
        (document.getElementById('hospital-phone') as HTMLInputElement).value = hospital.phone || '';
        (document.getElementById('hospital-email') as HTMLInputElement).value = hospital.email || '';
      } else {
        title.textContent = 'Add Hospital';
        form.reset();
      }

      modal.classList.remove('hidden');
      modal.style.display = 'flex';
      
      // Trigger animation
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }

    // User search cache
    let userSearchCache: Record<string, any[]> = {};
    let searchDebounceTimer: number | null = null;

    function openUserModal(user?: any, role?: string) {
      const modal = document.getElementById('user-modal');
      const modalContent = document.getElementById('user-modal-content');
      const title = document.getElementById('user-modal-title');
      const form = document.getElementById('user-form') as HTMLFormElement;
      const hospitalContainer = document.getElementById('hospital-select-container');
      const userSearchSection = document.getElementById('user-search-section');
      const searchResultsDropdown = document.getElementById('search-results-dropdown');
      
      if (!modal || !modalContent || !title || !form) return;

      const roleLabel = role === 'hospital_admin' ? 'Hospital Administrator' : 'Site Administrator';
      
      // Store target role
      (document.getElementById('user-role-target') as HTMLInputElement).value = role || '';
      const roleDisplayElement = document.getElementById('user-role-display');
      if (roleDisplayElement) {
        roleDisplayElement.textContent = roleLabel;
      }

      if (user) {
        // Editing existing user
        title.textContent = `Edit ${roleLabel}`;
        userSearchSection?.classList.add('hidden');
        form.classList.remove('hidden');
        
        (document.getElementById('user-id') as HTMLInputElement).value = user.id;
        (document.getElementById('user-email') as HTMLInputElement).value = user.email;
        (document.getElementById('user-fullname') as HTMLInputElement).value = user.full_name || '';
        
        if (user.hospital_id) {
          (document.getElementById('user-hospital') as HTMLSelectElement).value = user.hospital_id;
        }
      } else {
        // Adding new user - show search first
        title.textContent = `Assign ${roleLabel} Role`;
        userSearchSection?.classList.remove('hidden');
        form.classList.add('hidden');
        form.reset();
        
        if (searchResultsDropdown) {
          searchResultsDropdown.innerHTML = '';
          searchResultsDropdown.classList.add('hidden');
        }
        (document.getElementById('user-email-search') as HTMLInputElement).value = '';
        (document.getElementById('user-id') as HTMLInputElement).value = '';
      }

      // Show/hide hospital select based on role
      if (role === 'hospital_admin') {
        hospitalContainer?.classList.remove('hidden');
        populateHospitalSelect();
      } else {
        hospitalContainer?.classList.add('hidden');
      }

      modal.classList.remove('hidden');
      modal.style.display = 'flex';
      
      // Trigger animation
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }

    function populateHospitalSelect() {
      const select = document.getElementById('user-hospital') as HTMLSelectElement;
      if (!select) return;

      select.innerHTML = '<option value="">Select a hospital</option>' +
        hospitalsData.map(h => `<option value="${h.id}">${h.name}</option>`).join('');
    }

    function closeHospitalModal() {
      const modal = document.getElementById('hospital-modal');
      const modalContent = document.getElementById('hospital-modal-content');
      
      if (modal && modalContent) {
        modalContent.classList.add('scale-95', 'opacity-0');
        modalContent.classList.remove('scale-100', 'opacity-100');
        
        setTimeout(() => {
          modal.classList.add('hidden');
          modal.style.display = 'none';
        }, 200);
      }
    }

    function closeUserModal() {
      const modal = document.getElementById('user-modal');
      const modalContent = document.getElementById('user-modal-content');
      
      if (modal && modalContent) {
        modalContent.classList.add('scale-95', 'opacity-0');
        modalContent.classList.remove('scale-100', 'opacity-100');
        
        setTimeout(() => {
          modal.classList.add('hidden');
          modal.style.display = 'none';
        }, 200);
      }
    }

    async function saveHospital(e: Event) {
      e.preventDefault();
      
      const id = (document.getElementById('hospital-id') as HTMLInputElement).value;
      const name = (document.getElementById('hospital-name') as HTMLInputElement).value;
      const address = (document.getElementById('hospital-address') as HTMLInputElement).value;
      const phone = (document.getElementById('hospital-phone') as HTMLInputElement).value;
      const email = (document.getElementById('hospital-email') as HTMLInputElement).value;

      const hospitalData = { name, address, phone, email };

      try {
        if (id) {
          // Update existing
          const { error } = await supabase
            .from('hospitals')
            .update(hospitalData)
            .eq('id', id);

          if (error) {
            console.error('Error updating hospital:', error);
            throw new Error(error.message || 'Failed to update hospital');
          }
          showToast('Hospital updated successfully!', 'success');
        } else {
          // Create new
          const { error } = await supabase
            .from('hospitals')
            .insert(hospitalData);

          if (error) {
            console.error('Error creating hospital:', error);
            if (error.code === '42501') {
              throw new Error('Permission denied. Please ensure you have site administrator privileges.');
            }
            throw new Error(error.message || 'Failed to create hospital');
          }
          showToast('Hospital added successfully!', 'success');
        }

        closeHospitalModal();
        await loadHospitals();
        renderHospitals();
        updateStats();
      } catch (error: any) {
        console.error('Error saving hospital:', error);
        showToast(error.message || 'Failed to save hospital. Please try again.', 'error');
      }
    }

    async function saveUser(e: Event) {
      e.preventDefault();
      
      const id = (document.getElementById('user-id') as HTMLInputElement).value;
      const targetRole = (document.getElementById('user-role-target') as HTMLInputElement).value;
      const email = (document.getElementById('user-email') as HTMLInputElement).value;
      const fullName = (document.getElementById('user-fullname') as HTMLInputElement).value;
      const hospitalId = (document.getElementById('user-hospital') as HTMLSelectElement).value;

      if (!id) {
        showToast('No user selected. Please search for a user first.', 'error');
        return;
      }

      // Validate hospital selection for hospital roles
      if (targetRole === 'hospital_admin' && !hospitalId) {
        showToast('Please select a hospital for Hospital Administrator role', 'warning');
        return;
      }

      // Update user profile
      const userData: any = { 
        email, 
        full_name: fullName,
        role: targetRole
      };

      if (targetRole === 'hospital_admin' && hospitalId) {
        userData.hospital_id = hospitalId;
      } else if (targetRole === 'mediconnect_admin') {
        userData.hospital_id = null; // Site admins don't need a hospital
      }

      try {
        const { error } = await supabase
          .from('profiles')
          .update(userData)
          .eq('id', id);

        if (error) {
          console.error('Error updating user:', error);
          if (error.code === '42501') {
            throw new Error('Permission denied. Please ensure you have site administrator privileges.');
          }
          throw new Error(error.message || 'Failed to update user');
        }
        showToast('User role assigned successfully!', 'success');
        
        closeUserModal();
        await loadUsers();
        renderUsers();
        renderHospitals(); // Re-render hospitals to update admin counts
        updateStats();
      } catch (error: any) {
        console.error('Error saving user:', error);
        showToast(error.message || 'Failed to save user. Please try again.', 'error');
      }
    }

    async function deleteHospital(id: string) {
      const confirmed = await showConfirm(
        'Delete Hospital?',
        'Are you sure you want to delete this hospital?\n\nThis action cannot be undone.',
        { type: 'danger', confirmText: 'Delete', cancelText: 'Cancel' }
      );
      
      if (!confirmed) return;

      try {
        const { error } = await supabase
          .from('hospitals')
          .delete()
          .eq('id', id);

        if (error) {
          console.error('Error deleting hospital:', error);
          if (error.code === '23503') {
            throw new Error('Cannot delete hospital. It is currently assigned to administrators. Please reassign them first.');
          }
          if (error.code === '42501') {
            throw new Error('Permission denied. Please ensure you have site administrator privileges.');
          }
          throw new Error(error.message || 'Failed to delete hospital');
        }
        showToast('Hospital deleted successfully!', 'success');
        
        await loadHospitals();
        await loadUsers(); // Reload users in case any were affected
        renderHospitals();
        renderUsers();
        updateStats();
      } catch (error: any) {
        console.error('Error deleting hospital:', error);
        showToast(error.message || 'Failed to delete hospital.', 'error');
      }
    }

    // Pharmacy modal functions
    function openPharmacyModal(pharmacy?: any) {
      const modal = document.getElementById('pharmacy-modal');
      const modalContent = document.getElementById('pharmacy-modal-content');
      const form = document.getElementById('pharmacy-form') as HTMLFormElement;
      const title = modalContent?.querySelector('h3');
      
      if (!modal || !modalContent || !form) return;

      if (pharmacy) {
        if (title) title.textContent = 'Edit Pharmacy';
        (document.getElementById('pharmacy-id') as HTMLInputElement).value = pharmacy.id;
        (document.getElementById('pharmacy-name') as HTMLInputElement).value = pharmacy.name;
        (document.getElementById('pharmacy-address') as HTMLInputElement).value = pharmacy.address || '';
        (document.getElementById('pharmacy-phone') as HTMLInputElement).value = pharmacy.phone || '';
        (document.getElementById('pharmacy-email') as HTMLInputElement).value = pharmacy.email || '';
      } else {
        if (title) title.textContent = 'Add Pharmacy';
        form.reset();
      }

      modal.style.display = 'flex';
      
      // Trigger animation
      setTimeout(() => {
        modalContent.style.transform = 'scale(1)';
        modalContent.style.opacity = '1';
      }, 10);
    }

    async function deletePharmacy(id: string) {
      const confirmed = await showConfirm(
        'Delete Pharmacy?',
        'Are you sure you want to delete this pharmacy?\n\nThis action cannot be undone.',
        { type: 'danger', confirmText: 'Delete', cancelText: 'Cancel' }
      );
      
      if (!confirmed) return;

      try {
        const { error } = await supabase
          .from('pharmacies')
          .delete()
          .eq('id', id);

        if (error) {
          console.error('Error deleting pharmacy:', error);
          if (error.code === '23503') {
            throw new Error('Cannot delete pharmacy. It is currently assigned to staff. Please reassign them first.');
          }
          if (error.code === '42501') {
            throw new Error('Permission denied. Please ensure you have site administrator privileges.');
          }
          throw new Error(error.message || 'Failed to delete pharmacy');
        }
        showToast('Pharmacy deleted successfully!', 'success');
        
        await loadPharmacies();
        await loadPharmacyUsers();
        renderPharmacies();
        updateStats();
      } catch (error: any) {
        console.error('Error deleting pharmacy:', error);
        showToast(error.message || 'Failed to delete pharmacy.', 'error');
      }
    }

    async function deleteUser(id: string) {
      const confirmed = await showConfirm(
        'Delete User?',
        'Are you sure you want to delete this user?\n\nThis will remove their profile and access to the system.\n\nThis action cannot be undone.',
        { type: 'danger', confirmText: 'Delete', cancelText: 'Cancel' }
      );
      
      if (!confirmed) return;

      try {
        const { error } = await supabase
          .from('profiles')
          .delete()
          .eq('id', id);

        if (error) {
          console.error('Error deleting user:', error);
          if (error.code === '42501') {
            throw new Error('Permission denied. Please ensure you have site administrator privileges.');
          }
          throw new Error(error.message || 'Failed to delete user');
        }
        showToast('User deleted successfully!', 'success');
        
        await loadUsers();
        renderUsers();
        renderHospitals(); // Re-render hospitals to update admin counts
        updateStats();
      } catch (error: any) {
        console.error('Error deleting user:', error);
        showToast(error.message || 'Failed to delete user.', 'error');
      }
    }

    async function liveSearchUsers(query: string) {
      const dropdown = document.getElementById('search-results-dropdown');
      const spinner = document.getElementById('search-spinner');
      
      if (!dropdown || !spinner) return;

      // Clear if query is too short
      if (query.length < 2) {
        dropdown.classList.add('hidden');
        dropdown.innerHTML = '';
        return;
      }

      // Check cache first
      const cacheKey = query.toLowerCase();
      if (userSearchCache[cacheKey]) {
        displaySearchResults(userSearchCache[cacheKey], dropdown);
        return;
      }

      // Show loading
      spinner.classList.remove('hidden');

      try {
        const { data: profiles, error } = await supabase
          .from('profiles')
          .select('id, email, full_name, role, hospital_id')
          .ilike('email', `%${query}%`)
          .limit(10);

        spinner.classList.add('hidden');

        if (error) {
          console.error('Error searching users:', error);
          dropdown.innerHTML = '<div class="p-3 text-sm text-red-600">❌ Error searching users</div>';
          dropdown.classList.remove('hidden');
          return;
        }

        // Cache results
        userSearchCache[cacheKey] = profiles || [];
        displaySearchResults(profiles || [], dropdown);

      } catch (error) {
        console.error('Error in live search:', error);
        spinner.classList.add('hidden');
        dropdown.innerHTML = '<div class="p-3 text-sm text-red-600">❌ Search failed</div>';
        dropdown.classList.remove('hidden');
      }
    }

    function displaySearchResults(profiles: any[], dropdown: HTMLElement) {
      if (profiles.length === 0) {
        dropdown.innerHTML = '<div class="p-3 text-sm text-gray-500">No users found</div>';
        dropdown.classList.remove('hidden');
        return;
      }

      // Filter out users who already have admin roles
      const availableProfiles = profiles.filter(p => p.role === 'patient');

      if (availableProfiles.length === 0) {
        dropdown.innerHTML = '<div class="p-3 text-sm text-yellow-600">No eligible users found. Only patients can be assigned administrator roles.</div>';
        dropdown.classList.remove('hidden');
        return;
      }

      dropdown.innerHTML = availableProfiles.map(profile => `
        <div 
          class="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors"
          data-user-id="${profile.id}"
          data-user-email="${profile.email}"
          data-user-name="${profile.full_name || ''}"
          data-user-role="${profile.role}"
          data-user-hospital="${profile.hospital_id || ''}"
          onclick="selectUserFromSearch(this)"
        >
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-900">${profile.email}</p>
              ${profile.full_name ? `<p class="text-xs text-gray-500 mt-0.5">${profile.full_name}</p>` : ''}
              <p class="text-xs text-gray-400 mt-0.5">
                <i class="fas fa-user-tag mr-1"></i>${getRoleDisplayName(profile.role)}
              </p>
            </div>
            <i class="fas fa-chevron-right text-gray-400 text-xs mt-1"></i>
          </div>
        </div>
      `).join('');
      
      dropdown.classList.remove('hidden');
    }

    function selectUserFromSearch(element: HTMLElement) {
      const userId = element.dataset.userId;
      const email = element.dataset.userEmail;
      const fullName = element.dataset.userName;
      const hospitalId = element.dataset.userHospital;

      // Populate form
      (document.getElementById('user-id') as HTMLInputElement).value = userId || '';
      (document.getElementById('user-email') as HTMLInputElement).value = email || '';
      (document.getElementById('user-fullname') as HTMLInputElement).value = fullName || '';
      
      if (hospitalId) {
        (document.getElementById('user-hospital') as HTMLSelectElement).value = hospitalId;
      }

      // Hide search, show form
      const userSearchSection = document.getElementById('user-search-section');
      const userForm = document.getElementById('user-form');
      const dropdown = document.getElementById('search-results-dropdown');
      
      userSearchSection?.classList.add('hidden');
      userForm?.classList.remove('hidden');
      dropdown?.classList.add('hidden');
    }

    // Make function global for onclick
    (window as any).selectUserFromSearch = selectUserFromSearch;

    async function searchUser() {
      // This function is now deprecated but kept for compatibility
      const emailInput = document.getElementById('user-email-search') as HTMLInputElement;
      const email = emailInput.value.trim();
      
      if (email.length >= 2) {
        await liveSearchUsers(email);
      }
    }

    // Event listeners
    document.getElementById('add-hospital-btn')?.addEventListener('click', () => openHospitalModal());
    document.getElementById('close-hospital-modal')?.addEventListener('click', closeHospitalModal);
    document.getElementById('cancel-hospital-btn')?.addEventListener('click', closeHospitalModal);
    document.getElementById('hospital-form')?.addEventListener('submit', saveHospital);

    document.getElementById('add-hospital_admin-btn')?.addEventListener('click', () => openUserModal(undefined, 'hospital_admin'));
    document.getElementById('add-mediconnect_admin-btn')?.addEventListener('click', () => openUserModal(undefined, 'mediconnect_admin'));
    document.getElementById('close-user-modal')?.addEventListener('click', closeUserModal);
    document.getElementById('cancel-user-btn')?.addEventListener('click', closeUserModal);
    document.getElementById('user-form')?.addEventListener('submit', saveUser);
    
    // Live search with debouncing
    const searchInput = document.getElementById('user-email-search') as HTMLInputElement;
    searchInput?.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.trim();
      
      // Clear previous timer
      if (searchDebounceTimer) {
        clearTimeout(searchDebounceTimer);
      }
      
      // Debounce search - wait 300ms after user stops typing
      searchDebounceTimer = window.setTimeout(() => {
        liveSearchUsers(query);
      }, 300);
    });

    // Click outside dropdown to close
    document.addEventListener('click', (e: Event) => {
      const dropdown = document.getElementById('search-results-dropdown');
      const searchInput = document.getElementById('user-email-search');
      const target = e.target as HTMLElement;
      
      if (dropdown && !dropdown.contains(target) && target !== searchInput) {
        dropdown.classList.add('hidden');
      }
    });

    // Pharmacy functions
    function showAddPharmacyModal() {
      const modal = document.getElementById('pharmacy-modal');
      if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
          const content = document.getElementById('pharmacy-modal-content');
          if (content) {
            content.style.transform = 'scale(1)';
            content.style.opacity = '1';
          }
        }, 10);
      }
    }

    function hideAddPharmacyModal() {
      const content = document.getElementById('pharmacy-modal-content');
      if (content) {
        content.style.transform = 'scale(0.95)';
        content.style.opacity = '0';
      }
      setTimeout(() => {
        const modal = document.getElementById('pharmacy-modal');
        if (modal) {
          modal.style.display = 'none';
        }
        (document.getElementById('pharmacy-form') as HTMLFormElement)?.reset();
      }, 200);
    }

    async function savePharmacy(e: Event) {
      e.preventDefault();
      
      const id = (document.getElementById('pharmacy-id') as HTMLInputElement).value;
      const name = (document.getElementById('pharmacy-name') as HTMLInputElement).value;
      const address = (document.getElementById('pharmacy-address') as HTMLInputElement).value;
      const phone = (document.getElementById('pharmacy-phone') as HTMLInputElement).value;
      const email = (document.getElementById('pharmacy-email') as HTMLInputElement).value;

      const pharmacyData = {
        name,
        address: address || null,
        phone: phone || null,
        email: email || null,
      };

      try {
        if (id) {
          // Update existing pharmacy
          const { error } = await supabase
            .from('pharmacies')
            .update(pharmacyData)
            .eq('id', id);

          if (error) throw error;
          showToast('Pharmacy updated successfully!', 'success');
        } else {
          // Insert new pharmacy
          const { error } = await supabase
            .from('pharmacies')
            .insert([pharmacyData]);

          if (error) throw error;
          showToast('Pharmacy added successfully!', 'success');
        }

        hideAddPharmacyModal();
        await loadPharmacies();
        await loadPharmacyUsers();
        renderPharmacies();
      } catch (error) {
        console.error('Error saving pharmacy:', error);
        showToast('Failed to save pharmacy. ' + (error as any).message, 'error');
      }
    }

    function assignPharmacyAdmin(pharmacyId: string, pharmacyName: string) {
      (document.getElementById('assign-pharmacy-id') as HTMLInputElement).value = pharmacyId;
      (document.getElementById('assign-pharmacy-name') as HTMLElement).textContent = pharmacyName;
      
      // Reset and show search section, hide form
      const searchSection = document.getElementById('pharmacy-user-search-section');
      const form = document.getElementById('assign-pharmacy-admin-form');
      const searchInput = document.getElementById('pharmacy-user-email-search') as HTMLInputElement;
      const dropdown = document.getElementById('pharmacy-search-results-dropdown');
      
      searchSection?.classList.remove('hidden');
      form?.classList.add('hidden');
      dropdown?.classList.add('hidden');
      if (searchInput) searchInput.value = '';
      (form as HTMLFormElement)?.reset();
      
      const modal = document.getElementById('assign-pharmacy-admin-modal');
      if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
          const content = document.getElementById('assign-pharmacy-admin-content');
          if (content) {
            content.style.transform = 'scale(1)';
            content.style.opacity = '1';
          }
          // Focus on search input
          searchInput?.focus();
        }, 10);
      }
    }

    function hideAssignPharmacyAdminModal() {
      const content = document.getElementById('assign-pharmacy-admin-content');
      if (content) {
        content.style.transform = 'scale(0.95)';
        content.style.opacity = '0';
      }
      setTimeout(() => {
        const modal = document.getElementById('assign-pharmacy-admin-modal');
        if (modal) {
          modal.style.display = 'none';
        }
        (document.getElementById('assign-pharmacy-admin-form') as HTMLFormElement)?.reset();
      }, 200);
    }

    async function liveSearchPharmacyAdminUsers(query: string) {
      const dropdown = document.getElementById('pharmacy-search-results-dropdown');
      const spinner = document.getElementById('pharmacy-search-spinner');
      
      if (!dropdown || !spinner) return;

      // Clear if query is too short
      if (query.length < 2) {
        dropdown.classList.add('hidden');
        dropdown.innerHTML = '';
        return;
      }

      // Show loading
      spinner.classList.remove('hidden');

      try {
        const { data: profiles, error } = await supabase
          .from('profiles')
          .select('id, email, full_name, cnp, role, pharmacy_id')
          .ilike('email', `%${query}%`)
          .limit(10);

        spinner.classList.add('hidden');

        if (error) {
          console.error('Error searching users:', error);
          dropdown.innerHTML = '<div class="p-3 text-sm text-red-600">❌ Error searching users</div>';
          dropdown.classList.remove('hidden');
          return;
        }

        // Filter out users who already have pharmacy_admin role or are assigned to a pharmacy
        const availableProfiles = (profiles || []).filter(p => 
          p.role === 'patient' || (p.role === 'pharmacy_admin' && !p.pharmacy_id)
        );

        if (availableProfiles.length === 0) {
          dropdown.innerHTML = '<div class="p-3 text-sm text-yellow-600">No eligible users found. Only patients or unassigned pharmacy admins can be assigned.</div>';
          dropdown.classList.remove('hidden');
          return;
        }

        dropdown.innerHTML = availableProfiles.map(profile => `
          <div 
            class="p-3 hover:bg-green-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors"
            data-user-id="${profile.id}"
            data-user-email="${profile.email}"
            data-user-name="${profile.full_name || ''}"
            data-user-cnp="${profile.cnp || ''}"
            onclick="selectPharmacyAdminFromSearch(this)"
          >
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-900">${profile.email}</p>
                ${profile.full_name ? `<p class="text-xs text-gray-500 mt-0.5">${profile.full_name}</p>` : ''}
                <p class="text-xs text-gray-400 mt-0.5">
                  <i class="fas fa-user-tag mr-1"></i>${getRoleDisplayName(profile.role)}
                </p>
              </div>
              <i class="fas fa-chevron-right text-gray-400 text-xs mt-1"></i>
            </div>
          </div>
        `).join('');
        
        dropdown.classList.remove('hidden');

      } catch (error) {
        console.error('Error in live search:', error);
        spinner.classList.add('hidden');
        dropdown.innerHTML = '<div class="p-3 text-sm text-red-600">❌ Search failed</div>';
        dropdown.classList.remove('hidden');
      }
    }

    function selectPharmacyAdminFromSearch(element: HTMLElement) {
      const userId = element.dataset.userId;
      const email = element.dataset.userEmail;
      const fullName = element.dataset.userName;
      const cnp = element.dataset.userCnp;

      // Populate form
      (document.getElementById('pharmacy-admin-user-id') as HTMLInputElement).value = userId || '';
      (document.getElementById('pharmacy-admin-email') as HTMLInputElement).value = email || '';
      (document.getElementById('pharmacy-admin-fullname') as HTMLInputElement).value = fullName || '';
      (document.getElementById('pharmacy-admin-cnp') as HTMLInputElement).value = cnp || '';

      // Hide search, show form
      const userSearchSection = document.getElementById('pharmacy-user-search-section');
      const userForm = document.getElementById('assign-pharmacy-admin-form');
      const dropdown = document.getElementById('pharmacy-search-results-dropdown');
      
      userSearchSection?.classList.add('hidden');
      userForm?.classList.remove('hidden');
      dropdown?.classList.add('hidden');
    }

    async function savePharmacyAdmin(e: Event) {
      e.preventDefault();
      
      const pharmacyId = (document.getElementById('assign-pharmacy-id') as HTMLInputElement).value;
      const userId = (document.getElementById('pharmacy-admin-user-id') as HTMLInputElement).value;
      const email = (document.getElementById('pharmacy-admin-email') as HTMLInputElement).value;
      const fullName = (document.getElementById('pharmacy-admin-fullname') as HTMLInputElement).value;
      const cnp = (document.getElementById('pharmacy-admin-cnp') as HTMLInputElement).value;

      try {
        if (userId) {
          // Update existing user's profile
          const { error: updateError } = await supabase
            .from('profiles')
            .update({
              full_name: fullName,
              cnp: cnp || null,
              role: 'pharmacy_admin',
              pharmacy_id: pharmacyId,
            })
            .eq('id', userId);
          
          if (updateError) throw updateError;
        } else {
          // Create new user in auth
          const { data: authData, error: authError } = await supabase.auth.admin.createUser({
            email: email,
            email_confirm: true,
            user_metadata: {
              full_name: fullName,
            },
          });
          
          if (authError) throw new Error('Failed to create user: ' + authError.message);
          
          // Create profile
          const { error: profileError } = await supabase
            .from('profiles')
            .insert([{
              id: authData.user.id,
              email: email,
              full_name: fullName,
              cnp: cnp || null,
              role: 'pharmacy_admin',
              pharmacy_id: pharmacyId,
            }]);
          
          if (profileError) throw profileError;
        }

        showToast('Pharmacy admin assigned successfully!', 'success');
        hideAssignPharmacyAdminModal();
        await loadPharmacyUsers();
        await renderPharmacies();
      } catch (error) {
        console.error('Error assigning admin:', error);
        showToast('Failed to assign admin. ' + (error as any).message, 'error');
      }
    }

    // Make functions global
    (window as any).showAddPharmacyModal = showAddPharmacyModal;
    (window as any).assignPharmacyAdmin = assignPharmacyAdmin;
    (window as any).hideAddPharmacyModal = hideAddPharmacyModal;
    (window as any).hideAssignPharmacyAdminModal = hideAssignPharmacyAdminModal;
    (window as any).selectPharmacyAdminFromSearch = selectPharmacyAdminFromSearch;

    // Event listeners for pharmacy modals
    document.getElementById('close-pharmacy-modal')?.addEventListener('click', hideAddPharmacyModal);
    document.getElementById('cancel-pharmacy-btn')?.addEventListener('click', hideAddPharmacyModal);
    document.getElementById('pharmacy-form')?.addEventListener('submit', savePharmacy);

    document.getElementById('close-assign-pharmacy-admin-modal')?.addEventListener('click', hideAssignPharmacyAdminModal);
    document.getElementById('cancel-assign-pharmacy-admin-btn')?.addEventListener('click', hideAssignPharmacyAdminModal);
    document.getElementById('assign-pharmacy-admin-form')?.addEventListener('submit', savePharmacyAdmin);

    // Live search for pharmacy admin user with debouncing
    let pharmacyAdminSearchDebounceTimer: number | undefined;
    const pharmacyUserSearchInput = document.getElementById('pharmacy-user-email-search') as HTMLInputElement;
    pharmacyUserSearchInput?.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.trim();
      
      // Clear previous timer
      if (pharmacyAdminSearchDebounceTimer) {
        clearTimeout(pharmacyAdminSearchDebounceTimer);
      }
      
      // Debounce search - wait 300ms after user stops typing
      pharmacyAdminSearchDebounceTimer = window.setTimeout(() => {
        liveSearchPharmacyAdminUsers(query);
      }, 300);
    });

    // Click outside pharmacy admin search dropdown to close
    document.addEventListener('click', (e: Event) => {
      const dropdown = document.getElementById('pharmacy-search-results-dropdown');
      const searchInput = document.getElementById('pharmacy-user-email-search');
      
      if (dropdown && searchInput && 
          !dropdown.contains(e.target as Node) && 
          e.target !== searchInput) {
        dropdown.classList.add('hidden');
      }
    });

    // Load dashboard on page load
    loadDashboardData();
  </script>

  <style>
    @keyframes progress {
      0% { width: 0%; }
      100% { width: 100%; }
    }

    @keyframes shimmer {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
      20%, 40%, 60%, 80% { transform: translateX(5px); }
    }

    .animate-shimmer {
      animation: shimmer 2s ease-in-out infinite;
    }

    .animate-shake {
      animation: shake 0.5s ease-in-out;
    }

    @keyframes slideInRight {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOutRight {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(100%);
        opacity: 0;
      }
    }

    @keyframes scaleIn {
      from {
        transform: scale(0.95);
        opacity: 0;
      }
      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    .animate-progress {
      animation: progress 1.5s ease-in-out infinite;
    }

    #dashboard-content {
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
    }

    #loading-screen {
      transition: opacity 0.3s ease-in-out;
    }

    #stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    }

    @media (min-width: 1024px) {
      #stats-grid {
        grid-template-columns: repeat(4, 1fr);
      }
    }

    /* Toast container animations */
    #toast-container > div {
      animation: slideInRight 0.3s ease-out forwards;
    }

    /* Modal backdrop blur */
    #confirm-modal {
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
    }

    /* Smooth modal content animations */
    #confirm-modal-content {
      transition: transform 0.2s ease-out, opacity 0.2s ease-out;
    }

    /* Edit modal animations */
    #hospital-modal-content,
    #user-modal-content {
      transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1), 
                  opacity 0.2s ease-out;
    }

    #hospital-modal,
    #user-modal {
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
    }

    /* Button pop-in animations */
    .edit-user-btn,
    .demote-user-btn,
    .delete-user-btn,
    .edit-hospital-btn,
    .delete-hospital-btn {
      animation: scaleIn 0.3s ease-out backwards;
      transition: all 0.2s ease;
    }

    .edit-user-btn:hover,
    .edit-hospital-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .demote-user-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(251, 146, 60, 0.3);
    }

    .delete-user-btn:hover,
    .delete-hospital-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    /* Stagger animation delays for buttons in each row */
    .edit-user-btn {
      animation-delay: 0.05s;
    }

    .demote-user-btn {
      animation-delay: 0.1s;
    }

    .delete-user-btn,
    .delete-hospital-btn {
      animation-delay: 0.15s;
    }

    /* Hospital expansion styles */
    .expand-icon {
      transition: transform 0.3s ease;
      display: inline-block;
    }

    /* Smooth transition for hospital item background */
    .hospital-header {
      transition: background-color 0.2s ease !important;
    }

    .hospital-loading,
    .hospital-content {
      transition: opacity 0.2s ease-in-out;
    }

    /* Ensure overflow is properly handled */
    .hospital-item {
      overflow: hidden !important;
    }
  </style>
</MainLayout>
