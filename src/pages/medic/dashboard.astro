---
import MainLayout from '../../layouts/main.astro';
import Navbar from '../../components/Navbar.astro';
import StatsCard from '../../components/dashboard/StatsCard.astro';
import PatientDetailsModal from '../../components/medic/PatientDetailsModal.astro';
import MedicalRecordForm from '../../components/medic/MedicalRecordForm.astro';
import PrescriptionForm from '../../components/medic/PrescriptionForm.astro';
import WelcomeSection from '../../components/medic/WelcomeSection.astro';
import StatsGrid from '../../components/medic/StatsGrid.astro';
import SchedulePanel from '../../components/medic/SchedulePanel.astro';
import UrgentPanel from '../../components/medic/UrgentPanel.astro';
import AppointmentRequestsSection from '../../components/medic/AppointmentRequestsSection.astro';
import PatientSearchSection from '../../components/medic/PatientSearchSection.astro';

// Pass placeholder user for navbar (will be updated client-side)
const placeholderUser = { email: 'loading@example.com' };
---

<MainLayout content={{ title: 'Medic Dashboard - MediConnect' }}>
  <!-- Font Awesome for icons - Must load before content renders -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous"
    referrerPolicy="no-referrer"
  />
  
  <Navbar user={placeholderUser} />
  
  <div class="min-h-screen bg-gradient-to-br from-green-50 via-background to-teal-50">
    <!-- Loading State -->
    <div id="loading-screen" class="flex items-center justify-center min-h-screen">
      <div class="relative">
        <div class="flex flex-col items-center space-y-6">
          <div class="relative">
            <div class="absolute inset-0 w-24 h-24 rounded-full bg-green-500/20 animate-ping"></div>
            <div class="absolute inset-2 w-20 h-20 rounded-full bg-green-500/30 animate-pulse"></div>
            <div class="relative w-24 h-24 bg-gradient-to-br from-green-600 to-teal-600 rounded-full flex items-center justify-center shadow-2xl">
              <i class="fas fa-stethoscope text-white text-4xl animate-pulse"></i>
            </div>
          </div>
          <div class="text-center">
            <h2 class="text-2xl font-bold text-foreground mb-2">MediConnect</h2>
            <p class="text-muted-foreground text-sm mb-4">Loading your dashboard...</p>
            <div class="w-48 h-1.5 bg-gray-200 rounded-full overflow-hidden">
              <div class="h-full bg-gradient-to-r from-green-600 to-teal-600 rounded-full animate-progress"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Toast Notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-[110] space-y-3 pointer-events-none">
      <!-- Toasts will be dynamically inserted here -->
    </div>

    <!-- Custom Confirmation Modal -->
    <div id="confirm-modal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-[100] flex items-center justify-center p-4" style="display: none;">
      <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full transform transition-all scale-95 opacity-0" id="confirm-modal-content">
        <div class="p-4">
          <div class="flex items-start gap-4">
            <div id="confirm-icon" class="flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center">
              <i class="fas fa-question-circle text-2xl"></i>
            </div>
            <div class="flex-1 min-w-0">
              <h3 id="confirm-title" class="text-lg font-bold text-gray-900 mb-1"></h3>
              <p id="confirm-message" class="text-gray-600 text-sm leading-snug whitespace-pre-line"></p>
            </div>
          </div>
        </div>
        <div class="px-4 pb-4 flex gap-3 sticky bottom-0 bg-white">
          <button 
            id="confirm-cancel-btn"
            class="flex-1 px-4 py-2.5 rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 font-medium text-gray-700 transition-all"
          >
            Cancel
          </button>
          <button 
            id="confirm-ok-btn"
            class="flex-1 px-4 py-2.5 rounded-lg font-medium text-white transition-all shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            Confirm
          </button>
        </div>
      </div>
    </div>

    <!-- Dashboard Content -->
    <main id="dashboard-content" class="hidden container mx-auto px-4 py-8">
      <WelcomeSection />

      <StatsGrid />

      <div class="mb-8 grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div class="lg:col-span-2">
          <SchedulePanel />
        </div>
        <div>
          <UrgentPanel />
        </div>
      </div>

      <div class="mb-8">
        <AppointmentRequestsSection />
      </div>

      <div class="mb-8">
        <PatientSearchSection />
      </div>
    </main>
  </div>

  <!-- Patient Details Modal -->
  <PatientDetailsModal />

  <!-- Medical Record Form -->
  <MedicalRecordForm />

  <!-- Prescription Form -->
  <PrescriptionForm />

  <!-- Appointment Details Modal -->
  <div id="appointment-modal" class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="appointment-modal-content" class="bg-card rounded-xl shadow-2xl max-w-2xl w-full border border-border transform transition-all scale-95 opacity-0 max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-border bg-gradient-to-r from-green-50 to-teal-50 sticky top-0 z-10">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground">Appointment Details</h3>
          <button id="close-appointment-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      <div id="appointment-details-content" class="p-6">
        <!-- Appointment details will be rendered here -->
      </div>
    </div>
  </div>

  <!-- Schedule Appointment Modal -->
  <div id="schedule-modal" class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="schedule-modal-content" class="bg-card rounded-xl shadow-2xl max-w-lg w-full border border-border transform transition-all scale-95 opacity-0">
      <div class="p-6 border-b border-border bg-gradient-to-r from-green-50 to-teal-50">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground">Schedule Appointment</h3>
          <button id="close-schedule-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      <form id="schedule-appointment-form" class="p-6 space-y-4">
        <input type="hidden" id="schedule-request-id" />
        
        <div id="schedule-patient-info" class="p-4 bg-blue-50 rounded-lg mb-4">
          <!-- Patient info will be shown here -->
        </div>

        <div>
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-calendar mr-2 text-green-600"></i>
            Appointment Date & Time *
          </label>
          <input 
            type="datetime-local" 
            id="appointment-datetime"
            required
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-notes-medical mr-2 text-blue-600"></i>
            Notes (Optional)
          </label>
          <textarea 
            id="appointment-notes"
            rows="3"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 resize-none"
            placeholder="Add any notes for this appointment..."
          ></textarea>
        </div>

        <div class="flex gap-3 pt-4">
          <button 
            type="button"
            id="cancel-schedule-btn"
            class="flex-1 px-4 py-2.5 border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 rounded-lg font-medium text-gray-700 transition-all"
          >
            Cancel
          </button>
          <button 
            type="submit"
            class="flex-1 px-4 py-2.5 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white rounded-lg transition-all shadow-lg hover:shadow-xl font-medium"
          >
            <i class="fas fa-check mr-2"></i>
            Confirm & Schedule
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Custom Prompt Modal -->
  <div id="prompt-modal" class="hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-[90] p-4" style="display: none; align-items: center; justify-content: center;">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full transform transition-all scale-95 opacity-0" id="prompt-modal-content">
      <div class="p-6 border-b border-gray-200">
        <h3 id="prompt-title" class="text-xl font-bold text-gray-900">Input Required</h3>
      </div>
      <div class="p-6">
        <label id="prompt-label" class="block text-sm font-medium text-gray-700 mb-2"></label>
        <textarea 
          id="prompt-input"
          rows="3"
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 resize-none"
          placeholder="Enter your response..."
        ></textarea>
      </div>
      <div class="px-6 pb-6 flex gap-3">
        <button 
          id="prompt-cancel-btn"
          class="flex-1 px-4 py-2.5 rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 font-medium text-gray-700 transition-all"
        >
          Cancel
        </button>
        <button 
          id="prompt-ok-btn"
          class="flex-1 px-4 py-2.5 rounded-lg bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 font-medium text-white transition-all shadow-lg hover:shadow-xl"
        >
          Submit
        </button>
      </div>
    </div>
  </div>

  <script>
    import { supabase } from '../../lib/supabase';

    let medicData: any = null;
    let hospitalData: any = null;
    let appointmentsData: any[] = [];
    let patientsData: any[] = [];
    let appointmentRequests: any[] = [];
    let currentFilter: string = 'all';
    let currentUser: any = null;

    // Custom Toast Notification System
    type ToastType = 'success' | 'error' | 'warning' | 'info';
    
    function showToast(message: string, type: ToastType = 'info', duration: number = 4000) {
      const container = document.getElementById('toast-container');
      if (!container) return;

      const toast = document.createElement('div');
      toast.className = 'pointer-events-auto transform translate-x-full transition-all duration-300 ease-out';
      
      const icons = {
        success: { icon: 'fa-check-circle', bgColor: 'bg-green-500', textColor: 'text-green-50' },
        error: { icon: 'fa-times-circle', bgColor: 'bg-red-500', textColor: 'text-red-50' },
        warning: { icon: 'fa-exclamation-triangle', bgColor: 'bg-orange-500', textColor: 'text-orange-50' },
        info: { icon: 'fa-info-circle', bgColor: 'bg-blue-500', textColor: 'text-blue-50' }
      };

      const config = icons[type];
      
      toast.innerHTML = `
        <div class="flex items-start gap-3 ${config.bgColor} ${config.textColor} px-5 py-4 rounded-xl shadow-2xl min-w-[300px] max-w-md backdrop-blur-sm border border-white/20">
          <i class="fas ${config.icon} text-xl mt-0.5 flex-shrink-0"></i>
          <p class="flex-1 font-medium leading-relaxed">${message}</p>
          <button onclick="this.closest('[class*=translate]').remove()" class="ml-2 hover:opacity-80 transition-opacity flex-shrink-0">
            <i class="fas fa-times text-sm"></i>
          </button>
        </div>
      `;
      
      container.appendChild(toast);
      
      setTimeout(() => {
        toast.classList.remove('translate-x-full');
        toast.classList.add('translate-x-0');
      }, 10);
      
      setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => toast.remove(), 300);
      }, duration);
    }

    // Custom Confirmation Dialog
    function showConfirm(
      title: string, 
      message: string, 
      options: {
        type?: 'danger' | 'warning' | 'info',
        confirmText?: string,
        cancelText?: string
      } = {}
    ): Promise<boolean> {
      return new Promise((resolve) => {
        const modal = document.getElementById('confirm-modal');
        const modalContent = document.getElementById('confirm-modal-content');
        const iconEl = document.getElementById('confirm-icon');
        const titleEl = document.getElementById('confirm-title');
        const messageEl = document.getElementById('confirm-message');
        const confirmBtn = document.getElementById('confirm-ok-btn');
        const cancelBtn = document.getElementById('confirm-cancel-btn');
        
        if (!modal || !modalContent || !iconEl || !titleEl || !messageEl || !confirmBtn || !cancelBtn) {
          resolve(false);
          return;
        }

        const type = options.type || 'warning';
        const configs = {
          danger: { 
            icon: 'fa-exclamation-triangle', 
            iconBg: 'bg-red-100 text-red-600',
            btnBg: 'bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800'
          },
          warning: { 
            icon: 'fa-exclamation-circle', 
            iconBg: 'bg-orange-100 text-orange-600',
            btnBg: 'bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800'
          },
          info: { 
            icon: 'fa-info-circle', 
            iconBg: 'bg-blue-100 text-blue-600',
            btnBg: 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800'
          }
        };

        const config = configs[type];
        
        // Hide icon for info type (used for reference details)
        if (type === 'info') {
          iconEl.style.display = 'none';
          modalContent.classList.remove('max-w-md');
          modalContent.classList.add('max-w-2xl');
        } else {
          iconEl.style.display = '';
          modalContent.classList.remove('max-w-2xl');
          modalContent.classList.add('max-w-md');
        }
        
        iconEl.className = `flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${config.iconBg}`;
        iconEl.querySelector('i')!.className = `fas ${config.icon} text-2xl`;
        titleEl.textContent = title;
        messageEl.innerHTML = message; // Use innerHTML to support HTML content
        confirmBtn.textContent = options.confirmText || 'Confirm';
        confirmBtn.className = `flex-1 px-4 py-2.5 rounded-lg font-medium text-white transition-all shadow-lg hover:shadow-xl transform hover:scale-105 ${config.btnBg}`;
        
        // Handle cancel button visibility
        if (options.cancelText === '') {
          cancelBtn.style.display = 'none';
        } else {
          cancelBtn.style.display = '';
          cancelBtn.textContent = options.cancelText || 'Cancel';
        }
        
        modal.style.display = 'flex';
        modal.classList.remove('hidden');
        
        setTimeout(() => {
          modalContent.classList.remove('scale-95', 'opacity-0');
          modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);
        
        const closeModal = (result: boolean) => {
          modalContent.classList.add('scale-95', 'opacity-0');
          modalContent.classList.remove('scale-100', 'opacity-100');
          
          setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.add('hidden');
            resolve(result);
          }, 200);
        };
        
        const handleConfirm = () => {
          confirmBtn.removeEventListener('click', handleConfirm);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(true);
        };
        
        const handleCancel = () => {
          confirmBtn.removeEventListener('click', handleConfirm);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(false);
        };
        
        confirmBtn.addEventListener('click', handleConfirm);
        cancelBtn.addEventListener('click', handleCancel);
      });
    }

    // Custom Prompt Dialog
    function showPrompt(
      title: string,
      label: string,
      placeholder: string = ''
    ): Promise<string | null> {
      return new Promise((resolve) => {
        const modal = document.getElementById('prompt-modal');
        const modalContent = document.getElementById('prompt-modal-content');
        const titleEl = document.getElementById('prompt-title');
        const labelEl = document.getElementById('prompt-label');
        const inputEl = document.getElementById('prompt-input') as HTMLTextAreaElement;
        const okBtn = document.getElementById('prompt-ok-btn');
        const cancelBtn = document.getElementById('prompt-cancel-btn');
        
        if (!modal || !modalContent || !titleEl || !labelEl || !inputEl || !okBtn || !cancelBtn) {
          resolve(null);
          return;
        }

        titleEl.textContent = title;
        labelEl.textContent = label;
        inputEl.value = '';
        inputEl.placeholder = placeholder;
        
        modal.style.display = 'flex';
        modal.classList.remove('hidden');
        
        setTimeout(() => {
          modalContent.classList.remove('scale-95', 'opacity-0');
          modalContent.classList.add('scale-100', 'opacity-100');
          inputEl.focus();
        }, 10);
        
        const closeModal = (result: string | null) => {
          modalContent.classList.add('scale-95', 'opacity-0');
          modalContent.classList.remove('scale-100', 'opacity-100');
          
          setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.add('hidden');
            resolve(result);
          }, 200);
        };
        
        const handleOk = () => {
          okBtn.removeEventListener('click', handleOk);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(inputEl.value || null);
        };
        
        const handleCancel = () => {
          okBtn.removeEventListener('click', handleOk);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(null);
        };
        
        okBtn.addEventListener('click', handleOk);
        cancelBtn.addEventListener('click', handleCancel);
        
        // Allow Enter to submit (with Shift+Enter for new line)
        inputEl.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleOk();
          }
        });
      });
    }

    // Update navbar with user data
    function updateNavbar(user: any, profile: any) {
      const avatarElements = document.querySelectorAll('[class*="rounded-full"][class*="bg-gradient"]');
      const initial = profile?.full_name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase() || 'M';
      avatarElements.forEach(el => {
        if (el.textContent && el.textContent.trim().length <= 1) {
          el.textContent = initial;
        }
      });

      const dropdownContainer = document.getElementById('user-dropdown');
      if (dropdownContainer) {
        const paragraphs = dropdownContainer.querySelectorAll('p');
        if (paragraphs[0]) paragraphs[0].textContent = profile?.full_name || user.user_metadata?.full_name || 'Medic';
        if (paragraphs[1]) paragraphs[1].textContent = user.email || '';
      }
    }

    async function loadDashboardData() {
      try {
        // Check authentication
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError || !user) {
          console.error('Not authenticated:', authError);
          window.location.href = '/auth';
          return;
        }

        // Store current user globally
        currentUser = user;

        // Get user profile and verify they're a medic
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*, hospitals(*)')
          .eq('id', user.id)
          .single();

        if (profileError || !profile) {
          console.error('Error fetching profile:', profileError);
          showToast('Unable to load profile', 'error');
          window.location.href = '/auth';
          return;
        }

        // Verify user is hospital medic
        if (profile.role !== 'hospital_medic') {
          showToast('Access denied. This page is for medical staff only.', 'error');
          window.location.href = '/dashboard';
          return;
        }

        console.log('Profile hospital_id:', profile.hospital_id);
        console.log('Profile hospitals:', profile.hospitals);

        // Check if user has a hospital_id
        if (!profile.hospital_id) {
          showToast('No hospital assigned to your account. Please contact your administrator.', 'error');
          return;
        }

        // Check if the hospital still exists
        if (!profile.hospitals) {
          console.log('Hospital does not exist in database, converting to patient...');
          showToast('Your assigned hospital no longer exists. Converting your account to patient role...', 'warning');
          
          // Convert to patient account
          const { error: updateError } = await supabase
            .from('profiles')
            .update({ 
              role: 'patient', 
              hospital_id: null,
              department: null 
            })
            .eq('id', user.id);

          if (updateError) {
            console.error('Error converting account:', updateError);
            showToast('Failed to convert account. Please contact support.', 'error');
            return;
          }

          showToast('Account converted to patient. Redirecting...', 'success');
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 2000);
          return;
        }

        medicData = profile;
        hospitalData = profile.hospitals;
        
        console.log('Medic data loaded:', { 
          id: medicData.id, 
          email: medicData.email, 
          name: medicData.full_name,
          role: medicData.role,
          hospital_id: medicData.hospital_id 
        });

        // Update UI with medic and hospital info
        const medicNameEl = document.getElementById('medic-name');
        const hospitalNameEl = document.getElementById('hospital-name');
        
        if (medicNameEl) medicNameEl.textContent = profile.full_name || 'Medic';
        if (hospitalNameEl) hospitalNameEl.textContent = hospitalData?.name || 'Hospital';

        // Update today's date
        const todayDateEl = document.getElementById('today-date');
        if (todayDateEl) {
          const today = new Date();
          todayDateEl.textContent = today.toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          });
        }

        updateNavbar(user, profile);

        // Load all data
        await loadAppointments();
        await loadAppointmentRequests();

        updateStats();

        // Hide loading, show content
        const loadingScreen = document.getElementById('loading-screen');
        const content = document.getElementById('dashboard-content');
        
        if (loadingScreen && content) {
          loadingScreen.classList.add('hidden');
          content.classList.remove('hidden');
          setTimeout(() => content.style.opacity = '1', 100);
        }

      } catch (error) {
        console.error('Error loading dashboard:', error);
        showToast('Failed to load dashboard. Please try again.', 'error');
      }
    }

    async function loadAppointments() {
      if (!medicData?.id) {
        console.error('No medic data available, medicData:', medicData);
        return;
      }

      console.log('Loading appointments for medic ID:', medicData.id);

      // Note: appointments table doesn't exist yet, handle gracefully
      try {
        // First, try a simple query without joins
        const { data: testData, error: testError } = await supabase
          .from('appointments')
          .select('*')
          .eq('medic_id', medicData.id);
        
        console.log('Simple query test:', { 
          success: !testError, 
          count: testData?.length || 0,
          error: testError 
        });

        const { data, error } = await supabase
          .from('appointments')
          .select('*, patients:profiles!patient_id(*)')
          .eq('medic_id', medicData.id)
          .order('appointment_date', { ascending: true });

        if (error) {
          console.error('Error loading appointments:', error);
          console.error('Error code:', error.code);
          console.error('Error message:', error.message);
          console.error('Error details:', error.details);
          console.error('Error hint:', error.hint);
          
          if (error.code === 'PGRST116') {
            console.log('Appointments table does not exist yet');
            appointmentsData = [];
            renderTodaySchedule();
            renderUpcomingAppointments();
            extractPatients();
            return;
          }
          throw error;
        }

        console.log('Appointments loaded successfully:', data?.length || 0, 'appointments found');

        appointmentsData = data || [];
        console.log('Rendering appointments...', { count: appointmentsData.length, data: appointmentsData });
        
        renderTodaySchedule();
        renderUpcomingAppointments();
        renderUrgentAppointments();
        extractPatients();
      } catch (error) {
        console.error('Error loading appointments:', error);
        appointmentsData = [];
        renderTodaySchedule();
        renderUpcomingAppointments();
        renderUrgentAppointments();
        extractPatients();
      }
    }

    function extractPatients() {
      // Get unique patients from appointments
      const patientMap = new Map();
      appointmentsData.forEach(apt => {
        if (apt.patients && !patientMap.has(apt.patients.id)) {
          patientMap.set(apt.patients.id, {
            ...apt.patients,
            appointmentCount: 1,
            lastVisit: apt.appointment_date
          });
        } else if (apt.patients) {
          const existing = patientMap.get(apt.patients.id);
          existing.appointmentCount++;
          if (new Date(apt.appointment_date) > new Date(existing.lastVisit)) {
            existing.lastVisit = apt.appointment_date;
          }
        }
      });

      patientsData = Array.from(patientMap.values());
      renderPatients();
    }

    function updateStats() {
      const statsGrid = document.getElementById('stats-grid');
      if (!statsGrid) return;

      const statCards = statsGrid.querySelectorAll('.stats-card');
      const today = new Date().toISOString().split('T')[0];
      const startOfWeek = new Date();
      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
      const weekStart = startOfWeek.toISOString().split('T')[0];
      
      // Today's Appointments
      if (statCards[0]) {
        const valueEl = statCards[0].querySelector('.text-3xl');
        const todayAppts = appointmentsData.filter(a => 
          a.appointment_date?.startsWith(today)
        ).length;
        if (valueEl) valueEl.textContent = todayAppts.toString();
      }
      
      // Total Patients
      if (statCards[1]) {
        const valueEl = statCards[1].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = patientsData.length.toString();
      }
      
      // This Week
      if (statCards[2]) {
        const valueEl = statCards[2].querySelector('.text-3xl');
        const weekAppts = appointmentsData.filter(a => 
          a.appointment_date && a.appointment_date >= weekStart
        ).length;
        if (valueEl) valueEl.textContent = weekAppts.toString();
      }
      
      // Total Appointments
      if (statCards[3]) {
        const valueEl = statCards[3].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = appointmentsData.length.toString();
      }
    }

    function renderTodaySchedule() {
      const container = document.getElementById('today-schedule');
      if (!container) {
        console.error('today-schedule container not found!');
        return;
      }

      const today = new Date().toISOString().split('T')[0];
      let todayAppts = appointmentsData.filter(a => 
        a.appointment_date?.startsWith(today)
      );
      
      console.log('renderTodaySchedule:', { 
        today, 
        totalAppointments: appointmentsData.length,
        todayCount: todayAppts.length,
        currentFilter,
        appointments: appointmentsData 
      });

      // Apply filter
      if (currentFilter !== 'all') {
        todayAppts = todayAppts.filter(a => a.status === currentFilter);
      }

      if (todayAppts.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-calendar-check text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No appointments ${currentFilter !== 'all' ? 'with this status' : 'scheduled'} for today</p>
            <p class="text-sm">Enjoy your day!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = `
        <div class="space-y-3">
          ${todayAppts.map(apt => renderAppointmentCard(apt, true)).join('')}
        </div>
      `;

      // Attach click listeners
      document.querySelectorAll('.appointment-card').forEach(card => {
        card.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.appointmentId;
          const apt = appointmentsData.find(a => a.id === id);
          if (apt) showAppointmentDetails(apt);
        });
      });
    }

    function renderAppointmentCard(apt: any, showTime: boolean = false) {
      const severityColors = {
        urgent: 'bg-red-100 text-red-700 border-red-200',
        high: 'bg-orange-100 text-orange-700 border-orange-200',
        normal: 'bg-blue-100 text-blue-700 border-blue-200',
        low: 'bg-gray-100 text-gray-700 border-gray-200'
      };
      
      const severity = apt.severity || 'normal';
      const severityColor = severityColors[severity as keyof typeof severityColors] || severityColors.normal;

      return `
        <div class="appointment-card flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 p-4 rounded-lg border border-border hover:bg-accent/50 transition-all cursor-pointer"
             data-appointment-id="${apt.id}">
          <div class="flex items-center gap-4 flex-1 min-w-0">
            <div class="w-12 h-12 rounded-full bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center text-white font-semibold text-lg flex-shrink-0">
              ${apt.patients?.full_name?.charAt(0).toUpperCase() || 'P'}
            </div>
            <div class="flex-1 min-w-0">
              <p class="font-semibold text-foreground truncate">${apt.patients?.full_name || 'Patient'}</p>
              <p class="text-sm text-muted-foreground truncate">${apt.patients?.email || ''}</p>
              <p class="text-xs text-muted-foreground mt-1 whitespace-nowrap overflow-hidden text-ellipsis">
                <i class="fas fa-clock mr-1"></i>
                ${showTime 
                  ? new Date(apt.appointment_date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })
                  : new Date(apt.appointment_date).toLocaleString('en-US', { month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' })
                }
                ${apt.reason ? `<span class="mx-2">•</span><i class="fas fa-notes-medical mr-1"></i>${apt.reason}` : ''}
              </p>
            </div>
          </div>
          <div class="flex items-center gap-3 sm:self-auto self-end sm:justify-end sm:w-auto w-full">
            ${severity !== 'normal' ? `
              <span class="px-2 py-1 rounded-full text-xs font-medium border ${severityColor} whitespace-nowrap">
                <i class="fas ${severity === 'urgent' ? 'fa-exclamation-circle' : severity === 'high' ? 'fa-exclamation-triangle' : 'fa-info-circle'} mr-1"></i>
                ${severity}
              </span>
            ` : ''}
            <span class="px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap ${
              apt.status === 'completed' ? 'bg-green-100 text-green-700' :
              apt.status === 'cancelled' ? 'bg-red-100 text-red-700' :
              'bg-blue-100 text-blue-700'
            }">
              ${apt.status || 'scheduled'}
            </span>
            <i class="fas fa-chevron-right text-gray-400 flex-shrink-0"></i>
          </div>
        </div>
      `;
    }

    function renderUpcomingAppointments() {
      const container = document.getElementById('upcoming-appointments');
      if (!container) return;

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      let upcoming = appointmentsData
        .filter(a => new Date(a.appointment_date) > today && a.status !== 'cancelled');
      
      // Apply filter
      if (currentFilter !== 'all') {
        upcoming = upcoming.filter(a => a.status === currentFilter);
      }

      upcoming = upcoming.slice(0, 10);

      if (upcoming.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-calendar-times text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No upcoming appointments</p>
            <p class="text-sm">Your schedule is clear</p>
          </div>
        `;
        return;
      }

      container.innerHTML = `
        <div class="space-y-3">
          ${upcoming.map(apt => renderAppointmentCard(apt, false)).join('')}
        </div>
      `;

      // Attach click listeners
      document.querySelectorAll('#upcoming-appointments .appointment-card').forEach(card => {
        card.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.appointmentId;
          const apt = appointmentsData.find(a => a.id === id);
          if (apt) showAppointmentDetails(apt);
        });
      });
    }

    function renderUrgentAppointments() {
      const container = document.getElementById('urgent-appointments');
      if (!container) return;

      const urgent = appointmentsData
        .filter(a => (a.severity === 'urgent' || a.severity === 'high') && a.status !== 'cancelled' && a.status !== 'completed')
        .sort((a, b) => {
          // Sort by severity first (urgent > high), then by date
          if (a.severity === 'urgent' && b.severity !== 'urgent') return -1;
          if (b.severity === 'urgent' && a.severity !== 'urgent') return 1;
          return new Date(a.appointment_date).getTime() - new Date(b.appointment_date).getTime();
        })
        .slice(0, 8); // Limit to 8 items for the sidebar

      if (urgent.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8 text-muted-foreground">
            <i class="fas fa-check-circle text-4xl mb-3 opacity-50"></i>
            <p class="text-sm font-medium mb-1">No urgent cases</p>
            <p class="text-xs">All clear!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = `
        <div class="space-y-2">
          ${urgent.map(apt => `
            <div class="appointment-card p-3 rounded-lg border-2 ${
              apt.severity === 'urgent' ? 'border-red-300 bg-red-50/50 hover:bg-red-50' : 'border-orange-300 bg-orange-50/50 hover:bg-orange-50'
            } transition-all cursor-pointer"
                 data-appointment-id="${apt.id}">
              <div class="flex items-start gap-3">
                <div class="w-10 h-10 rounded-full ${
                  apt.severity === 'urgent' ? 'bg-gradient-to-br from-red-600 to-red-700' : 'bg-gradient-to-br from-orange-600 to-orange-700'
                } flex items-center justify-center text-white font-semibold flex-shrink-0">
                  ${apt.patients?.full_name?.charAt(0).toUpperCase() || 'P'}
                </div>
                <div class="flex-1 min-w-0">
                  <div class="flex items-center gap-2 mb-1">
                    <p class="font-semibold text-foreground text-sm truncate">${apt.patients?.full_name || 'Patient'}</p>
                    <span class="px-2 py-0.5 rounded-full text-xs font-bold ${
                      apt.severity === 'urgent' ? 'bg-red-200 text-red-800' : 'bg-orange-200 text-orange-800'
                    }">
                      <i class="fas ${apt.severity === 'urgent' ? 'fa-exclamation-circle' : 'fa-exclamation-triangle'}"></i>
                    </span>
                  </div>
                  <p class="text-xs text-muted-foreground">
                    <i class="fas fa-clock mr-1"></i>
                    ${new Date(apt.appointment_date).toLocaleString('en-US', { 
                      month: 'short', 
                      day: 'numeric',
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                  ${apt.reason ? `<p class="text-xs text-muted-foreground mt-1 truncate"><i class="fas fa-notes-medical mr-1"></i>${apt.reason}</p>` : ''}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;

      // Attach click listeners
      document.querySelectorAll('#urgent-appointments .appointment-card').forEach(card => {
        card.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLElement).dataset.appointmentId;
          const apt = appointmentsData.find(a => a.id === id);
          if (apt) showAppointmentDetails(apt);
        });
      });
    }

    async function renderPatients(searchQuery: string = '') {
      const container = document.getElementById('patients-list');
      if (!container) return;

      // Show loading state
      container.innerHTML = `
        <div class="text-center py-12">
          <i class="fas fa-spinner fa-spin text-4xl text-primary mb-4"></i>
          <p class="text-muted-foreground">Loading patients...</p>
        </div>
      `;

      try {
        let filteredPatients: any[] = [];
        
        if (searchQuery) {
          const query = searchQuery.toLowerCase().trim();
          
          // Check if it's a barcode search (starts with MC)
          if (query.startsWith('mc')) {
            // Search by barcode_id
            const { data: patient, error } = await supabase
              .from('profiles')
              .select('*')
              .eq('barcode_id', query.toUpperCase())
              .eq('role', 'patient')
              .single();

            if (error || !patient) {
              container.innerHTML = `
                <div class="text-center py-12">
                  <i class="fas fa-barcode text-5xl mb-4 opacity-50 text-orange-500"></i>
                  <p class="text-lg font-medium mb-2 text-foreground">Barcode Not Found</p>
                  <p class="text-sm text-muted-foreground">The MediConnect Card barcode could not be found. Please verify the code.</p>
                </div>
              `;
              return;
            }

            // Get appointment count separately
            const { count: apptCount } = await supabase
              .from('appointments')
              .select('*', { count: 'exact', head: true })
              .eq('patient_id', patient.id)
              .eq('medic_id', currentUser.id);

            // Get last visit
            const { data: lastAppt } = await supabase
              .from('appointments')
              .select('appointment_date')
              .eq('patient_id', patient.id)
              .eq('medic_id', currentUser.id)
              .order('appointment_date', { ascending: false })
              .limit(1)
              .single();

            patient.appointmentCount = apptCount || 0;
            patient.lastVisit = lastAppt?.appointment_date;

            filteredPatients = [patient];
            
            // Show success message
            const successBanner = `
              <div class="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg flex items-center gap-2 text-green-700">
                <i class="fas fa-check-circle"></i>
                <span class="text-sm font-medium">Patient found via MediConnect Card barcode!</span>
              </div>
            `;
            
            container.innerHTML = successBanner + `
              <div class="patient-card p-4 rounded-lg border-2 border-green-200 bg-green-50/30 hover:bg-green-50/50 transition-all cursor-pointer" data-patient-id="${patient.id}" onclick="showPatientDetails('${patient.id}')">
                <div class="flex items-start gap-3">
                  <div class="w-12 h-12 rounded-full bg-gradient-to-br from-green-500 to-emerald-600 flex items-center justify-center text-white font-semibold text-lg flex-shrink-0 ring-2 ring-green-300">
                    ${patient.full_name?.charAt(0).toUpperCase() || 'P'}
                  </div>
                  <div class="flex-1 min-w-0">
                    <div class="flex items-center gap-2 mb-1">
                      <p class="font-semibold text-foreground truncate">${patient.full_name || 'Unknown'}</p>
                      <i class="fas fa-barcode text-green-600" title="Found via barcode"></i>
                    </div>
                    <p class="text-sm text-muted-foreground truncate">${patient.email}</p>
                    ${patient.cnp ? `<p class="text-xs text-muted-foreground mt-1">CNP: ${patient.cnp}</p>` : ''}
                    <div class="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
                      <span>
                        <i class="fas fa-calendar-check mr-1"></i>
                        ${patient.appointmentCount} ${patient.appointmentCount === 1 ? 'visit' : 'visits'}
                      </span>
                      ${patient.lastVisit ? `
                        <span>
                          <i class="fas fa-clock mr-1"></i>
                          Last: ${new Date(patient.lastVisit).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                        </span>
                      ` : ''}
                    </div>
                  </div>
                </div>
              </div>
            `;
            return;
          } else {
            // Normal name/email search - search in database
            const { data: patients, error } = await supabase
              .from('profiles')
              .select('*')
              .eq('role', 'patient')
              .or(`full_name.ilike.%${query}%,email.ilike.%${query}%`)
              .order('full_name')
              .limit(50);

            if (error) {
              console.error('Error searching patients:', error);
              container.innerHTML = `
                <div class="text-center py-12 text-red-500">
                  <i class="fas fa-exclamation-triangle text-5xl mb-4 opacity-50"></i>
                  <p class="text-lg font-medium mb-2">Error</p>
                  <p class="text-sm text-muted-foreground">Failed to search patients. Please try again.</p>
                </div>
              `;
              return;
            }

            // Get appointment counts for all patients
            if (patients && patients.length > 0) {
              for (const patient of patients) {
                const { count: apptCount } = await supabase
                  .from('appointments')
                  .select('*', { count: 'exact', head: true })
                  .eq('patient_id', patient.id)
                  .eq('medic_id', currentUser.id);

                const { data: lastAppt } = await supabase
                  .from('appointments')
                  .select('appointment_date')
                  .eq('patient_id', patient.id)
                  .eq('medic_id', currentUser.id)
                  .order('appointment_date', { ascending: false })
                  .limit(1)
                  .single();

                patient.appointmentCount = apptCount || 0;
                patient.lastVisit = lastAppt?.appointment_date;
              }
            }

            filteredPatients = patients || [];
          }
        } else {
          // No search query - load all patients from database
          const { data: patients, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('role', 'patient')
            .order('full_name')
            .limit(100);

          if (error) {
            console.error('Error loading patients:', error);
            container.innerHTML = `
              <div class="text-center py-12 text-red-500">
                <i class="fas fa-exclamation-triangle text-5xl mb-4 opacity-50"></i>
                <p class="text-lg font-medium mb-2">Error</p>
                <p class="text-sm text-muted-foreground">Failed to load patients. Please try again.</p>
              </div>
            `;
            return;
          }

          // Get appointment counts for all patients
          if (patients && patients.length > 0) {
            for (const patient of patients) {
              const { count: apptCount } = await supabase
                .from('appointments')
                .select('*', { count: 'exact', head: true })
                .eq('patient_id', patient.id)
                .eq('medic_id', currentUser.id);

              const { data: lastAppt } = await supabase
                .from('appointments')
                .select('appointment_date')
                .eq('patient_id', patient.id)
                .eq('medic_id', currentUser.id)
                .order('appointment_date', { ascending: false })
                .limit(1)
                .single();

              patient.appointmentCount = apptCount || 0;
              patient.lastVisit = lastAppt?.appointment_date;
            }
          }

          filteredPatients = patients || [];
        }

        if (filteredPatients.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12 text-muted-foreground">
              <i class="fas fa-users text-5xl mb-4 opacity-50"></i>
              <p class="text-lg font-medium mb-2">${searchQuery ? 'No patients found' : 'No patients in database'}</p>
              <p class="text-sm">${searchQuery ? 'Try a different search or enter a MediConnect Card barcode (MC...)' : 'All patients in the system will appear here'}</p>
            </div>
          `;
          return;
        }

        container.innerHTML = `
          <div class="grid md:grid-cols-2 gap-4">
            ${filteredPatients.map(patient => `
              <div class="patient-card p-4 rounded-lg border border-border hover:bg-accent/50 transition-all cursor-pointer" data-patient-id="${patient.id}" onclick="showPatientDetails('${patient.id}')">
                <div class="flex items-start gap-3">
                  <div class="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-semibold text-lg flex-shrink-0">
                    ${patient.full_name?.charAt(0).toUpperCase() || 'P'}
                  </div>
                  <div class="flex-1 min-w-0">
                    <p class="font-semibold text-foreground truncate">${patient.full_name || 'Unknown'}</p>
                    <p class="text-sm text-muted-foreground truncate">${patient.email}</p>
                    ${patient.cnp ? `<p class="text-xs text-muted-foreground mt-1">CNP: ${patient.cnp}</p>` : ''}
                    <div class="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
                      <span>
                        <i class="fas fa-calendar-check mr-1"></i>
                        ${patient.appointmentCount || 0} ${patient.appointmentCount === 1 ? 'visit' : 'visits'}
                      </span>
                      ${patient.lastVisit ? `
                        <span>
                          <i class="fas fa-clock mr-1"></i>
                          Last: ${new Date(patient.lastVisit).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                        </span>
                      ` : ''}
                    </div>
                  </div>
                </div>
              </div>
            `).join('')}
          </div>
        `;
      } catch (error) {
        console.error('Error rendering patients:', error);
        container.innerHTML = `
          <div class="text-center py-12 text-red-500">
            <i class="fas fa-exclamation-triangle text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">Error</p>
            <p class="text-sm text-muted-foreground">Failed to load patients. Please try again.</p>
          </div>
        `;
      }
    }

    function showAppointmentDetails(appointment: any) {
      const modal = document.getElementById('appointment-modal');
      const modalContent = document.getElementById('appointment-modal-content');
      const detailsContent = document.getElementById('appointment-details-content');
      
      if (!modal || !modalContent || !detailsContent) return;

      const patient = appointment.patients;
      const aptDate = new Date(appointment.appointment_date);

      detailsContent.innerHTML = `
        <div class="space-y-6">
          <!-- Patient Info -->
          <div>
            <h4 class="text-sm font-semibold text-muted-foreground mb-3 uppercase tracking-wide">Patient Information</h4>
            <div id="appointment-patient-info" role="button" tabindex="0" class="flex items-start gap-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg cursor-pointer hover:brightness-95 focus:outline-none focus:ring-2 focus:ring-blue-400" data-patient-id="${patient?.id || ''}">
              <div class="w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold text-2xl flex-shrink-0">
                ${patient?.full_name?.charAt(0).toUpperCase() || 'P'}
              </div>
              <div class="flex-1">
                <p class="text-lg font-bold text-foreground">${patient?.full_name || 'Unknown Patient'}</p>
                <p class="text-sm text-muted-foreground"><i class="fas fa-envelope mr-2"></i>${patient?.email || 'N/A'}</p>
                ${patient?.cnp ? `<p class="text-sm text-muted-foreground mt-1"><i class="fas fa-id-card mr-2"></i>CNP: ${patient.cnp}</p>` : ''}
              </div>
            </div>
          </div>

          <!-- Appointment Info -->
          <div>
            <h4 class="text-sm font-semibold text-muted-foreground mb-3 uppercase tracking-wide">Appointment Details</h4>
            <div class="space-y-3">
              <div class="flex items-start gap-3 p-3 rounded-lg bg-accent/30">
                <i class="fas fa-calendar text-green-600 mt-1"></i>
                <div>
                  <p class="text-sm font-medium text-foreground">Date & Time</p>
                  <p class="text-sm text-muted-foreground">
                    ${aptDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
                    at ${aptDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                  </p>
                </div>
              </div>
              ${appointment.reason ? `
                <div class="flex items-start gap-3 p-3 rounded-lg bg-accent/30">
                  <i class="fas fa-notes-medical text-blue-600 mt-1"></i>
                  <div>
                    <p class="text-sm font-medium text-foreground">Reason for Visit</p>
                    <p class="text-sm text-muted-foreground">${appointment.reason}</p>
                  </div>
                </div>
              ` : ''}
              <div class="flex items-start gap-3 p-3 rounded-lg bg-accent/30">
                <i class="fas fa-info-circle text-purple-600 mt-1"></i>
                <div>
                  <p class="text-sm font-medium text-foreground">Status</p>
                  <span class="inline-block px-3 py-1 rounded-full text-xs font-medium mt-1 ${
                    appointment.status === 'completed' ? 'bg-green-100 text-green-700' :
                    appointment.status === 'cancelled' ? 'bg-red-100 text-red-700' :
                    'bg-blue-100 text-blue-700'
                  }">
                    ${appointment.status || 'scheduled'}
                  </span>
                </div>
              </div>
            </div>
          </div>

          ${appointment.notes ? `
            <!-- Notes -->
            <div>
              <h4 class="text-sm font-semibold text-muted-foreground mb-3 uppercase tracking-wide">Medical Notes</h4>
              <div class="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                <p class="text-sm text-gray-700 whitespace-pre-wrap">${appointment.notes}</p>
              </div>
            </div>
          ` : ''}

          <!-- Actions -->
          <div class="flex gap-3 pt-4 border-t border-border">
            ${appointment.status !== 'completed' ? `
              <button 
                id="complete-appointment-btn"
                class="flex-1 px-4 py-2.5 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white rounded-lg transition-all shadow-lg hover:shadow-xl font-medium"
              >
                <i class="fas fa-check-circle mr-2"></i>
                Mark as Completed
              </button>
            ` : ''}
            ${appointment.status === 'scheduled' ? `
              <button 
                id="cancel-appointment-btn"
                class="flex-1 px-4 py-2.5 bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white rounded-lg transition-all shadow-lg hover:shadow-xl font-medium"
              >
                <i class="fas fa-times-circle mr-2"></i>
                Cancel
              </button>
            ` : ''}
          </div>
        </div>
      `;

      // Make the patient info clickable to open the full patient details modal
      const patientInfoEl = detailsContent.querySelector('#appointment-patient-info') as HTMLElement | null;
      if (patientInfoEl && patient?.id) {
        const openPatient = () => showPatientDetails(patient.id);
        patientInfoEl.addEventListener('click', openPatient);
        patientInfoEl.addEventListener('keydown', (e: KeyboardEvent) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            openPatient();
          }
        });
      }

      // Attach action button listeners
      const completeBtn = document.getElementById('complete-appointment-btn');
      const cancelBtn = document.getElementById('cancel-appointment-btn');

      if (completeBtn) {
        completeBtn.addEventListener('click', () => updateAppointmentStatus(appointment.id, 'completed'));
      }

      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => updateAppointmentStatus(appointment.id, 'cancelled'));
      }

      modal.classList.remove('hidden');
      modal.style.display = 'flex';
      
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }

    function closeAppointmentModal() {
      const modal = document.getElementById('appointment-modal');
      const modalContent = document.getElementById('appointment-modal-content');
      
      if (modal && modalContent) {
        modalContent.classList.add('scale-95', 'opacity-0');
        modalContent.classList.remove('scale-100', 'opacity-100');
        
        setTimeout(() => {
          modal.classList.add('hidden');
          modal.style.display = 'none';
        }, 200);
      }
    }

    async function updateAppointmentStatus(appointmentId: string, newStatus: string) {
      const confirmed = await showConfirm(
        `${newStatus === 'completed' ? 'Complete' : 'Cancel'} Appointment?`,
        `Are you sure you want to mark this appointment as ${newStatus}?`,
        { 
          type: newStatus === 'cancelled' ? 'danger' : 'info',
          confirmText: newStatus === 'completed' ? 'Complete' : 'Cancel Appointment'
        }
      );

      if (!confirmed) return;

      try {
        const { error } = await supabase
          .from('appointments')
          .update({ status: newStatus })
          .eq('id', appointmentId);

        if (error) throw error;

        showToast(`Appointment ${newStatus} successfully!`, 'success');
        closeAppointmentModal();
        await loadAppointments();
        updateStats();
      } catch (error: any) {
        console.error('Error updating appointment:', error);
        showToast(error.message || 'Failed to update appointment.', 'error');
      }
    }

    async function loadAppointmentRequests() {
      if (!medicData?.id || !medicData?.hospital_id) return;

      try {
        // Load requests that are either:
        // 1. Specifically assigned to this medic (medic_id = current user)
        // 2. OR for this hospital with matching department
        // 3. OR for this hospital with no department specified (general requests)
        let query = supabase
          .from('appointment_requests')
          .select(`
            *,
            patient:profiles!appointment_requests_patient_id_fkey(id, full_name, email, cnp),
            hospital:hospitals(id, name)
          `)
          .eq('hospital_id', medicData.hospital_id);

        // If medic has a department, filter by department or show unassigned requests
        if (medicData.department) {
          query = query.or(`medic_id.eq.${medicData.id},and(medic_id.is.null,or(department.eq.${medicData.department},department.is.null))`);
        } else {
          // No department set - show all unassigned requests for this hospital
          query = query.or(`medic_id.eq.${medicData.id},medic_id.is.null`);
        }

        const { data, error } = await query.order('created_at', { ascending: false });

        if (error) {
          if (error.code === 'PGRST116') {
            console.log('Appointment requests table does not exist yet');
            appointmentRequests = [];
            renderAppointmentRequests();
            return;
          }
          throw error;
        }

        appointmentRequests = data || [];
        renderAppointmentRequests();
      } catch (error) {
        console.error('Error loading appointment requests:', error);
        appointmentRequests = [];
        renderAppointmentRequests();
      }
    }

    function renderAppointmentRequests() {
      const container = document.getElementById('appointment-requests-list');
      const badge = document.getElementById('pending-requests-badge');
      const pendingCount = document.getElementById('pending-count');

      if (!container) return;

      const pending = appointmentRequests.filter(r => r.status === 'pending');
      
      if (badge && pendingCount) {
        if (pending.length > 0) {
          badge.classList.remove('hidden');
          pendingCount.textContent = pending.length.toString();
        } else {
          badge.classList.add('hidden');
        }
      }

      if (appointmentRequests.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-clipboard-list text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No appointment requests</p>
            <p class="text-sm">New requests will appear here</p>
          </div>
        `;
        return;
      }

  container.innerHTML = appointmentRequests.map(request => {
        const statusConfig: Record<string, any> = {
          pending: { bg: 'bg-orange-100', text: 'text-orange-700', icon: 'fa-clock', label: 'Pending' },
          approved: { bg: 'bg-green-100', text: 'text-green-700', icon: 'fa-check-circle', label: 'Approved' },
          rejected: { bg: 'bg-red-100', text: 'text-red-700', icon: 'fa-times-circle', label: 'Rejected' },
          cancelled: { bg: 'bg-gray-100', text: 'text-gray-700', icon: 'fa-ban', label: 'Cancelled' }
        };

        const severityConfig: Record<string, any> = {
          urgent: { bg: 'bg-red-100', text: 'text-red-700', icon: '🔴', label: 'URGENT', priority: 1 },
          high: { bg: 'bg-orange-100', text: 'text-orange-700', icon: '🟠', label: 'HIGH', priority: 2 },
          normal: { bg: 'bg-blue-100', text: 'text-blue-700', icon: '🟡', label: 'NORMAL', priority: 3 },
          low: { bg: 'bg-green-100', text: 'text-green-700', icon: '🟢', label: 'LOW', priority: 4 }
        };

        const config = statusConfig[request.status] || statusConfig.pending;
        const severityInfo = request.severity ? severityConfig[request.severity] : null;
        const createdDate = new Date(request.created_at).toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        return `
          <div class="p-4 rounded-lg border ${severityInfo?.priority === 1 ? 'border-red-300 bg-red-50/50' : 'border-border'} hover:bg-accent/30 transition-colors mb-3">
            <div class="flex flex-col sm:flex-row items-start sm:items-start justify-between gap-3 mb-3">
              <div class="flex-1 min-w-0">
                <div class="flex items-center gap-2 mb-2">
                  <div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-semibold text-sm flex-shrink-0">
                    ${request.patient?.full_name?.charAt(0).toUpperCase() || 'P'}
                  </div>
                  <div>
                    <p class="font-semibold text-foreground truncate">${request.patient?.full_name || 'Unknown Patient'}</p>
                    <p class="text-xs text-muted-foreground truncate">${request.patient?.email || ''}</p>
                  </div>
                </div>
                ${request.department ? `
                  <div class="ml-12 mb-2">
                    <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                      <i class="fas fa-stethoscope mr-1"></i>
                      ${request.department}
                    </span>
                  </div>
                ` : ''}
                ${severityInfo ? `
                  <div class="ml-12 mb-2">
                    <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-bold ${severityInfo.bg} ${severityInfo.text}">
                      ${severityInfo.icon} ${severityInfo.label} PRIORITY
                    </span>
                  </div>
                ` : ''}
                ${request.medic_id ? `
                  <div class="ml-12">
                    <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-700">
                      <i class="fas fa-user-md mr-1"></i>
                      Assigned to specific doctor
                    </span>
                  </div>
                ` : `
                  <div class="ml-12">
                    <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100 text-green-700">
                      <i class="fas fa-users-medical mr-1"></i>
                      Any available doctor
                    </span>
                  </div>
                `}
              </div>
              <span class="px-3 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text} flex items-center gap-1 whitespace-nowrap sm:self-auto self-start">
                <i class="fas ${config.icon}"></i>
                ${config.label}
              </span>
            </div>
            
            <div class="bg-accent/50 rounded p-3 mb-3">
              <p class="text-sm text-foreground"><strong>Reason:</strong> ${request.reason}</p>
            </div>

            ${request.severity_details ? `
              <div class="mb-3 p-3 bg-blue-50 border-l-4 border-blue-400 rounded">
                <p class="text-xs font-semibold text-blue-800 mb-1">
                  <i class="fas fa-robot mr-1"></i>
                  AI Assessment & Recommendations:
                </p>
                <p class="text-sm text-blue-700">${request.severity_details}</p>
              </div>
            ` : ''}            <div class="grid grid-cols-2 gap-2 text-xs text-muted-foreground mb-3">
              <div>
                <i class="fas fa-calendar mr-1"></i>
                Requested: ${createdDate}
              </div>
              ${request.preferred_date ? `
                <div>
                  <i class="fas fa-clock mr-1"></i>
                  Preferred: ${new Date(request.preferred_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                  ${request.preferred_time_slot ? ` (${request.preferred_time_slot})` : ''}
                </div>
              ` : ''}
            </div>

            ${request.status === 'pending' ? `
              <div class="flex gap-2">
                <button 
                  class="approve-request-btn flex-1 px-3 py-2 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white rounded-lg text-sm font-medium transition-all shadow hover:shadow-lg"
                  data-request-id="${request.id}"
                  data-patient-name="${request.patient?.full_name || 'Patient'}"
                  data-patient-email="${request.patient?.email || ''}"
                  data-reason="${request.reason}"
                  data-department="${request.department || 'N/A'}"
                >
                  <i class="fas fa-check mr-1"></i>
                  Schedule
                </button>
                <button 
                  class="reject-request-btn flex-1 px-3 py-2 border border-red-200 text-red-600 hover:bg-red-50 rounded-lg text-sm font-medium transition-all"
                  data-request-id="${request.id}"
                >
                  <i class="fas fa-times mr-1"></i>
                  Reject
                </button>
              </div>
            ` : ''}

            ${request.status === 'approved' && request.appointment ? `
              <div class="p-3 bg-green-50 border border-green-200 rounded-lg text-sm">
                <i class="fas fa-check-circle text-green-600 mr-2"></i>
                <span class="text-green-800">Scheduled for ${new Date(request.appointment.appointment_date).toLocaleString('en-US', { 
                  month: 'short', 
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}</span>
              </div>
            ` : ''}

            ${request.status === 'rejected' && request.rejection_reason ? `
              <div class="p-3 bg-red-50 border border-red-200 rounded-lg text-sm">
                <p class="font-medium text-red-800 mb-1">Rejection reason:</p>
                <p class="text-red-700">${request.rejection_reason}</p>
              </div>
            ` : ''}
          </div>
        `;
      }).join('');

      // Attach event listeners
      document.querySelectorAll('.approve-request-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const el = e.currentTarget as HTMLElement;
          openScheduleModal({
            requestId: el.dataset.requestId,
            patientName: el.dataset.patientName,
            patientEmail: el.dataset.patientEmail,
            reason: el.dataset.reason,
            department: el.dataset.department
          });
        });
      });

      document.querySelectorAll('.reject-request-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const requestId = (e.currentTarget as HTMLElement).dataset.requestId;
          if (requestId) await rejectAppointmentRequest(requestId);
        });
      });
    }

    function openScheduleModal(data: any) {
      const modal = document.getElementById('schedule-modal');
      const modalContent = document.getElementById('schedule-modal-content');
      const patientInfo = document.getElementById('schedule-patient-info');
      const requestIdInput = document.getElementById('schedule-request-id') as HTMLInputElement;
      const datetimeInput = document.getElementById('appointment-datetime') as HTMLInputElement;

      if (!modal || !modalContent || !patientInfo || !requestIdInput || !datetimeInput) return;

      requestIdInput.value = data.requestId || '';
      
      patientInfo.innerHTML = `
        <div class="flex items-center gap-3">
          <div class="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold text-lg">
            ${data.patientName?.charAt(0).toUpperCase() || 'P'}
          </div>
          <div class="flex-1">
            <p class="font-semibold text-foreground">${data.patientName}</p>
            <p class="text-sm text-muted-foreground">${data.patientEmail}</p>
            ${data.department && data.department !== 'N/A' ? `
              <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-700 mt-1">
                <i class="fas fa-stethoscope mr-1"></i>
                ${data.department}
              </span>
            ` : ''}
            <p class="text-sm text-blue-600 mt-1"><strong>Reason:</strong> ${data.reason}</p>
          </div>
        </div>
      `;

      // Set minimum datetime to now
      const now = new Date();
      const minDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
      datetimeInput.min = minDate;

      modal.classList.remove('hidden');
      modal.style.display = 'flex';
      
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }

    function closeScheduleModal() {
      const modal = document.getElementById('schedule-modal');
      const modalContent = document.getElementById('schedule-modal-content');
      
      if (modal && modalContent) {
        modalContent.classList.add('scale-95', 'opacity-0');
        modalContent.classList.remove('scale-100', 'opacity-100');
        
        setTimeout(() => {
          modal.classList.add('hidden');
          modal.style.display = 'none';
          const form = document.getElementById('schedule-appointment-form') as HTMLFormElement;
          form?.reset();
        }, 200);
      }
    }

    async function scheduleAppointment(e: Event) {
      e.preventDefault();

      if (!medicData || !hospitalData) {
        showToast('Missing medic or hospital information', 'error');
        return;
      }

      const requestId = (document.getElementById('schedule-request-id') as HTMLInputElement).value;
      const datetime = (document.getElementById('appointment-datetime') as HTMLInputElement).value;
      const notes = (document.getElementById('appointment-notes') as HTMLTextAreaElement).value;

      if (!requestId || !datetime) {
        showToast('Please fill in all required fields', 'error');
        return;
      }

      // Find the request to get patient info
      const request = appointmentRequests.find(r => r.id === requestId);
      if (!request) {
        showToast('Request not found', 'error');
        return;
      }

      const submitBtn = document.querySelector('#schedule-appointment-form button[type="submit"]') as HTMLButtonElement;
      const originalBtnContent = submitBtn?.innerHTML;
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Scheduling...';
      }

      try {
        // Create the appointment
        const { data: appointment, error: aptError } = await supabase
          .from('appointments')
          .insert({
            patient_id: request.patient_id,
            medic_id: medicData.id,
            hospital_id: hospitalData.id,
            appointment_date: datetime,
            reason: request.reason,
            notes: notes,
            status: 'scheduled'
          })
          .select()
          .single();

        if (aptError) throw aptError;

        // Update the request to approved and link the appointment
        const { error: reqError } = await supabase
          .from('appointment_requests')
          .update({
            status: 'approved',
            appointment_id: appointment.id
          })
          .eq('id', requestId);

        if (reqError) throw reqError;

        showToast('Appointment scheduled successfully!', 'success');
        closeScheduleModal();
        await loadAppointmentRequests();
        await loadAppointments();
        updateStats();
      } catch (error: any) {
        console.error('Error scheduling appointment:', error);
        showToast(error.message || 'Failed to schedule appointment', 'error');
      } finally {
        if (submitBtn && originalBtnContent) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnContent;
        }
      }
    }

    async function rejectAppointmentRequest(requestId: string) {
      const confirmed = await showConfirm(
        'Reject Appointment Request?',
        'Are you sure you want to reject this appointment request?',
        { type: 'danger', confirmText: 'Reject', cancelText: 'Cancel' }
      );

      if (!confirmed) return;

      const reason = await showPrompt(
        'Rejection Reason',
        'Please provide a reason for rejection (optional):',
        'Enter reason here...'
      );
      
      if (reason === null) return; // User cancelled

      try {
        const { error } = await supabase
          .from('appointment_requests')
          .update({
            status: 'rejected',
            rejection_reason: reason || 'Request rejected by doctor'
          })
          .eq('id', requestId);

        if (error) throw error;

        showToast('Request rejected', 'success');
        await loadAppointmentRequests();
      } catch (error: any) {
        console.error('Error rejecting request:', error);
        showToast(error.message || 'Failed to reject request', 'error');
      }
    }

    // Event listeners
    document.getElementById('close-appointment-modal')?.addEventListener('click', closeAppointmentModal);
    document.getElementById('close-schedule-modal')?.addEventListener('click', closeScheduleModal);
    document.getElementById('cancel-schedule-btn')?.addEventListener('click', closeScheduleModal);
    document.getElementById('schedule-appointment-form')?.addEventListener('submit', scheduleAppointment);
    
    document.getElementById('availability-btn')?.addEventListener('click', () => {
      showToast('Availability feature coming soon!', 'info');
    });

    // Schedule filter buttons
    document.querySelectorAll('.schedule-filter-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLElement;
        const filter = target.dataset.filter || 'all';
        
        // Update active state
        document.querySelectorAll('.schedule-filter-btn').forEach(b => {
          b.classList.remove('active', 'bg-green-600', 'text-white');
          b.classList.add('text-gray-600', 'hover:bg-gray-100');
        });
        target.classList.add('active', 'bg-green-600', 'text-white');
        target.classList.remove('text-gray-600', 'hover:bg-gray-100');
        
        currentFilter = filter;
        renderTodaySchedule();
      });
    });

    // Patient search with debouncing
    let searchTimeout: NodeJS.Timeout;
    const patientSearchInput = document.getElementById('patient-search') as HTMLInputElement;
    patientSearchInput?.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;
      
      // Clear previous timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      // Set new timeout for debounced search
      searchTimeout = setTimeout(() => {
        renderPatients(query);
      }, 300); // 300ms debounce
    });

    // ============================================
    // PATIENT DETAILS MODAL FUNCTIONS
    // ============================================
    
    let currentPatientId: string | null = null;

    // ============================================
    // AUTOCOMPLETE FUNCTIONALITY FOR # REFERENCES
    // ============================================

    interface AutocompleteItem {
      id: string;
      type: 'prescription' | 'medical_history';
      title: string;
      subtitle: string;
      insertText: string;
    }

    function setupAutocomplete(textareaId: string, dropdownId: string, patientId: string) {
      const textarea = document.getElementById(textareaId) as HTMLTextAreaElement;
      const dropdown = document.getElementById(dropdownId);
      
      if (!textarea || !dropdown) return;

      let autocompleteItems: AutocompleteItem[] = [];
      let selectedIndex = -1;

      // Load data for autocomplete
      async function loadAutocompleteData() {
        try {
          // Fetch prescriptions
          const { data: prescriptions } = await supabase
            .from('prescriptions')
            .select('*')
            .eq('patient_id', patientId)
            .eq('medic_id', currentUser.id)
            .order('prescribed_date', { ascending: false })
            .limit(20);

          // Fetch medical history
          const { data: history } = await supabase
            .from('medical_history')
            .select('*')
            .eq('patient_id', patientId)
            .eq('medic_id', currentUser.id)
            .order('visit_date', { ascending: false })
            .limit(20);

          autocompleteItems = [];

          // Add prescriptions
          prescriptions?.forEach(rx => {
            autocompleteItems.push({
              id: rx.id,
              type: 'prescription',
              title: `💊 ${rx.medication_name}`,
              subtitle: `${rx.dosage} - ${rx.frequency}`,
              insertText: `#rx-${rx.id} (${rx.medication_name} ${rx.dosage})`
            });
          });

          // Add medical history
          history?.forEach(record => {
            const date = new Date(record.visit_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            autocompleteItems.push({
              id: record.id,
              type: 'medical_history',
              title: `📋 ${record.diagnosis}`,
              subtitle: date,
              insertText: `#history-${record.id} (${record.diagnosis})`
            });
          });

        } catch (error) {
          console.error('Error loading autocomplete data:', error);
        }
      }

      // Initial data load
      loadAutocompleteData();

      textarea.addEventListener('input', (e) => {
        const target = e.target as HTMLTextAreaElement;
        const cursorPos = target.selectionStart;
        const textBeforeCursor = target.value.substring(0, cursorPos);
        
        // Check if # was just typed
        const hashMatch = textBeforeCursor.match(/#(\w*)$/);
        
        if (hashMatch) {
          const searchTerm = hashMatch[1].toLowerCase();
          const filteredItems = autocompleteItems.filter(item =>
            item.title.toLowerCase().includes(searchTerm) ||
            item.subtitle.toLowerCase().includes(searchTerm)
          );

          if (filteredItems.length > 0) {
            showAutocompleteDropdown(filteredItems, dropdown, textarea);
            selectedIndex = -1;
          } else {
            hideAutocompleteDropdown(dropdown);
          }
        } else {
          hideAutocompleteDropdown(dropdown);
        }
      });

      textarea.addEventListener('keydown', (e) => {
        if (dropdown.classList.contains('hidden')) return;

        const items = dropdown.querySelectorAll('.autocomplete-item');
        
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
          updateSelection(items, selectedIndex);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          selectedIndex = Math.max(selectedIndex - 1, 0);
          updateSelection(items, selectedIndex);
        } else if (e.key === 'Enter' && selectedIndex >= 0) {
          e.preventDefault();
          (items[selectedIndex] as HTMLElement).click();
        } else if (e.key === 'Escape') {
          hideAutocompleteDropdown(dropdown);
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!textarea.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
          hideAutocompleteDropdown(dropdown);
        }
      });
    }

    function showAutocompleteDropdown(items: AutocompleteItem[], dropdown: HTMLElement, textarea: HTMLTextAreaElement) {
      dropdown.innerHTML = items.map((item, index) => `
        <div class="autocomplete-item px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors" data-index="${index}">
          <div class="font-medium text-gray-900">${item.title}</div>
          <div class="text-sm text-gray-600">${item.subtitle}</div>
        </div>
      `).join('');

      // Position dropdown at cursor position
      positionDropdownAtCursor(textarea, dropdown);

      dropdown.classList.remove('hidden');

      // Add click handlers
      dropdown.querySelectorAll('.autocomplete-item').forEach((el, index) => {
        el.addEventListener('click', () => {
          insertAutocompleteItem(textarea, items[index]);
          hideAutocompleteDropdown(dropdown);
        });
      });
    }

    function positionDropdownAtCursor(textarea: HTMLTextAreaElement, dropdown: HTMLElement) {
      // Create a mirror div to calculate cursor position
      const mirror = document.createElement('div');
      const styles = window.getComputedStyle(textarea);
      
      // Copy textarea styles to mirror
      [
        'fontFamily', 'fontSize', 'fontWeight', 'letterSpacing', 
        'lineHeight', 'padding', 'border', 'width'
      ].forEach(prop => {
        (mirror.style as any)[prop] = (styles as any)[prop];
      });

      mirror.style.position = 'absolute';
      mirror.style.visibility = 'hidden';
      mirror.style.whiteSpace = 'pre-wrap';
      mirror.style.wordWrap = 'break-word';
      mirror.style.overflow = 'hidden';
      
      document.body.appendChild(mirror);

      // Get text before cursor
      const textBeforeCursor = textarea.value.substring(0, textarea.selectionStart);
      mirror.textContent = textBeforeCursor;

      // Add a span at cursor position to measure
      const cursorSpan = document.createElement('span');
      cursorSpan.textContent = '|';
      mirror.appendChild(cursorSpan);

      // Get textarea position
      const textareaRect = textarea.getBoundingClientRect();
      const cursorSpanRect = cursorSpan.getBoundingClientRect();
      const mirrorRect = mirror.getBoundingClientRect();

      // Calculate position relative to textarea
      const relativeTop = cursorSpanRect.top - mirrorRect.top + parseInt(styles.paddingTop);
      const relativeLeft = cursorSpanRect.left - mirrorRect.left + parseInt(styles.paddingLeft);

      // Position dropdown
      const lineHeight = parseInt(styles.lineHeight);
      dropdown.style.position = 'absolute';
      dropdown.style.top = `${relativeTop + lineHeight + 8}px`;
      dropdown.style.left = `${relativeLeft}px`;
      dropdown.style.minWidth = '300px';
      dropdown.style.maxWidth = '500px';

      // Clean up
      document.body.removeChild(mirror);
    }

    function hideAutocompleteDropdown(dropdown: HTMLElement) {
      dropdown.classList.add('hidden');
      dropdown.innerHTML = '';
    }

    function updateSelection(items: NodeListOf<Element>, selectedIndex: number) {
      items.forEach((item, index) => {
        if (index === selectedIndex) {
          item.classList.add('bg-blue-50');
          item.scrollIntoView({ block: 'nearest' });
        } else {
          item.classList.remove('bg-blue-50');
        }
      });
    }

    function insertAutocompleteItem(textarea: HTMLTextAreaElement, item: AutocompleteItem) {
      const cursorPos = textarea.selectionStart;
      const textBefore = textarea.value.substring(0, cursorPos);
      const textAfter = textarea.value.substring(cursorPos);
      
      // Remove the # and any text after it up to cursor
      const beforeHash = textBefore.replace(/#\w*$/, '');
      
      // Insert the reference text
      textarea.value = beforeHash + item.insertText + ' ' + textAfter;
      
      // Set cursor position after inserted text
      const newCursorPos = beforeHash.length + item.insertText.length + 1;
      textarea.setSelectionRange(newCursorPos, newCursorPos);
      textarea.focus();
    }

    // ============================================
    // LINKIFY REFERENCES IN TEXT
    // ============================================

    function linkifyReferences(text: string): string {
      if (!text) return text;
      
      // Match #rx-{id} or #history-{id} patterns
      return text.replace(/#(rx|history)-([a-f0-9-]+)(\s*\([^)]+\))?/g, (match, type, id, description) => {
        const displayText = match;
        const typeLabel = type === 'rx' ? 'prescription' : 'medical history';
        return `<span class="reference-link text-blue-600 hover:text-blue-800 cursor-pointer underline decoration-dotted" 
                      data-ref-type="${type}" 
                      data-ref-id="${id}" 
                      title="Click to view ${typeLabel}"
                      onclick="showReference('${type}', '${id}')">${displayText}</span>`;
      });
    }

    async function showReference(type: string, id: string) {
      try {
        if (type === 'rx') {
          // Fetch prescription
          const { data, error } = await supabase
            .from('prescriptions')
            .select('*')
            .eq('id', id)
            .single();

          if (error) throw error;

          if (data) {
            const content = `
              <div class="space-y-3">
                <div class="flex items-center gap-2">
                  <i class="fas fa-pills text-green-600 text-xl"></i>
                  <h4 class="text-lg font-bold text-gray-900">${data.medication_name}</h4>
                </div>
                <div class="grid grid-cols-2 gap-3 text-sm">
                  <div>
                    <span class="text-gray-600">Dosage:</span>
                    <span class="font-medium ml-1">${data.dosage}</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Frequency:</span>
                    <span class="font-medium ml-1">${data.frequency}</span>
                  </div>
                  ${data.duration ? `
                    <div>
                      <span class="text-gray-600">Duration:</span>
                      <span class="font-medium ml-1">${data.duration}</span>
                    </div>
                  ` : ''}
                  <div>
                    <span class="text-gray-600">Status:</span>
                    <span class="font-medium ml-1 capitalize">${data.status}</span>
                  </div>
                </div>
                ${data.instructions ? `
                  <div class="mt-3 p-3 bg-gray-50 rounded-lg">
                    <p class="text-xs text-gray-600 mb-1">Instructions</p>
                    <p class="text-sm text-gray-900">${linkifyReferences(data.instructions)}</p>
                  </div>
                ` : ''}
                <div class="text-xs text-gray-500 pt-2 border-t">
                  Prescribed on ${new Date(data.prescribed_date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
                </div>
              </div>
            `;

            await showConfirm(
              'Prescription Details',
              content,
              {
                type: 'info',
                confirmText: 'Close',
                cancelText: ''
              }
            );
          }
        } else if (type === 'history') {
          // Fetch medical history
          const { data, error } = await supabase
            .from('medical_history')
            .select('*')
            .eq('id', id)
            .single();

          if (error) throw error;

          if (data) {
            const content = `
              <div class="flex flex-col gap-2">
                <!-- Diagnosis Header -->
                <div class="flex items-start gap-2.5 pb-2 border-b border-gray-200">
                  <div class="w-9 h-9 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0">
                    <i class="fas fa-file-medical text-blue-600"></i>
                  </div>
                  <div class="flex-1">
                    <p class="text-xs font-semibold text-gray-500 uppercase tracking-wide">Diagnosis</p>
                    <h4 class="text-base font-bold text-gray-900">${data.diagnosis}</h4>
                  </div>
                </div>

                <!-- Symptoms -->
                ${data.symptoms ? `
                  <div class="bg-red-50 border border-red-100 rounded-lg p-2.5">
                    <div class="flex items-center gap-1.5 mb-1">
                      <i class="fas fa-heartbeat text-red-600 text-xs"></i>
                      <p class="text-xs font-semibold text-red-900 uppercase tracking-wide">Symptoms</p>
                    </div>
                    <p class="text-sm text-gray-900 leading-snug">${linkifyReferences(data.symptoms)}</p>
                  </div>
                ` : ''}

                <!-- Treatment -->
                ${data.treatment ? `
                  <div class="bg-green-50 border border-green-100 rounded-lg p-2.5">
                    <div class="flex items-center gap-1.5 mb-1">
                      <i class="fas fa-prescription text-green-600 text-xs"></i>
                      <p class="text-xs font-semibold text-green-900 uppercase tracking-wide">Treatment</p>
                    </div>
                    <p class="text-sm text-gray-900 leading-snug">${linkifyReferences(data.treatment)}</p>
                  </div>
                ` : ''}

                <!-- Notes -->
                ${data.notes ? `
                  <div class="bg-amber-50 border border-amber-100 rounded-lg p-2.5">
                    <div class="flex items-center gap-1.5 mb-1">
                      <i class="fas fa-sticky-note text-amber-600 text-xs"></i>
                      <p class="text-xs font-semibold text-amber-900 uppercase tracking-wide">Additional Notes</p>
                    </div>
                    <p class="text-sm text-gray-900 leading-snug">${linkifyReferences(data.notes)}</p>
                  </div>
                ` : ''}

                <!-- Visit Date Footer -->
                <div class="flex items-center gap-2 pt-2 border-t border-gray-200">
                  <i class="fas fa-calendar-check text-gray-400 text-xs"></i>
                  <p class="text-xs text-gray-500">
                    Visit: <span class="font-medium text-gray-700">${new Date(data.visit_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
                  </p>
                </div>
              </div>
            `;

            await showConfirm(
              'Medical History Record',
              content,
              {
                type: 'info',
                confirmText: 'Close',
                cancelText: ''
              }
            );
          }
        }
      } catch (error) {
        console.error('Error fetching reference:', error);
        showToast('Failed to load reference details', 'error');
      }
    }

    async function showPatientDetails(patientId: string) {
      currentPatientId = patientId;
      const modal = document.getElementById('patient-details-modal');
      const modalContent = document.getElementById('patient-details-modal-content');
      
      if (!modal || !modalContent) return;

      // Show modal with animation
      modal.classList.remove('hidden');
      setTimeout(() => {
        modalContent.style.transform = 'scale(1)';
        modalContent.style.opacity = '1';
      }, 10);

      // Load patient data
      await loadPatientData(patientId);
    }

    async function loadPatientData(patientId: string) {
      try {
        // Get patient profile
        const { data: patient, error: patientError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', patientId)
          .single();

        if (patientError) throw patientError;

        // Update patient header
        document.getElementById('patient-avatar')!.textContent = patient.full_name?.charAt(0).toUpperCase() || 'P';
        document.getElementById('patient-name')!.textContent = patient.full_name || 'Unknown Patient';
        document.getElementById('patient-email')!.textContent = patient.email || '';
        document.getElementById('patient-cnp')!.textContent = patient.cnp || '-';
        
        // Get appointments count and last visit
        const { data: appointments, error: apptError } = await supabase
          .from('appointments')
          .select('*')
          .eq('patient_id', patientId)
          .eq('medic_id', currentUser.id)
          .order('appointment_date', { ascending: false });

        if (apptError) throw apptError;

        const visitCount = appointments?.length || 0;
        const lastVisit = appointments?.[0]?.appointment_date;

        document.getElementById('patient-visits')!.textContent = visitCount.toString();
        document.getElementById('patient-last-visit')!.textContent = lastVisit 
          ? new Date(lastVisit).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
          : '-';

        // Update overview tab
        document.getElementById('overview-email')!.textContent = patient.email || '-';
        document.getElementById('overview-cnp')!.textContent = patient.cnp || '-';
        document.getElementById('stat-appointments')!.textContent = visitCount.toString();

        // Get prescriptions count
        const { data: prescriptions, error: rxError } = await supabase
          .from('prescriptions')
          .select('id')
          .eq('patient_id', patientId)
          .eq('medic_id', currentUser.id);

        if (!rxError) {
          document.getElementById('stat-prescriptions')!.textContent = (prescriptions?.length || 0).toString();
        }

        // Switch to overview tab
        switchPatientTab('overview');

        // Load tab data
        await loadMedicalHistory(patientId);
        await loadPrescriptions(patientId);
        await loadAppointmentsHistory(patientId);

      } catch (error) {
        console.error('Error loading patient data:', error);
        showToast('Failed to load patient data', 'error');
      }
    }

    async function loadMedicalHistory(patientId: string) {
      const container = document.getElementById('medical-history-list');
      if (!container) return;

      try {
        const { data, error } = await supabase
          .from('medical_history')
          .select('*')
          .eq('patient_id', patientId)
          .eq('medic_id', currentUser.id)
          .order('visit_date', { ascending: false });

        if (error) throw error;

        if (!data || data.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12 text-gray-400">
              <i class="fas fa-file-medical text-5xl mb-4 opacity-50"></i>
              <p>No medical history records yet</p>
            </div>
          `;
          return;
        }

        container.innerHTML = data.map(record => `
          <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
            <div class="flex items-start justify-between mb-3">
              <div>
                <h5 class="font-semibold text-gray-900">${record.diagnosis}</h5>
                <p class="text-sm text-gray-500">
                  <i class="fas fa-calendar mr-1"></i>
                  ${new Date(record.visit_date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </p>
              </div>
            </div>
            ${record.symptoms ? `
              <div class="mb-2">
                <p class="text-xs font-medium text-gray-500 mb-1">Symptoms</p>
                <p class="text-sm text-gray-700">${linkifyReferences(record.symptoms)}</p>
              </div>
            ` : ''}
            ${record.treatment ? `
              <div class="mb-2">
                <p class="text-xs font-medium text-gray-500 mb-1">Treatment</p>
                <p class="text-sm text-gray-700">${linkifyReferences(record.treatment)}</p>
              </div>
            ` : ''}
            ${record.notes ? `
              <div>
                <p class="text-xs font-medium text-gray-500 mb-1">Notes</p>
                <p class="text-sm text-gray-700">${linkifyReferences(record.notes)}</p>
              </div>
            ` : ''}
          </div>
        `).join('');

      } catch (error) {
        console.error('Error loading medical history:', error);
        container.innerHTML = '<p class="text-center text-red-500">Failed to load medical history</p>';
      }
    }

    async function loadPrescriptions(patientId: string) {
      const container = document.getElementById('prescriptions-list');
      if (!container) return;

      try {
        const { data, error } = await supabase
          .from('prescriptions')
          .select('*')
          .eq('patient_id', patientId)
          .eq('medic_id', currentUser.id)
          .order('prescribed_date', { ascending: false });

        if (error) throw error;

        if (!data || data.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12 text-gray-400">
              <i class="fas fa-pills text-5xl mb-4 opacity-50"></i>
              <p>No prescriptions yet</p>
            </div>
          `;
          return;
        }

        container.innerHTML = data.map(rx => `
          <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
            <div class="flex items-start justify-between mb-3">
              <div>
                <h5 class="font-semibold text-gray-900 flex items-center gap-2">
                  <i class="fas fa-pills text-green-600"></i>
                  ${rx.medication_name}
                </h5>
                <p class="text-sm text-gray-500 mt-1">
                  <i class="fas fa-calendar mr-1"></i>
                  Prescribed on ${new Date(rx.prescribed_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                </p>
              </div>
              <span class="px-3 py-1 rounded-full text-xs font-medium ${
                rx.status === 'active' ? 'bg-green-100 text-green-700' :
                rx.status === 'completed' ? 'bg-gray-100 text-gray-700' :
                'bg-red-100 text-red-700'
              }">
                ${rx.status}
              </span>
            </div>
            <div class="grid grid-cols-2 gap-3 mb-3">
              <div>
                <p class="text-xs font-medium text-gray-500">Dosage</p>
                <p class="text-sm text-gray-900">${rx.dosage}</p>
              </div>
              <div>
                <p class="text-xs font-medium text-gray-500">Frequency</p>
                <p class="text-sm text-gray-900">${rx.frequency}</p>
              </div>
              ${rx.duration ? `
                <div>
                  <p class="text-xs font-medium text-gray-500">Duration</p>
                  <p class="text-sm text-gray-900">${rx.duration}</p>
                </div>
              ` : ''}
            </div>
            ${rx.instructions ? `
              <div class="pt-3 border-t border-gray-100">
                <p class="text-xs font-medium text-gray-500 mb-1">Instructions</p>
                <p class="text-sm text-gray-700">${linkifyReferences(rx.instructions)}</p>
              </div>
            ` : ''}
          </div>
        `).join('');

      } catch (error) {
        console.error('Error loading prescriptions:', error);
        container.innerHTML = '<p class="text-center text-red-500">Failed to load prescriptions</p>';
      }
    }

    async function loadAppointmentsHistory(patientId: string) {
      const container = document.getElementById('appointments-history-list');
      if (!container) return;

      try {
        const { data, error } = await supabase
          .from('appointments')
          .select('*')
          .eq('patient_id', patientId)
          .eq('medic_id', currentUser.id)
          .order('appointment_date', { ascending: false });

        if (error) throw error;

        if (!data || data.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12 text-gray-400">
              <i class="fas fa-calendar-alt text-5xl mb-4 opacity-50"></i>
              <p>No appointments yet</p>
            </div>
          `;
          return;
        }

        container.innerHTML = data.map(apt => `
          <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
            <div class="flex items-start justify-between mb-2">
              <div class="flex-1">
                <p class="font-semibold text-gray-900">
                  ${new Date(apt.appointment_date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
                </p>
                <p class="text-sm text-gray-600">
                  ${new Date(apt.appointment_date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                </p>
              </div>
              <span class="px-3 py-1 rounded-full text-xs font-medium ${
                apt.status === 'completed' ? 'bg-green-100 text-green-700' :
                apt.status === 'cancelled' ? 'bg-red-100 text-red-700' :
                apt.status === 'no_show' ? 'bg-orange-100 text-orange-700' :
                'bg-blue-100 text-blue-700'
              }">
                ${apt.status}
              </span>
            </div>
            ${apt.reason ? `
              <p class="text-sm text-gray-700 mb-2">
                <span class="font-medium">Reason:</span> ${apt.reason}
              </p>
            ` : ''}
            ${apt.notes ? `
              <p class="text-sm text-gray-700 bg-gray-50 p-2 rounded">
                <span class="font-medium">Notes:</span> ${apt.notes}
              </p>
            ` : ''}
          </div>
        `).join('');

      } catch (error) {
        console.error('Error loading appointments:', error);
        container.innerHTML = '<p class="text-center text-red-500">Failed to load appointments</p>';
      }
    }

    function switchPatientTab(tabName: string) {
      // Update tab buttons
      const tabs = document.querySelectorAll('.patient-tab');
      tabs.forEach(tab => {
        if (tab.getAttribute('data-tab') === tabName) {
          tab.classList.add('active');
        } else {
          tab.classList.remove('active');
        }
      });

      // Update tab content
      const contents = document.querySelectorAll('.tab-content');
      contents.forEach(content => {
        content.classList.add('hidden');
      });
      document.getElementById(`tab-${tabName}`)?.classList.remove('hidden');
    }

    // Tab click handlers
    document.querySelectorAll('.patient-tab').forEach(tab => {
      tab.addEventListener('click', () => {
        const tabName = tab.getAttribute('data-tab');
        if (tabName) switchPatientTab(tabName);
      });
    });

    // Close modal handler
    document.getElementById('close-patient-modal')?.addEventListener('click', () => {
      const modal = document.getElementById('patient-details-modal');
      const modalContent = document.getElementById('patient-details-modal-content');
      
      if (modalContent) {
        modalContent.style.transform = 'scale(0.95)';
        modalContent.style.opacity = '0';
      }

      setTimeout(() => {
        modal?.classList.add('hidden');
      }, 300);
    });

    // Add medical record handlers
    document.getElementById('add-history-btn')?.addEventListener('click', () => {
      if (currentPatientId) addMedicalRecord(currentPatientId);
    });
    
    document.getElementById('add-history-btn-2')?.addEventListener('click', () => {
      if (currentPatientId) addMedicalRecord(currentPatientId);
    });

    // Add prescription handlers
    document.getElementById('add-prescription-btn')?.addEventListener('click', () => {
      if (currentPatientId) addPrescription(currentPatientId);
    });
    
    document.getElementById('add-prescription-btn-2')?.addEventListener('click', () => {
      if (currentPatientId) addPrescription(currentPatientId);
    });

    async function addMedicalRecord(patientId: string) {
      const modal = document.getElementById('medical-record-modal');
      const modalContent = document.getElementById('medical-record-modal-content');
      const form = document.getElementById('medical-record-form') as HTMLFormElement;
      
      if (!modal || !modalContent || !form) return;

      // Get patient data for display
      const patient = patientsData.find(p => p.id === patientId);
      
      // Set patient info
      document.getElementById('medical-record-patient-name')!.textContent = patient?.full_name || 'Patient';
      (document.getElementById('mr-patient-id') as HTMLInputElement).value = patientId;
      
      // Set default visit date to now
      const now = new Date();
      const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
      (document.getElementById('mr-visit-date') as HTMLInputElement).value = localDateTime;
      
      // Reset form
      form.reset();
      (document.getElementById('mr-patient-id') as HTMLInputElement).value = patientId;
      (document.getElementById('mr-visit-date') as HTMLInputElement).value = localDateTime;

      // Setup autocomplete for treatment and notes fields
      setupAutocomplete('mr-treatment', 'mr-treatment-autocomplete', patientId);
      setupAutocomplete('mr-notes', 'mr-notes-autocomplete', patientId);

      // Show modal with animation
      modal.classList.remove('hidden');
      setTimeout(() => {
        modalContent.style.transform = 'scale(1)';
        modalContent.style.opacity = '1';
      }, 10);
    }

    async function addPrescription(patientId: string) {
      const modal = document.getElementById('prescription-modal');
      const modalContent = document.getElementById('prescription-modal-content');
      const form = document.getElementById('prescription-form') as HTMLFormElement;
      
      if (!modal || !modalContent || !form) return;

      // Get patient data for display
      const patient = patientsData.find(p => p.id === patientId);
      
      // Set patient info
      document.getElementById('prescription-patient-name')!.textContent = patient?.full_name || 'Patient';
      (document.getElementById('rx-patient-id') as HTMLInputElement).value = patientId;
      
      // Reset form
      form.reset();
      (document.getElementById('rx-patient-id') as HTMLInputElement).value = patientId;
      (document.getElementById('rx-status') as HTMLSelectElement).value = 'active';

      // Setup autocomplete for instructions field
      setupAutocomplete('rx-instructions', 'rx-autocomplete', patientId);

      // Show modal with animation
      modal.classList.remove('hidden');
      setTimeout(() => {
        modalContent.style.transform = 'scale(1)';
        modalContent.style.opacity = '1';
      }, 10);
    }

    // ============================================
    // MEDICAL RECORD FORM HANDLERS
    // ============================================

    // Close medical record modal
    document.getElementById('close-medical-record-modal')?.addEventListener('click', () => {
      closeMedicalRecordModal();
    });

    document.getElementById('cancel-medical-record-btn')?.addEventListener('click', () => {
      closeMedicalRecordModal();
    });

    function closeMedicalRecordModal() {
      const modal = document.getElementById('medical-record-modal');
      const modalContent = document.getElementById('medical-record-modal-content');
      
      if (modalContent) {
        modalContent.style.transform = 'scale(0.95)';
        modalContent.style.opacity = '0';
      }

      setTimeout(() => {
        modal?.classList.add('hidden');
      }, 300);
    }

    // Submit medical record form
    document.getElementById('medical-record-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const form = e.target as HTMLFormElement;
      const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      
      // Disable submit button
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Saving...';

      try {
        const patientId = (document.getElementById('mr-patient-id') as HTMLInputElement).value;
        const diagnosis = (document.getElementById('mr-diagnosis') as HTMLInputElement).value;
        const symptoms = (document.getElementById('mr-symptoms') as HTMLTextAreaElement).value;
        const treatment = (document.getElementById('mr-treatment') as HTMLTextAreaElement).value;
        const notes = (document.getElementById('mr-notes') as HTMLTextAreaElement).value;
        const visitDate = (document.getElementById('mr-visit-date') as HTMLInputElement).value;
        const appointmentId = (document.getElementById('mr-appointment-id') as HTMLInputElement).value;

        const { data, error } = await supabase
          .from('medical_history')
          .insert([{
            patient_id: patientId,
            medic_id: currentUser.id,
            appointment_id: appointmentId || null,
            diagnosis,
            symptoms: symptoms || null,
            treatment: treatment || null,
            notes: notes || null,
            visit_date: visitDate
          }])
          .select()
          .single();

        if (error) throw error;

        showToast('Medical record saved successfully!', 'success');
        closeMedicalRecordModal();
        
        // Reload medical history if patient details modal is open
        if (currentPatientId) {
          await loadMedicalHistory(currentPatientId);
        }

      } catch (error) {
        console.error('Error saving medical record:', error);
        showToast('Failed to save medical record', 'error');
      } finally {
        // Re-enable submit button
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Save Record';
      }
    });

    // ============================================
    // PRESCRIPTION FORM HANDLERS
    // ============================================

    // Close prescription modal
    document.getElementById('close-prescription-modal')?.addEventListener('click', () => {
      closePrescriptionModal();
    });

    document.getElementById('cancel-prescription-btn')?.addEventListener('click', () => {
      closePrescriptionModal();
    });

    function closePrescriptionModal() {
      const modal = document.getElementById('prescription-modal');
      const modalContent = document.getElementById('prescription-modal-content');
      
      if (modalContent) {
        modalContent.style.transform = 'scale(0.95)';
        modalContent.style.opacity = '0';
      }

      setTimeout(() => {
        modal?.classList.add('hidden');
      }, 300);
    }

    // Handle custom frequency toggle
    document.getElementById('rx-frequency')?.addEventListener('change', (e) => {
      const select = e.target as HTMLSelectElement;
      const customContainer = document.getElementById('custom-frequency-container');
      
      if (select.value === 'custom') {
        customContainer?.classList.remove('hidden');
      } else {
        customContainer?.classList.add('hidden');
      }
    });

    // Submit prescription form
    document.getElementById('prescription-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const form = e.target as HTMLFormElement;
      const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      
      // Disable submit button
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating...';

      try {
        const patientId = (document.getElementById('rx-patient-id') as HTMLInputElement).value;
        const medication = (document.getElementById('rx-medication') as HTMLInputElement).value;
        const dosage = (document.getElementById('rx-dosage') as HTMLInputElement).value;
        const frequencySelect = (document.getElementById('rx-frequency') as HTMLSelectElement).value;
        const frequencyCustom = (document.getElementById('rx-frequency-custom') as HTMLInputElement).value;
        const frequency = frequencySelect === 'custom' ? frequencyCustom : frequencySelect;
        const durationValue = (document.getElementById('rx-duration-value') as HTMLInputElement).value;
        const durationUnit = (document.getElementById('rx-duration-unit') as HTMLSelectElement).value;
        const duration = durationValue ? `${durationValue} ${durationUnit}` : null;
        const instructions = (document.getElementById('rx-instructions') as HTMLTextAreaElement).value;
        const status = (document.getElementById('rx-status') as HTMLSelectElement).value;
        const appointmentId = (document.getElementById('rx-appointment-id') as HTMLInputElement).value;
        const medicalHistoryId = (document.getElementById('rx-medical-history-id') as HTMLInputElement).value;

        const { data, error } = await supabase
          .from('prescriptions')
          .insert([{
            patient_id: patientId,
            medic_id: currentUser.id,
            appointment_id: appointmentId || null,
            medical_history_id: medicalHistoryId || null,
            medication_name: medication,
            dosage,
            frequency,
            duration,
            instructions: instructions || null,
            status
          }])
          .select()
          .single();

        if (error) throw error;

        showToast('Prescription created successfully!', 'success');
        closePrescriptionModal();
        
        // Reload prescriptions if patient details modal is open
        if (currentPatientId) {
          await loadPrescriptions(currentPatientId);
          // Update prescription count
          const { data: prescriptions } = await supabase
            .from('prescriptions')
            .select('id')
            .eq('patient_id', currentPatientId)
            .eq('medic_id', currentUser.id);
          
          document.getElementById('stat-prescriptions')!.textContent = (prescriptions?.length || 0).toString();
        }

      } catch (error) {
        console.error('Error creating prescription:', error);
        showToast('Failed to create prescription', 'error');
      } finally {
        // Re-enable submit button
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-prescription-bottle mr-2"></i>Create Prescription';
      }
    });

    // Make functions globally available for inline event handlers
    (window as any).showPatientDetails = showPatientDetails;
    (window as any).showReference = showReference;

    // Setup toggle switch functionality
    const todayBtn = document.getElementById('today-btn');
    const upcomingBtn = document.getElementById('upcoming-btn');
    const todaySchedule = document.getElementById('today-schedule');
    const upcomingSchedule = document.getElementById('upcoming-appointments');

    if (todayBtn && upcomingBtn && todaySchedule && upcomingSchedule) {
      // Show today by default
      todaySchedule.classList.remove('hidden');
      upcomingSchedule.classList.add('hidden');
      
      todayBtn.addEventListener('click', () => {
        todayBtn.classList.add('bg-gradient-to-r', 'from-green-600', 'to-teal-600', 'text-white', 'shadow-lg');
        todayBtn.classList.remove('text-gray-600', 'hover:bg-gray-100');
        upcomingBtn.classList.remove('bg-gradient-to-r', 'from-green-600', 'to-teal-600', 'text-white', 'shadow-lg');
        upcomingBtn.classList.add('text-gray-600', 'hover:bg-gray-100');
        
        todaySchedule.classList.remove('hidden');
        upcomingSchedule.classList.add('hidden');
      });
      
      upcomingBtn.addEventListener('click', () => {
        upcomingBtn.classList.add('bg-gradient-to-r', 'from-green-600', 'to-teal-600', 'text-white', 'shadow-lg');
        upcomingBtn.classList.remove('text-gray-600', 'hover:bg-gray-100');
        todayBtn.classList.remove('bg-gradient-to-r', 'from-green-600', 'to-teal-600', 'text-white', 'shadow-lg');
        todayBtn.classList.add('text-gray-600', 'hover:bg-gray-100');
        
        todaySchedule.classList.add('hidden');
        upcomingSchedule.classList.remove('hidden');
      });
    }

    // Load dashboard
    loadDashboardData();
  </script>

  <style>
    @keyframes progress {
      0% { width: 0%; }
      100% { width: 100%; }
    }

    @keyframes scaleIn {
      from {
        transform: scale(0.95);
        opacity: 0;
      }
      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    .animate-progress {
      animation: progress 1.5s ease-in-out infinite;
    }

    #dashboard-content {
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
    }

    #loading-screen {
      transition: opacity 0.3s ease-in-out;
    }

    #stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    }

    @media (min-width: 1024px) {
      #stats-grid {
        grid-template-columns: repeat(4, 1fr);
      }
    }

    /* Toast animations */
    #toast-container > div {
      animation: slideInRight 0.3s ease-out forwards;
    }

    /* Modal animations */
    #confirm-modal,
    #appointment-modal {
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
    }

    #confirm-modal-content,
    #appointment-modal-content {
      transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1), 
                  opacity 0.2s ease-out;
    }

    /* Filter button styles */
    .schedule-filter-btn.active {
      background: linear-gradient(to right, rgb(22, 163, 74), rgb(21, 128, 61));
      color: white;
    }

    .schedule-filter-btn:not(.active) {
      color: rgb(107, 114, 128);
    }

    .schedule-filter-btn:not(.active):hover {
      background-color: rgb(243, 244, 246);
    }

    /* Card hover effects */
    .appointment-card:hover,
    .patient-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .appointment-card,
    .patient-card {
      transition: all 0.2s ease;
    }

    /* Autocomplete styling */
    .autocomplete-item {
      position: relative;
      transition: all 0.15s ease;
    }

    .autocomplete-item:hover {
      background-color: rgb(249, 250, 251);
    }

    .autocomplete-item.bg-blue-50 {
      background-color: rgb(239, 246, 255);
      border-left: 3px solid rgb(59, 130, 246);
    }

    code {
      font-family: 'Courier New', monospace;
      font-size: 0.875em;
    }
  </style>
</MainLayout>
