---
import MainLayout from '../layouts/main.astro';
import Navbar from '../components/Navbar.astro';

// Pass placeholder user for navbar (will be updated client-side)
const placeholderUser = { email: 'loading@example.com' };
---

<MainLayout content={{ title: 'Dashboard - MediConnect' }}>
  <!-- Font Awesome for icons -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
  />
  
  <Navbar user={placeholderUser} />
  
  <div class="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5 flex items-center justify-center">
    <!-- Loading/Redirect Screen -->
    <div id="redirect-screen" class="text-center">
      <div class="relative">
        <div class="flex flex-col items-center space-y-6">
          <!-- Animated Logo -->
          <div class="relative">
            <div class="absolute inset-0 w-24 h-24 rounded-full bg-primary/20 animate-ping"></div>
            <div class="absolute inset-2 w-20 h-20 rounded-full bg-primary/30 animate-pulse"></div>
            <div class="relative w-24 h-24 bg-gradient-to-br from-primary to-blue-600 rounded-full flex items-center justify-center shadow-2xl">
              <i class="fas fa-heart text-white text-4xl animate-pulse"></i>
            </div>
          </div>
          
          <!-- Loading Text -->
          <div class="text-center">
            <h2 class="text-2xl font-bold text-foreground mb-2">MediConnect</h2>
            <p class="text-muted-foreground text-sm mb-4">Redirecting to your dashboard...</p>
            
            <!-- Progress Bar -->
            <div class="w-48 h-1.5 bg-gray-200 rounded-full overflow-hidden">
              <div class="h-full bg-gradient-to-r from-primary to-blue-600 rounded-full animate-progress"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Error Screen (hidden by default) -->
    <div id="error-screen" class="hidden text-center max-w-md mx-auto px-4">
      <i class="fas fa-exclamation-triangle text-red-500 text-5xl mb-4"></i>
      <h2 class="text-2xl font-bold text-foreground mb-2">Unable to Load Dashboard</h2>
      <p class="text-muted-foreground mb-6" id="error-message">
        Please sign in to access your dashboard.
      </p>
      <div class="flex gap-3 justify-center">
        <a href="/auth" class="px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
          Sign In
        </a>
        <button onclick="location.reload()" class="px-6 py-3 border border-border rounded-lg hover:bg-accent transition-colors">
          Retry
        </button>
      </div>
    </div>
  </div>

  <script>
    import { supabase } from '../lib/supabase';

    async function redirectToDashboard() {
      try {
        // Check authentication
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError || !user) {
          console.error('Not authenticated:', authError);
          showError('You need to sign in to access your dashboard.');
          return;
        }

        // Get user's profile to check role
        // Note: profiles.id is linked to auth.users.id
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('role, full_name')
          .eq('id', user.id)
          .single();

        if (profileError) {
          console.error('Error fetching profile:', profileError);
          showError('Unable to load your profile. Please try again.');
          return;
        }

        if (!profile) {
          showError('No profile found. Please contact support.');
          return;
        }

        // Update navbar before redirecting
        updateNavbar(user, profile);

        // Determine redirect path based on role
        let redirectPath = '/auth'; // Default fallback

        switch (profile.role) {
          case 'patient':
            redirectPath = '/patient/dashboard';
            break;
          
          case 'hospital_medic':
            redirectPath = '/medic/dashboard';
            break;
          
          case 'hospital_admin':
            redirectPath = '/admin/hospital/dashboard';
            break;
          
          case 'mediconnect_admin':
            redirectPath = '/admin/site/dashboard';
            break;
          
          case 'pharmacy_admin':
            redirectPath = '/pharmacy/admin/dashboard';
            break;
          
          case 'pharmacist':
            redirectPath = '/pharmacist/dashboard';
            break;
          
          default:
            // If no role assigned yet, show message
            if (!profile.role) {
              showError('Your account is pending role assignment. Please contact an administrator.');
              return;
            }
            showError(`Unknown role: ${profile.role}. Please contact support.`);
            return;
        }

        // Add a small delay so user sees the loading animation
        setTimeout(() => {
          window.location.href = redirectPath;
        }, 500);

      } catch (error) {
        console.error('Error in dashboard redirect:', error);
        showError('An unexpected error occurred. Please try again.');
      }
    }

    function updateNavbar(user: any, profile: any) {
      // Update all avatar elements with user's first letter
      const avatarElements = document.querySelectorAll('[class*="rounded-full"][class*="bg-gradient"]');
      const initial = profile?.full_name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase() || 'U';
      avatarElements.forEach(el => {
        if (el.textContent && el.textContent.trim().length <= 1) {
          el.textContent = initial;
        }
      });

      // Update dropdown content with full name and email
      const dropdownContainer = document.getElementById('user-dropdown');
      if (dropdownContainer) {
        const paragraphs = dropdownContainer.querySelectorAll('p');
        if (paragraphs[0]) paragraphs[0].textContent = profile?.full_name || user.user_metadata?.full_name || 'User';
        if (paragraphs[1]) paragraphs[1].textContent = user.email || '';
      }
    }

    function showError(message: string) {
      const redirectScreen = document.getElementById('redirect-screen');
      const errorScreen = document.getElementById('error-screen');
      const errorMessage = document.getElementById('error-message');
      
      if (redirectScreen) redirectScreen.classList.add('hidden');
      if (errorScreen) errorScreen.classList.remove('hidden');
      if (errorMessage) errorMessage.textContent = message;
    }

    // Start the redirect process when page loads
    redirectToDashboard();
  </script>

  <style>
    @keyframes progress {
      0% {
        width: 0%;
      }
      100% {
        width: 100%;
      }
    }

    .animate-progress {
      animation: progress 1.5s ease-in-out infinite;
    }
  </style>
</MainLayout>
