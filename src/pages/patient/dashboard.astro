---
import MainLayout from '../../layouts/main.astro';
import Navbar from '../../components/Navbar.astro';
import StatsCard from '../../components/dashboard/StatsCard.astro';
import AppointmentCard from '../../components/dashboard/AppointmentCard.astro';
import PrescriptionCard from '../../components/dashboard/PrescriptionCard.astro';
import QuickActions from '../../components/dashboard/QuickActions.astro';
import RecentActivity from '../../components/dashboard/RecentActivity.astro';

// Pass placeholder user for navbar (will be updated client-side)
const placeholderUser = { email: 'loading@example.com' };
---

<MainLayout content={{ title: 'Patient Dashboard - MediConnect' }}>
  <!-- Font Awesome for icons -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
  />
  
  <Navbar user={placeholderUser} />
  
  <div class="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
    <!-- Loading State -->
    <div id="loading-screen" class="flex items-center justify-center min-h-screen">
      <div class="relative">
        <div class="flex flex-col items-center space-y-6">
          <div class="relative">
            <div class="absolute inset-0 w-24 h-24 rounded-full bg-primary/20 animate-ping"></div>
            <div class="absolute inset-2 w-20 h-20 rounded-full bg-primary/30 animate-pulse"></div>
            <div class="relative w-24 h-24 bg-gradient-to-br from-primary to-blue-600 rounded-full flex items-center justify-center shadow-2xl">
              <i class="fas fa-heart text-white text-4xl animate-pulse"></i>
            </div>
          </div>
          <div class="text-center">
            <h2 class="text-2xl font-bold text-foreground mb-2">MediConnect</h2>
            <p class="text-muted-foreground text-sm mb-4">Loading your dashboard...</p>
            <div class="w-48 h-1.5 bg-gray-200 rounded-full overflow-hidden">
              <div class="h-full bg-gradient-to-r from-primary to-blue-600 rounded-full animate-progress"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Dashboard Content -->
    <main id="dashboard-content" class="hidden container mx-auto px-4 py-8">
      <!-- Welcome Section -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-3xl font-bold mb-2 text-foreground">
              Welcome back, <span id="patient-name">Patient</span>!
            </h2>
            <p class="text-muted-foreground flex items-center gap-2">
              <i class="fas fa-clock"></i>
              <span id="current-date"></span>
            </p>
          </div>
          <button
            id="request-appointment-btn"
            class="px-4 py-2.5 bg-gradient-to-r from-primary to-blue-600 hover:from-primary/90 hover:to-blue-700 text-white rounded-lg shadow-lg hover:shadow-xl transition-all transform hover:scale-105"
          >
            <i class="fas fa-calendar-plus mr-2"></i>
            Request Appointment
          </button>
        </div>
      </div>

      <!-- Stats Grid - 4 cards in a row -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6" id="stats-grid">
        <div class="stats-card">
          <StatsCard 
            label="Upcoming Appointments" 
            value="0" 
            icon="fas fa-calendar-alt" 
            color="text-blue-500"
            delay={0}
          />
        </div>
        <div class="stats-card">
          <StatsCard 
            label="Pending Requests" 
            value="0" 
            icon="fas fa-clock" 
            color="text-orange-500"
            delay={100}
          />
        </div>
        <div class="stats-card">
          <StatsCard 
            label="Active Prescriptions" 
            value="0" 
            icon="fas fa-pills" 
            color="text-green-500"
            delay={200}
          />
        </div>
        <div class="stats-card">
          <StatsCard 
            label="Medical Records" 
            value="0" 
            icon="fas fa-file-medical" 
            color="text-purple-500"
            delay={300}
          />
        </div>
      </div>

      <!-- Upcoming Appointments Section (Combined Requests & Scheduled) -->
      <div class="mb-6 bg-card rounded-xl shadow-lg border border-border overflow-hidden">
        <div class="p-6 border-b border-border bg-gradient-to-r from-blue-50 to-purple-50">
          <h3 class="text-xl font-bold text-foreground flex items-center gap-2">
            <i class="fas fa-calendar-alt text-blue-600"></i>
            Upcoming Appointments
          </h3>
          <p class="text-sm text-muted-foreground mt-1">View your scheduled appointments and pending requests</p>
        </div>
        <div id="upcoming-appointments-container" class="p-6">
          <!-- Combined appointments and requests will be loaded here -->
        </div>
      </div>

      <!-- Main Content Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        <!-- Quick Actions -->
        <div class="lg:col-span-1">
          <QuickActions delay={500} />
        </div>
        
        <!-- Medical Records / Other Info (2 columns) -->
        <div class="lg:col-span-2">
          <div class="bg-card rounded-xl shadow-lg border border-border overflow-hidden">
            <div class="p-6 border-b border-border bg-gradient-to-r from-purple-50 to-pink-50">
              <h3 class="text-xl font-bold text-foreground flex items-center gap-2">
                <i class="fas fa-file-medical text-purple-600"></i>
                Medical Records
              </h3>
              <p class="text-sm text-muted-foreground mt-1">Your health records and visit history</p>
            </div>
            <div class="p-6">
              <div class="text-center py-12 text-muted-foreground">
                <i class="fas fa-folder-open text-5xl mb-4 opacity-50"></i>
                <p class="text-lg font-medium mb-2">No medical records yet</p>
                <p class="text-sm">Records from your appointments will appear here</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Bottom Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Prescriptions -->
        <PrescriptionCard delay={600} />
        
        <!-- Recent Activity -->
        <RecentActivity delay={700} />
      </div>
    </main>
  </div>

  <!-- Custom Toast Notifications -->
  <div id="toast-container" class="fixed top-4 right-4 z-[100] space-y-3 pointer-events-none">
    <!-- Toasts will be dynamically inserted here -->
  </div>

  <!-- Custom Confirmation Modal -->
  <div id="confirm-modal" class="hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-[90] p-4" style="display: none; align-items: center; justify-content: center;">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full transform transition-all scale-95 opacity-0" id="confirm-modal-content">
      <div class="p-6">
        <div class="flex items-start gap-4">
          <div id="confirm-icon" class="flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center">
            <i class="fas fa-question-circle text-2xl"></i>
          </div>
          <div class="flex-1">
            <h3 id="confirm-title" class="text-xl font-bold text-gray-900 mb-2"></h3>
            <p id="confirm-message" class="text-gray-600 text-sm leading-relaxed whitespace-pre-line"></p>
          </div>
        </div>
      </div>
      <div class="px-6 pb-6 flex gap-3">
        <button 
          id="confirm-cancel-btn"
          class="flex-1 px-4 py-2.5 rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 font-medium text-gray-700 transition-all"
        >
          Cancel
        </button>
        <button 
          id="confirm-ok-btn"
          class="flex-1 px-4 py-2.5 rounded-lg font-medium text-white transition-all shadow-lg hover:shadow-xl transform hover:scale-105"
        >
          Confirm
        </button>
      </div>
    </div>
  </div>

  <!-- Request Appointment Modal -->
  <div id="request-appointment-modal" class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50 p-4" style="display: none; align-items: center; justify-content: center;">
    <div id="request-modal-content" class="bg-card rounded-xl shadow-2xl max-w-2xl w-full border border-border transform transition-all scale-95 opacity-0 max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-border bg-gradient-to-r from-primary/10 to-blue-500/10 sticky top-0 z-10">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-foreground">Request New Appointment</h3>
          <button id="close-request-modal" class="text-muted-foreground hover:text-foreground transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
      </div>
      
      <form id="request-appointment-form" class="p-6 space-y-4">
        <!-- Step 1: Select Hospital -->
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-hospital mr-2 text-primary"></i>
            Select Hospital *
          </label>
          <select 
            id="hospital-select" 
            required
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          >
            <option value="">-- Choose a hospital --</option>
          </select>
        </div>

        <!-- Step 2: Select Department (shows after hospital selected) -->
        <div id="department-selection" class="hidden">
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-stethoscope mr-2 text-blue-600"></i>
            Medical Department *
          </label>
          <input 
            type="text"
            id="department-select"
            list="patient-departments-list"
            required
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Type a department name (e.g., Cardiology, Pediatrics)"
          />
          <datalist id="patient-departments-list">
            <!-- Will be populated dynamically from hospital's available departments -->
          </datalist>
          <p class="text-xs text-muted-foreground mt-1">
            <i class="fas fa-info-circle mr-1"></i>
            Available departments will appear based on hospital doctors
          </p>
        </div>

        <!-- Reason for Visit -->
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-notes-medical mr-2 text-green-600"></i>
            Reason for Visit *
          </label>
          <textarea 
            id="reason-input"
            required
            rows="4"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none"
            placeholder="Please describe your symptoms or reason for the appointment..."
          ></textarea>
        </div>

        <!-- Preferred Date -->
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-calendar mr-2 text-purple-600"></i>
            Preferred Date (Optional)
          </label>
          <input 
            type="date" 
            id="preferred-date-input"
            min=""
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <!-- Preferred Time Slot -->
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">
            <i class="fas fa-clock mr-2 text-orange-600"></i>
            Preferred Time of Day (Optional)
          </label>
          <select 
            id="time-slot-select"
            class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          >
            <option value="">-- No preference --</option>
            <option value="morning">Morning (8:00 AM - 12:00 PM)</option>
            <option value="afternoon">Afternoon (12:00 PM - 5:00 PM)</option>
            <option value="evening">Evening (5:00 PM - 8:00 PM)</option>
          </select>
        </div>

        <!-- Submit Button -->
        <div class="flex gap-3 pt-4">
          <button 
            type="button"
            id="cancel-request-btn"
            class="flex-1 px-4 py-2.5 border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 rounded-lg font-medium text-gray-700 transition-all"
          >
            Cancel
          </button>
          <button 
            type="submit"
            class="flex-1 px-4 py-2.5 bg-gradient-to-r from-primary to-blue-600 hover:from-primary/90 hover:to-blue-700 text-white rounded-lg transition-all shadow-lg hover:shadow-xl font-medium"
          >
            <i class="fas fa-paper-plane mr-2"></i>
            Submit Request
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    import { supabase } from '../../lib/supabase';
    import type { Appointment, Prescription, MedicalRecord } from '../../lib/types';

    let currentUserId: string | null = null;
    let appointmentRequests: any[] = [];

    // Custom Toast Notification System
    type ToastType = 'success' | 'error' | 'warning' | 'info';
    
    function showToast(message: string, type: ToastType = 'info', duration: number = 4000) {
      const container = document.getElementById('toast-container');
      if (!container) return;

      const toast = document.createElement('div');
      toast.className = 'pointer-events-auto transform translate-x-full transition-all duration-300 ease-out';
      
      const icons = {
        success: { icon: 'fa-check-circle', bgColor: 'bg-green-500', textColor: 'text-green-50' },
        error: { icon: 'fa-times-circle', bgColor: 'bg-red-500', textColor: 'text-red-50' },
        warning: { icon: 'fa-exclamation-triangle', bgColor: 'bg-orange-500', textColor: 'text-orange-50' },
        info: { icon: 'fa-info-circle', bgColor: 'bg-blue-500', textColor: 'text-blue-50' }
      };

      const config = icons[type];
      
      toast.innerHTML = `
        <div class="flex items-start gap-3 ${config.bgColor} ${config.textColor} px-5 py-4 rounded-xl shadow-2xl min-w-[300px] max-w-md backdrop-blur-sm border border-white/20">
          <i class="fas ${config.icon} text-xl mt-0.5 flex-shrink-0"></i>
          <p class="flex-1 font-medium leading-relaxed">${message}</p>
          <button onclick="this.closest('[class*=translate]').remove()" class="ml-2 hover:opacity-80 transition-opacity flex-shrink-0">
            <i class="fas fa-times text-sm"></i>
          </button>
        </div>
      `;
      
      container.appendChild(toast);
      
      setTimeout(() => {
        toast.classList.remove('translate-x-full');
        toast.classList.add('translate-x-0');
      }, 10);
      
      setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => toast.remove(), 300);
      }, duration);
    }

    // Custom Confirmation Dialog
    function showConfirm(
      title: string, 
      message: string, 
      options: {
        type?: 'danger' | 'warning' | 'info',
        confirmText?: string,
        cancelText?: string
      } = {}
    ): Promise<boolean> {
      return new Promise((resolve) => {
        const modal = document.getElementById('confirm-modal');
        const modalContent = document.getElementById('confirm-modal-content');
        const iconEl = document.getElementById('confirm-icon');
        const titleEl = document.getElementById('confirm-title');
        const messageEl = document.getElementById('confirm-message');
        const confirmBtn = document.getElementById('confirm-ok-btn');
        const cancelBtn = document.getElementById('confirm-cancel-btn');
        
        if (!modal || !modalContent || !iconEl || !titleEl || !messageEl || !confirmBtn || !cancelBtn) {
          resolve(false);
          return;
        }

        const type = options.type || 'warning';
        const configs = {
          danger: { 
            icon: 'fa-exclamation-triangle', 
            iconBg: 'bg-red-100 text-red-600',
            btnBg: 'bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800'
          },
          warning: { 
            icon: 'fa-exclamation-circle', 
            iconBg: 'bg-orange-100 text-orange-600',
            btnBg: 'bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800'
          },
          info: { 
            icon: 'fa-info-circle', 
            iconBg: 'bg-blue-100 text-blue-600',
            btnBg: 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800'
          }
        };

        const config = configs[type];
        
        iconEl.className = `flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${config.iconBg}`;
        iconEl.querySelector('i')!.className = `fas ${config.icon} text-2xl`;
        titleEl.textContent = title;
        messageEl.textContent = message;
        confirmBtn.textContent = options.confirmText || 'Confirm';
        confirmBtn.className = `flex-1 px-4 py-2.5 rounded-lg font-medium text-white transition-all shadow-lg hover:shadow-xl transform hover:scale-105 ${config.btnBg}`;
        cancelBtn.textContent = options.cancelText || 'Cancel';
        
        modal.style.display = 'flex';
        modal.classList.remove('hidden');
        
        setTimeout(() => {
          modalContent.classList.remove('scale-95', 'opacity-0');
          modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);
        
        const closeModal = (result: boolean) => {
          modalContent.classList.add('scale-95', 'opacity-0');
          modalContent.classList.remove('scale-100', 'opacity-100');
          
          setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.add('hidden');
            resolve(result);
          }, 200);
        };
        
        const handleConfirm = () => {
          confirmBtn.removeEventListener('click', handleConfirm);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(true);
        };
        
        const handleCancel = () => {
          confirmBtn.removeEventListener('click', handleConfirm);
          cancelBtn.removeEventListener('click', handleCancel);
          closeModal(false);
        };
        
        confirmBtn.addEventListener('click', handleConfirm);
        cancelBtn.addEventListener('click', handleCancel);
      });
    }

    // Set current date
    const dateElement = document.getElementById('current-date');
    if (dateElement) {
      const now = new Date();
      dateElement.textContent = now.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }

    // Function to update navbar with user data
    function updateNavbar(user: any, profile: any) {
      // Update all avatar elements with user's first letter
      const avatarElements = document.querySelectorAll('[class*="rounded-full"][class*="bg-gradient"]');
      const initial = profile?.full_name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase() || 'U';
      avatarElements.forEach(el => {
        if (el.textContent && el.textContent.trim().length <= 1) {
          el.textContent = initial;
        }
      });

      // Update dropdown content with full name and email
      const dropdownContainer = document.getElementById('user-dropdown');
      if (dropdownContainer) {
        const paragraphs = dropdownContainer.querySelectorAll('p');
        if (paragraphs[0]) paragraphs[0].textContent = profile?.full_name || user.user_metadata?.full_name || 'User';
        if (paragraphs[1]) paragraphs[1].textContent = user.email || '';
      }

      // Update mobile menu if it exists
      const mobileMenu = document.getElementById('mobile-menu');
      if (mobileMenu) {
        const userInfo = mobileMenu.querySelector('.user-info-mobile');
        if (userInfo) {
          userInfo.textContent = profile?.full_name || user.user_metadata?.full_name || 'User';
        }
      }
    }

    async function loadDashboardData() {
      try {
        // Check authentication
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError || !user) {
          console.error('Not authenticated:', authError);
          window.location.href = '/auth';
          return;
        }

        // Get user profile
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (profileError) {
          console.error('Error fetching profile:', profileError);
          // Continue even if profile fetch fails
        }

        // Update patient name
        const nameElement = document.getElementById('patient-name');
        if (nameElement && profile) {
          nameElement.textContent = profile.full_name || user.email?.split('@')[0] || 'Patient';
        }

        // Update navbar with user data
        updateNavbar(user, profile);

        // Fetch all data in parallel for better performance
        const userId = profile?.id || user.id;
        currentUserId = userId;

        // Check if tables exist before querying
        let appointments: any[] = [];
        let prescriptions: any[] = [];
        let recordsCount = 0;

        try {
          const [appointmentsResult, prescriptionsResult, recordsResult, requestsResult] = await Promise.all([
            // Fetch all appointments with medic and hospital info (filter by date in JS if needed)
            supabase
              .from('appointments')
              .select(`
                *,
                medic:profiles!appointments_medic_id_fkey(id, full_name, department),
                hospital:hospitals(id, name)
              `)
              .eq('patient_id', userId)
              .order('appointment_date', { ascending: true }),
            
            // Fetch prescriptions
            supabase
              .from('prescriptions')
              .select(`
                *,
                medic:profiles!prescriptions_medic_id_fkey(id, full_name)
              `)
              .eq('patient_id', userId)
              .eq('status', 'active')
              .order('prescribed_date', { ascending: false })
              .limit(5),
            
            // Fetch medical history count (not medical_records)
            supabase
              .from('medical_history')
              .select('*', { count: 'exact', head: true })
              .eq('patient_id', userId),

            // Fetch appointment requests with complete info
            supabase
              .from('appointment_requests')
              .select(`
                *,
                hospital:hospitals(id, name),
                medic:profiles!appointment_requests_medic_id_fkey(id, full_name, department),
                appointment:appointments(id, appointment_date, status)
              `)
              .eq('patient_id', userId)
              .order('created_at', { ascending: false })
          ]);

          appointments = appointmentsResult.data || [];
          prescriptions = prescriptionsResult.data || [];
          recordsCount = recordsResult.count || 0;
          appointmentRequests = requestsResult.data || [];

          if (appointmentsResult.error && appointmentsResult.error.code !== 'PGRST116') {
            console.error('Error fetching appointments:', appointmentsResult.error);
          }

          if (prescriptionsResult.error && prescriptionsResult.error.code !== 'PGRST116') {
            console.error('Error fetching prescriptions:', prescriptionsResult.error);
          }

          if (recordsResult.error && recordsResult.error.code !== 'PGRST116') {
            console.error('Error fetching records count:', recordsResult.error);
          }

          if (requestsResult.error && requestsResult.error.code !== 'PGRST116') {
            console.error('Error fetching appointment requests:', requestsResult.error);
          }
        } catch (error) {
          console.error('Error fetching data:', error);
          // Continue with empty data - tables might not exist yet
        }

        // Update stats
        // Filter pending requests to only include those without appointments and not cancelled
        const pendingRequests = appointmentRequests.filter(r => 
          r.status === 'pending' && !r.appointment_id
        ).length;
        
        // Count all scheduled appointments
        const scheduledAppointments = appointments.filter(apt => 
          apt.status === 'scheduled'
        );
        
        updateStats(
          scheduledAppointments.length,
          pendingRequests,
          prescriptions?.length || 0,
          recordsCount || 0
        );

        // Update combined upcoming appointments (requests + scheduled appointments)
        updateUpcomingAppointments(appointmentRequests, appointments || []);

        // Update prescriptions list
        if (prescriptions && prescriptions.length > 0) {
          updatePrescriptions(prescriptions);
        }

        // Fetch recent activity (appointments + prescriptions as activities)
        const recentActivities: any[] = [];
        
        if (appointments) {
          appointments.slice(0, 2).forEach((apt: any) => {
            recentActivities.push({
              id: apt.id,
              type: 'appointment',
              title: `Appointment with ${apt.doctor?.full_name || 'Doctor'}`,
              created_at: apt.created_at
            });
          });
        }

        if (prescriptions) {
          prescriptions.slice(0, 2).forEach((rx: any) => {
            recentActivities.push({
              id: rx.id,
              type: 'prescription',
              title: `New prescription: ${rx.medication_name}`,
              created_at: rx.created_at
            });
          });
        }

        // Sort by date and update
        recentActivities.sort((a: any, b: any) => 
          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        );

        if (recentActivities.length > 0) {
          updateRecentActivity(recentActivities.slice(0, 5));
        }

        // Show dashboard with fade-in effect
        const loading = document.getElementById('loading-screen');
        const content = document.getElementById('dashboard-content');
        
        if (loading) {
          loading.style.opacity = '0';
          setTimeout(() => {
            loading.classList.add('hidden');
          }, 300);
        }
        if (content) {
          content.classList.remove('hidden');
          setTimeout(() => {
            content.style.opacity = '1';
          }, 100);
        }

      } catch (error) {
        console.error('Error loading dashboard:', error);
        
        // Show error message
        const loading = document.getElementById('loading-screen');
        if (loading) {
          loading.innerHTML = `
            <div class="text-center">
              <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-4"></i>
              <h2 class="text-xl font-bold text-foreground mb-2">Error Loading Dashboard</h2>
              <p class="text-muted-foreground mb-4">Failed to load dashboard data.</p>
              <button onclick="location.reload()" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90">
                Retry
              </button>
            </div>
          `;
        }
      }
    }

    function updateStats(appointments: number, pendingRequests: number, prescriptions: number, records: number) {
      // Select the stat card containers within the stats grid
      const statsGrid = document.getElementById('stats-grid');
      if (!statsGrid) return;

      // Get all stat cards (the actual StatsCard components)
      const statCards = statsGrid.querySelectorAll('.stats-card');
      
      // Update Upcoming Appointments (first card)
      if (statCards[0]) {
        const valueEl = statCards[0].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = appointments.toString();
      }
      
      // Update Pending Requests (second card)
      if (statCards[1]) {
        const valueEl = statCards[1].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = pendingRequests.toString();
      }
      
      // Update Active Prescriptions (third card)
      if (statCards[2]) {
        const valueEl = statCards[2].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = prescriptions.toString();
      }
      
      // Update Medical Records (fourth card)
      if (statCards[3]) {
        const valueEl = statCards[3].querySelector('.text-3xl');
        if (valueEl) valueEl.textContent = records.toString();
      }
    }

    function updatePrescriptions(prescriptions: any[]) {
      const container = document.getElementById('prescriptions-container');
      if (!container) return;

      container.innerHTML = prescriptions.map((rx) => {
        const date = new Date(rx.prescribed_date);
        const dateStr = date.toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric' 
        });

        const statusClass = rx.status === 'active'
          ? 'bg-green-500/10 text-green-600 border border-green-500/20'
          : 'bg-gray-500/10 text-gray-600 border border-gray-500/20';

        return `
          <div class="p-4 rounded-lg border border-border hover:bg-accent/50 transition-colors cursor-pointer">
            <div class="flex items-start justify-between mb-2">
              <div>
                <p class="font-semibold text-foreground">${rx.medication_name}</p>
                <p class="text-sm text-muted-foreground">Prescribed by ${rx.medic?.full_name || 'Dr. Unknown'}</p>
              </div>
              <span class="px-2 py-1 text-xs rounded-full ${statusClass}">
                ${rx.status}
              </span>
            </div>
            <div class="flex items-center justify-between text-sm">
              <span class="text-muted-foreground">${rx.dosage} - ${rx.frequency}</span>
              <span class="text-muted-foreground">${dateStr}</span>
            </div>
            ${rx.instructions ? `
              <div class="mt-2 text-sm text-muted-foreground">
                <i class="fas fa-info-circle mr-1"></i>${rx.instructions}
              </div>
            ` : ''}
          </div>
        `;
      }).join('');
    }

    function updateRecentActivity(activities: any[]) {
      const container = document.getElementById('activity-container');
      if (!container) return;

      container.innerHTML = activities.map((activity) => {
        const date = new Date(activity.created_at);
        const now = new Date();
        const diff = Math.floor((now.getTime() - date.getTime()) / 1000);
        
        let timeAgo;
        if (diff < 60) timeAgo = 'Just now';
        else if (diff < 3600) timeAgo = `${Math.floor(diff / 60)} minutes ago`;
        else if (diff < 86400) timeAgo = `${Math.floor(diff / 3600)} hours ago`;
        else if (diff < 604800) timeAgo = `${Math.floor(diff / 86400)} days ago`;
        else timeAgo = date.toLocaleDateString();

        return `
          <div class="flex items-start gap-3 p-3 rounded-lg hover:bg-accent/50 transition-colors cursor-pointer">
            <div class="w-2 h-2 rounded-full bg-primary mt-2 flex-shrink-0"></div>
            <div class="flex-1">
              <p class="font-medium text-sm text-foreground">${activity.title}</p>
              <p class="text-xs text-muted-foreground">${timeAgo}</p>
            </div>
          </div>
        `;
      }).join('');
    }

    // Combined function to display both appointments and requests
    function updateUpcomingAppointments(requests: any[], appointments: any[]) {
      const container = document.getElementById('upcoming-appointments-container');
      if (!container) return;

      // Combine and sort by date
      const combined: any[] = [];

      // Filter out requests that already have a scheduled appointment
      // Only show requests that are truly pending (no appointment_id)
      // Also exclude cancelled requests to keep the list clean
      const pendingRequests = requests.filter(request => {
        // Don't show if appointment has been created from this request
        if (request.appointment_id) return false;
        // Don't show if request was cancelled
        if (request.status === 'cancelled') return false;
        return true;
      });

      // Add pending requests (those without scheduled appointments)
      pendingRequests.forEach(request => {
        combined.push({
          type: 'request',
          data: request,
          date: request.preferred_date || request.created_at,
          sortDate: new Date(request.preferred_date || request.created_at)
        });
      });

      // Add scheduled appointments
      appointments.forEach(apt => {
        combined.push({
          type: 'appointment',
          data: apt,
          date: apt.appointment_date,
          sortDate: new Date(apt.appointment_date)
        });
      });

      // Sort by date (earliest first)
      combined.sort((a, b) => a.sortDate.getTime() - b.sortDate.getTime());

      if (combined.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-calendar-plus text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No upcoming appointments</p>
            <p class="text-sm">Click "Request Appointment" to schedule your first visit</p>
          </div>
        `;
        return;
      }

      container.innerHTML = combined.map((item) => {
        if (item.type === 'request') {
          return renderRequestCard(item.data);
        } else {
          return renderAppointmentCard(item.data);
        }
      }).join('');

      // Attach cancel button listeners
      document.querySelectorAll('.cancel-request-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const requestId = (e.currentTarget as HTMLElement).dataset.requestId;
          if (requestId) {
            const confirmed = await showConfirm(
              'Cancel Request',
              'Are you sure you want to cancel this appointment request?',
              { type: 'danger', confirmText: 'Yes, Cancel', cancelText: 'Keep Request' }
            );
            if (confirmed) {
              await cancelAppointmentRequest(requestId);
            }
          }
        });
      });
    }

    function renderRequestCard(request: any) {
      const statusConfig: Record<string, any> = {
        pending: { bg: 'bg-orange-100', text: 'text-orange-700', icon: 'fa-clock', label: 'Pending Review' },
        approved: { bg: 'bg-green-100', text: 'text-green-700', icon: 'fa-check-circle', label: 'Approved' },
        rejected: { bg: 'bg-red-100', text: 'text-red-700', icon: 'fa-times-circle', label: 'Rejected' },
        cancelled: { bg: 'bg-gray-100', text: 'text-gray-700', icon: 'fa-ban', label: 'Cancelled' }
      };

      const config = statusConfig[request.status] || statusConfig.pending;
      const createdDate = new Date(request.created_at).toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });

      // Check if appointment has been created from this request
      const hasScheduledAppointment = request.appointment && request.appointment.id;
      const appointmentStatus = request.appointment?.status || '';

      return `
        <div class="p-4 rounded-lg border-2 border-dashed border-orange-200 bg-orange-50/30 hover:bg-orange-50/50 transition-colors mb-3">
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-2">
                <i class="fas fa-hospital text-primary"></i>
                <p class="font-semibold text-foreground">${request.hospital?.name || 'Hospital'}</p>
                <span class="text-xs text-orange-600 font-medium px-2 py-0.5 bg-orange-100 rounded">REQUEST</span>
              </div>
              ${request.department ? `
                <p class="text-sm text-blue-600 ml-6 font-medium">
                  <i class="fas fa-stethoscope mr-1"></i>
                  ${request.department}
                </p>
              ` : ''}
              ${hasScheduledAppointment ? `
                <p class="text-sm text-green-600 ml-6 font-semibold">
                  <i class="fas fa-check-circle mr-1"></i>
                  Appointment Scheduled
                </p>
              ` : request.medic ? `
                <p class="text-sm text-muted-foreground ml-6">
                  <i class="fas fa-user-md mr-1"></i>
                  Assigned to: Dr. ${request.medic.full_name}${request.medic.department ? ` (${request.medic.department})` : ''}
                </p>
              ` : `
                <p class="text-sm text-muted-foreground ml-6">
                  <i class="fas fa-users-medical mr-1"></i>
                  Awaiting doctor assignment
                </p>
              `}
            </div>
            <span class="px-3 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text} flex items-center gap-1">
              <i class="fas ${config.icon}"></i>
              ${config.label}
            </span>
          </div>
          
          <div class="bg-white rounded p-3 mb-2">
            <p class="text-sm text-foreground"><strong>Reason:</strong> ${request.reason}</p>
          </div>

          ${hasScheduledAppointment ? `
            <div class="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
              <p class="text-sm font-medium text-green-800 mb-2">
                <i class="fas fa-calendar-check mr-2"></i>
                Appointment Details:
              </p>
              <div class="text-sm text-green-700 space-y-1">
                <p><strong>Date:</strong> ${new Date(request.appointment.appointment_date).toLocaleDateString('en-US', { 
                  weekday: 'long',
                  month: 'long', 
                  day: 'numeric',
                  year: 'numeric'
                })}</p>
                <p><strong>Time:</strong> ${new Date(request.appointment.appointment_date).toLocaleTimeString('en-US', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}</p>
                <p><strong>Status:</strong> <span class="capitalize">${appointmentStatus}</span></p>
              </div>
            </div>
          ` : ''}

          <div class="flex items-center justify-between text-xs text-muted-foreground mt-3">
            <span>
              <i class="fas fa-calendar mr-1"></i>
              Requested on ${createdDate}
            </span>
            ${request.preferred_date ? `
              <span>
                <i class="fas fa-clock mr-1"></i>
                Preferred: ${new Date(request.preferred_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
              </span>
            ` : ''}
          </div>

          ${request.status === 'rejected' && request.rejection_reason ? `
            <div class="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
              <p class="text-sm font-medium text-red-800 mb-1">
                <i class="fas fa-info-circle mr-2"></i>
                Reason for rejection:
              </p>
              <p class="text-sm text-red-700">${request.rejection_reason}</p>
            </div>
          ` : ''}

          ${request.status === 'pending' && !hasScheduledAppointment ? `
            <button 
              class="cancel-request-btn mt-3 w-full px-4 py-2 text-sm border border-red-200 text-red-600 rounded-lg hover:bg-red-50 transition-colors"
              data-request-id="${request.id}"
            >
              <i class="fas fa-times-circle mr-2"></i>
              Cancel Request
            </button>
          ` : ''}
        </div>
      `;
    }

    function renderAppointmentCard(appointment: any) {
      const statusConfig: Record<string, any> = {
        scheduled: { bg: 'bg-blue-100', text: 'text-blue-700', icon: 'fa-calendar-check', label: 'Scheduled' },
        completed: { bg: 'bg-green-100', text: 'text-green-700', icon: 'fa-check-circle', label: 'Completed' },
        cancelled: { bg: 'bg-red-100', text: 'text-red-700', icon: 'fa-times-circle', label: 'Cancelled' },
        no_show: { bg: 'bg-gray-100', text: 'text-gray-700', icon: 'fa-user-slash', label: 'No Show' }
      };

      const config = statusConfig[appointment.status] || statusConfig.scheduled;
      const appointmentDate = new Date(appointment.appointment_date);
      const formattedDate = appointmentDate.toLocaleDateString('en-US', { 
        weekday: 'long',
        month: 'short', 
        day: 'numeric',
        year: 'numeric'
      });
      const formattedTime = appointmentDate.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit'
      });

      const medicName = appointment.medic?.full_name || 'Doctor';
      const medicDepartment = appointment.medic?.department || '';
      const hospitalName = appointment.hospital?.name || 'Hospital';
      const initial = medicName.charAt(0).toUpperCase();

      return `
        <div class="p-4 rounded-lg border-2 border-blue-200 bg-blue-50/30 hover:bg-blue-50/50 transition-colors mb-3">
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-2">
                <div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-semibold text-sm">
                  ${initial}
                </div>
                <div>
                  <p class="font-semibold text-foreground">Dr. ${medicName}</p>
                  <p class="text-xs text-muted-foreground">${hospitalName}</p>
                  ${medicDepartment ? `<p class="text-xs text-blue-600 font-medium">${medicDepartment}</p>` : ''}
                </div>
              </div>
            </div>
            <span class="px-3 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text} flex items-center gap-1">
              <i class="fas ${config.icon}"></i>
              ${config.label}
            </span>
          </div>

          <div class="bg-white rounded p-3 mb-2">
            <div class="grid grid-cols-2 gap-3">
              <div>
                <p class="text-xs text-muted-foreground mb-1">Date</p>
                <p class="text-sm font-medium text-foreground">
                  <i class="fas fa-calendar mr-1 text-blue-600"></i>
                  ${formattedDate}
                </p>
              </div>
              <div>
                <p class="text-xs text-muted-foreground mb-1">Time</p>
                <p class="text-sm font-medium text-foreground">
                  <i class="fas fa-clock mr-1 text-blue-600"></i>
                  ${formattedTime}
                </p>
              </div>
            </div>
            ${appointment.reason ? `
              <div class="mt-2 pt-2 border-t border-gray-200">
                <p class="text-xs text-muted-foreground mb-1">Reason</p>
                <p class="text-sm text-foreground">${appointment.reason}</p>
              </div>
            ` : ''}
            ${appointment.severity && appointment.severity !== 'normal' ? `
              <div class="mt-2 pt-2 border-t border-gray-200">
                <p class="text-xs text-muted-foreground mb-1">Priority</p>
                <span class="inline-block px-2 py-1 text-xs rounded-full ${
                  appointment.severity === 'urgent' ? 'bg-red-100 text-red-700 border border-red-300' :
                  appointment.severity === 'high' ? 'bg-orange-100 text-orange-700 border border-orange-300' :
                  'bg-gray-100 text-gray-700 border border-gray-300'
                }">
                  ${appointment.severity.toUpperCase()}
                </span>
              </div>
            ` : ''}
            ${appointment.notes ? `
              <div class="mt-2 pt-2 border-t border-gray-200">
                <p class="text-xs text-muted-foreground mb-1">Notes</p>
                <p class="text-sm text-foreground">${appointment.notes}</p>
              </div>
            ` : ''}
          </div>
        </div>
      `;
    }

    function updateAppointmentRequests(requests: any[]) {
      const container = document.getElementById('appointment-requests-container');
      if (!container) return;

      if (requests.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-calendar-plus text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No appointment requests yet</p>
            <p class="text-sm">Click "Request Appointment" to get started</p>
          </div>
        `;
        return;
      }

      container.innerHTML = requests.map((request) => {
        const statusConfig: Record<string, any> = {
          pending: { bg: 'bg-orange-100', text: 'text-orange-700', icon: 'fa-clock', label: 'Pending Review' },
          approved: { bg: 'bg-green-100', text: 'text-green-700', icon: 'fa-check-circle', label: 'Approved' },
          rejected: { bg: 'bg-red-100', text: 'text-red-700', icon: 'fa-times-circle', label: 'Rejected' },
          cancelled: { bg: 'bg-gray-100', text: 'text-gray-700', icon: 'fa-ban', label: 'Cancelled' }
        };

        const config = statusConfig[request.status] || statusConfig.pending;
        const createdDate = new Date(request.created_at).toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric', 
          year: 'numeric' 
        });

        return `
          <div class="p-4 rounded-lg border border-border hover:bg-accent/30 transition-colors mb-3">
            <div class="flex items-start justify-between mb-3">
              <div class="flex-1">
                <div class="flex items-center gap-2 mb-2">
                  <i class="fas fa-hospital text-primary"></i>
                  <p class="font-semibold text-foreground">${request.hospital?.name || 'Hospital'}</p>
                </div>
                ${request.department ? `
                  <p class="text-sm text-blue-600 ml-6 font-medium">
                    <i class="fas fa-stethoscope mr-1"></i>
                    ${request.department}
                  </p>
                ` : ''}
                ${request.medic ? `
                  <p class="text-sm text-muted-foreground ml-6">
                    <i class="fas fa-user-md mr-1"></i>
                    Assigned to: Dr. ${request.medic.full_name}
                  </p>
                ` : `
                  <p class="text-sm text-muted-foreground ml-6">
                    <i class="fas fa-users-medical mr-1"></i>
                    Awaiting doctor assignment
                  </p>
                `}
              </div>
              <span class="px-3 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text} flex items-center gap-1">
                <i class="fas ${config.icon}"></i>
                ${config.label}
              </span>
            </div>
            
            <div class="bg-accent/50 rounded p-3 mb-2">
              <p class="text-sm text-foreground"><strong>Reason:</strong> ${request.reason}</p>
            </div>

            <div class="flex items-center justify-between text-xs text-muted-foreground">
              <span>
                <i class="fas fa-calendar mr-1"></i>
                Requested on ${createdDate}
              </span>
              ${request.preferred_date ? `
                <span>
                  <i class="fas fa-clock mr-1"></i>
                  Preferred: ${new Date(request.preferred_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                </span>
              ` : ''}
            </div>

            ${request.status === 'approved' && request.appointment ? `
              <div class="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                <p class="text-sm font-medium text-green-800">
                  <i class="fas fa-check-circle mr-2"></i>
                  Appointment scheduled for ${new Date(request.appointment.appointment_date).toLocaleString('en-US', { 
                    month: 'short', 
                    day: 'numeric', 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </p>
              </div>
            ` : ''}

            ${request.status === 'rejected' && request.rejection_reason ? `
              <div class="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                <p class="text-sm font-medium text-red-800 mb-1">
                  <i class="fas fa-info-circle mr-2"></i>
                  Reason for rejection:
                </p>
                <p class="text-sm text-red-700">${request.rejection_reason}</p>
              </div>
            ` : ''}

            ${request.status === 'pending' ? `
              <button 
                class="cancel-request-btn mt-3 w-full px-4 py-2 text-sm border border-red-200 text-red-600 rounded-lg hover:bg-red-50 transition-colors"
                data-request-id="${request.id}"
              >
                <i class="fas fa-times-circle mr-2"></i>
                Cancel Request
              </button>
            ` : ''}
          </div>
        `;
      }).join('');

      // Attach cancel button listeners
      document.querySelectorAll('.cancel-request-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const requestId = (e.currentTarget as HTMLElement).dataset.requestId;
          if (requestId) {
            const confirmed = await showConfirm(
              'Cancel Appointment Request?',
              'Are you sure you want to cancel this appointment request?',
              { type: 'warning', confirmText: 'Yes, Cancel', cancelText: 'No, Keep It' }
            );
            if (confirmed) {
              await cancelAppointmentRequest(requestId);
            }
          }
        });
      });
    }

    async function cancelAppointmentRequest(requestId: string) {
      try {
        const { error } = await supabase
          .from('appointment_requests')
          .update({ status: 'cancelled' })
          .eq('id', requestId);

        if (error) throw error;

        showToast('Appointment request cancelled successfully.', 'success');
        // Reload the page to refresh data
        location.reload();
      } catch (error: any) {
        console.error('Error cancelling request:', error);
        showToast('Failed to cancel request. Please try again.', 'error');
      }
    }

    // Modal Functions
    function openRequestAppointmentModal() {
      const modal = document.getElementById('request-appointment-modal');
      const modalContent = document.getElementById('request-modal-content');
      
      if (!modal || !modalContent) return;

      // Set minimum date to today
      const dateInput = document.getElementById('preferred-date-input') as HTMLInputElement;
      if (dateInput) {
        const today = new Date().toISOString().split('T')[0];
        dateInput.min = today;
      }

      // Load hospitals
      loadHospitalsForRequest();

      modal.classList.remove('hidden');
      modal.style.display = 'flex';
      
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }

    function closeRequestAppointmentModal() {
      const modal = document.getElementById('request-appointment-modal');
      const modalContent = document.getElementById('request-modal-content');
      
      if (modal && modalContent) {
        modalContent.classList.add('scale-95', 'opacity-0');
        modalContent.classList.remove('scale-100', 'opacity-100');
        
        setTimeout(() => {
          modal.classList.add('hidden');
          modal.style.display = 'none';
          // Reset form
          const form = document.getElementById('request-appointment-form') as HTMLFormElement;
          form?.reset();
          const doctorSelection = document.getElementById('doctor-selection');
          if (doctorSelection) doctorSelection.classList.add('hidden');
        }, 200);
      }
    }

    async function loadHospitalsForRequest() {
      const select = document.getElementById('hospital-select') as HTMLSelectElement;
      if (!select) return;

      try {
        const { data: hospitals, error } = await supabase
          .from('hospitals')
          .select('id, name, address')
          .order('name');

        if (error) throw error;

        select.innerHTML = '<option value="">-- Choose a hospital --</option>';
        hospitals?.forEach((hospital: any) => {
          const option = document.createElement('option');
          option.value = hospital.id;
          option.textContent = `${hospital.name}${hospital.address ? ` - ${hospital.address}` : ''}`;
          select.appendChild(option);
        });
      } catch (error) {
        console.error('Error loading hospitals:', error);
        showToast('Failed to load hospitals. Please try again.', 'error');
      }
    }

    async function loadDepartmentsForHospital(hospitalId: string) {
      try {
        const { data, error } = await supabase
          .from('profiles')
          .select('department')
          .eq('hospital_id', hospitalId)
          .eq('role', 'hospital_medic')
          .not('department', 'is', null)
          .order('department');

        if (error) {
          console.error('Error loading departments:', error);
          return;
        }

        // Get unique departments
        const uniqueDepts = [...new Set(data?.map(d => d.department).filter(Boolean))];
        
        // Populate datalist
        const datalist = document.getElementById('patient-departments-list');
        if (datalist) {
          datalist.innerHTML = uniqueDepts.map(dept => 
            `<option value="${dept}">${dept}</option>`
          ).join('');
        }
      } catch (error) {
        console.error('Error loading departments:', error);
      }
    }

    async function submitAppointmentRequest(e: Event) {
      e.preventDefault();
      
      if (!currentUserId) {
        showToast('Please log in to request an appointment.', 'error');
        return;
      }

      const hospitalId = (document.getElementById('hospital-select') as HTMLSelectElement).value;
      const department = (document.getElementById('department-select') as HTMLInputElement).value.trim();
      const reason = (document.getElementById('reason-input') as HTMLTextAreaElement).value;
      const preferredDate = (document.getElementById('preferred-date-input') as HTMLInputElement).value || null;
      const timeSlot = (document.getElementById('time-slot-select') as HTMLSelectElement).value || null;

      if (!hospitalId || !department || !reason) {
        showToast('Please fill in all required fields (hospital, department, and reason).', 'warning');
        return;
      }

      try {
        const { error } = await supabase
          .from('appointment_requests')
          .insert({
            patient_id: currentUserId,
            hospital_id: hospitalId,
            medic_id: null, // No specific doctor - will be assigned based on department
            department: department,
            reason: reason,
            preferred_date: preferredDate,
            preferred_time_slot: timeSlot,
            status: 'pending'
          });

        if (error) throw error;

        showToast('Appointment request submitted successfully! You will be notified when a doctor reviews your request.', 'success');
        closeRequestAppointmentModal();
        // Reload the page to refresh data
        setTimeout(() => location.reload(), 1500);
      } catch (error: any) {
        console.error('Error submitting request:', error);
        showToast('Failed to submit request. Please try again.', 'error');
      }
    }

    // Event Listeners
    document.getElementById('request-appointment-btn')?.addEventListener('click', openRequestAppointmentModal);
    document.getElementById('close-request-modal')?.addEventListener('click', closeRequestAppointmentModal);
    document.getElementById('cancel-request-btn')?.addEventListener('click', closeRequestAppointmentModal);
    document.getElementById('request-appointment-form')?.addEventListener('submit', submitAppointmentRequest);
    
    // Hospital selection change - show department selector
    document.getElementById('hospital-select')?.addEventListener('change', (e) => {
      const hospitalId = (e.target as HTMLSelectElement).value;
      const departmentSection = document.getElementById('department-selection');
      
      if (hospitalId && departmentSection) {
        departmentSection.classList.remove('hidden');
        loadDepartmentsForHospital(hospitalId);
      } else if (departmentSection) {
        departmentSection.classList.add('hidden');
      }
    });

    // Load dashboard
    loadDashboardData();
  </script>

  <style>
    @keyframes progress {
      0% {
        width: 0%;
      }
      100% {
        width: 100%;
      }
    }

    .animate-progress {
      animation: progress 1.5s ease-in-out infinite;
    }

    @keyframes bounce-slow {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-10px);
      }
    }

    #dashboard-content {
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
    }

    #loading-screen {
      transition: opacity 0.3s ease-in-out;
    }

    /* Ensure stats cards are evenly distributed */
    #stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    }

    @media (min-width: 1024px) {
      #stats-grid {
        grid-template-columns: repeat(4, 1fr);
      }
    }
  </style>
</MainLayout>
