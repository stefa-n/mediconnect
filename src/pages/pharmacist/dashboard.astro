---
import MainLayout from '../../layouts/main.astro';
import Navbar from '../../components/Navbar.astro';

// Pass placeholder user for navbar (will be updated client-side)
const placeholderUser = { email: 'loading@example.com' };
---

<MainLayout content={{ title: 'Pharmacist Dashboard - MediConnect' }}>
  <!-- Font Awesome for icons -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
  />
  
  <Navbar user={placeholderUser} />
  
  <div class="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
    <!-- Loading State -->
    <div id="loading-screen" class="flex items-center justify-center min-h-screen">
      <div class="relative">
        <div class="flex flex-col items-center space-y-6">
          <div class="relative">
            <div class="absolute inset-0 w-24 h-24 rounded-full bg-green-500/20 animate-ping"></div>
            <div class="absolute inset-2 w-20 h-20 rounded-full bg-green-500/30 animate-pulse"></div>
            <div class="relative w-24 h-24 bg-gradient-to-br from-green-500 to-teal-600 rounded-full flex items-center justify-center shadow-2xl">
              <i class="fas fa-pills text-white text-4xl animate-pulse"></i>
            </div>
          </div>
          <div class="text-center">
            <h2 class="text-2xl font-bold text-foreground mb-2">MediConnect</h2>
            <p class="text-muted-foreground text-sm mb-4">Loading pharmacist dashboard...</p>
            <div class="w-48 h-1.5 bg-gray-200 rounded-full overflow-hidden">
              <div class="h-full bg-gradient-to-r from-green-500 to-teal-600 rounded-full animate-progress"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Dashboard Content -->
    <main id="dashboard-content" class="hidden container mx-auto px-4 py-8">
      <!-- Welcome Section -->
      <div class="mb-8">
        <h2 class="text-3xl font-bold mb-2 text-foreground">
          Welcome, <span id="pharmacist-name">Pharmacist</span>!
        </h2>
        <p class="text-muted-foreground flex items-center gap-2">
          <i class="fas fa-pills"></i>
          <span id="pharmacy-name-header"></span>
        </p>
      </div>

      <!-- Prescription Search Section -->
      <div class="bg-white rounded-xl shadow-lg border border-border overflow-hidden mb-8">
        <div class="p-6 border-b border-border bg-gradient-to-r from-blue-50 to-indigo-50">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center shadow-lg">
              <i class="fas fa-search text-white text-2xl"></i>
            </div>
            <div>
              <h2 class="text-2xl font-bold text-foreground">Patient & Prescription Search</h2>
              <p class="text-sm text-muted-foreground">Search by patient name, email, CNP, or MC barcode</p>
            </div>
          </div>
          <div class="relative">
            <input 
              type="text" 
              id="patient-search"
              class="w-full px-4 py-3 pr-12 border-2 border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
              placeholder="Search by name, email, CNP, or MC barcode..."
            />
            <i class="fas fa-search absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 text-lg"></i>
          </div>
        </div>
        <div id="search-results" class="p-6 max-h-[600px] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-pills text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">Search for a Patient</p>
            <p class="text-sm">Enter patient name, email, CNP, or scan their MediConnect Card barcode</p>
          </div>
        </div>
      </div>
      
      <!-- Recent Dispensations -->
      <div class="bg-white rounded-xl shadow-lg border border-border overflow-hidden mt-8">
        <div class="p-6 border-b border-border bg-gradient-to-r from-green-50 to-teal-50">
          <div class="flex items-center gap-3">
            <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center shadow-lg">
              <i class="fas fa-history text-white text-2xl"></i>
            </div>
            <div>
              <h2 class="text-2xl font-bold text-foreground">Recent Dispensations</h2>
              <p class="text-sm text-muted-foreground">Your recent prescription dispensations</p>
            </div>
          </div>
        </div>
        <div class="p-6">
          <div id="recentDispensations">
            <p class="text-muted-foreground">Loading...</p>
          </div>
        </div>
      </div>
    </main>
  </div>

<script>
  import { supabase } from '../../lib/supabase';

  let currentPharmacyId: string;
  let currentPharmacistId: string;

  async function loadDashboard() {
    try {
      // Check authentication
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error('Not authenticated:', authError);
        window.location.href = '/auth';
        return;
      }

      // Get user profile
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (profileError || !profile) {
        console.error('Error fetching profile:', profileError);
        window.location.href = '/dashboard';
        return;
      }

      if (profile.role !== 'pharmacist') {
        console.error('Not a pharmacist');
        window.location.href = '/dashboard';
        return;
      }

      if (!profile.pharmacy_id) {
        console.error('No pharmacy assigned');
        window.location.href = '/dashboard';
        return;
      }

      currentPharmacyId = profile.pharmacy_id;
      currentPharmacistId = user.id;

      // Update pharmacist name
      const pharmacistNameEl = document.getElementById('pharmacist-name');
      if (pharmacistNameEl) {
        pharmacistNameEl.textContent = profile.full_name || user.email?.split('@')[0] || 'Pharmacist';
      }

      // Get pharmacy information
      const { data: pharmacy, error: pharmacyError } = await supabase
        .from('pharmacies')
        .select('*')
        .eq('id', profile.pharmacy_id)
        .single();

      if (pharmacyError || !pharmacy) {
        console.error('Pharmacy not found');
        window.location.href = '/dashboard';
        return;
      }

      // Update pharmacy name in header
      const pharmacyNameHeaderEl = document.getElementById('pharmacy-name-header');
      if (pharmacyNameHeaderEl) {
        pharmacyNameHeaderEl.textContent = pharmacy.name;
      }

      // Set up patient search
      setupPatientSearch();

      // Load recent dispensations
      await loadRecentDispensations();

      // Hide loading, show content
      document.getElementById('loading-screen')?.classList.add('hidden');
      document.getElementById('dashboard-content')?.classList.remove('hidden');

    } catch (error) {
      console.error('Error loading dashboard:', error);
      window.location.href = '/dashboard';
    }
  }

  function setupPatientSearch() {
    const searchInput = document.getElementById('patient-search') as HTMLInputElement;
    let searchTimeout: any;

    searchInput?.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      const query = (e.target as HTMLInputElement).value.trim();

      if (!query) {
        const container = document.getElementById('search-results');
        if (container) {
          container.innerHTML = `
            <div class="text-center py-12 text-muted-foreground">
              <i class="fas fa-pills text-5xl mb-4 opacity-50"></i>
              <p class="text-lg font-medium mb-2">Search for a Patient</p>
              <p class="text-sm">Enter patient name, email, CNP, or scan their MediConnect Card barcode</p>
            </div>
          `;
        }
        return;
      }

      // Debounce search
      searchTimeout = setTimeout(() => {
        searchPatients(query);
      }, 300);
    });
  }

  async function searchPatients(query: string) {
    const container = document.getElementById('search-results');
    if (!container) return;

    const searchLower = query.toLowerCase();

    // Check if barcode search
    if (searchLower.startsWith('mc')) {
      container.innerHTML = `
        <div class="text-center py-12">
          <i class="fas fa-spinner fa-spin text-4xl text-primary mb-4"></i>
          <p class="text-muted-foreground">Looking up barcode...</p>
        </div>
      `;

      try {
        const { data: patient, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('barcode_id', query.toUpperCase())
          .eq('role', 'patient')
          .single();

        if (error || !patient) {
          container.innerHTML = `
            <div class="text-center py-12">
              <i class="fas fa-barcode text-5xl mb-4 opacity-50 text-orange-500"></i>
              <p class="text-lg font-medium mb-2 text-foreground">Barcode Not Found</p>
              <p class="text-sm text-muted-foreground">The MediConnect Card barcode could not be found.</p>
            </div>
          `;
          return;
        }

        await displayPatientPrescriptions(patient, true);
      } catch (error) {
        console.error('Error searching barcode:', error);
        container.innerHTML = `
          <div class="text-center py-12 text-red-500">
            <i class="fas fa-exclamation-triangle text-5xl mb-4"></i>
            <p>Error looking up barcode</p>
          </div>
        `;
      }
    } else {
      // Normal search
      container.innerHTML = `
        <div class="text-center py-12">
          <i class="fas fa-spinner fa-spin text-4xl text-primary mb-4"></i>
          <p class="text-muted-foreground">Searching...</p>
        </div>
      `;

      try {
        const { data: patients, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('role', 'patient')
          .or(`full_name.ilike.%${query}%,email.ilike.%${query}%,cnp.ilike.%${query}%`)
          .limit(10);

        if (error) throw error;

        if (!patients || patients.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12 text-muted-foreground">
              <i class="fas fa-user-slash text-5xl mb-4 opacity-50"></i>
              <p class="text-lg font-medium mb-2">No Patients Found</p>
              <p class="text-sm">Try a different search or enter a MC barcode</p>
            </div>
          `;
          return;
        }

        container.innerHTML = `
          <div class="space-y-3">
            ${patients.map(patient => `
              <div class="p-4 rounded-lg border border-border hover:bg-blue-50/50 transition-all cursor-pointer" onclick="selectPatient('${patient.id}')">
                <div class="flex items-start gap-3">
                  <div class="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center text-white font-semibold text-lg flex-shrink-0">
                    ${patient.full_name?.charAt(0).toUpperCase() || 'P'}
                  </div>
                  <div class="flex-1">
                    <p class="font-semibold text-foreground">${patient.full_name || 'Unknown Patient'}</p>
                    <p class="text-sm text-muted-foreground">${patient.email}</p>
                    ${patient.cnp ? `<p class="text-xs text-muted-foreground mt-1">CNP: ${patient.cnp}</p>` : ''}
                  </div>
                  <i class="fas fa-chevron-right text-gray-400"></i>
                </div>
              </div>
            `).join('')}
          </div>
        `;
      } catch (error) {
        console.error('Error searching patients:', error);
        container.innerHTML = `
          <div class="text-center py-12 text-red-500">
            <i class="fas fa-exclamation-triangle text-5xl mb-4"></i>
            <p>Error searching patients</p>
          </div>
        `;
      }
    }
  }

  (window as any).selectPatient = async function(patientId: string) {
    const { data: patient, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', patientId)
      .single();

    if (!error && patient) {
      await displayPatientPrescriptions(patient, false);
    }
  };

  async function displayPatientPrescriptions(patient: any, isBarcode: boolean) {
    const container = document.getElementById('search-results');
    if (!container) return;

    container.innerHTML = `
      <div class="text-center py-12">
        <i class="fas fa-spinner fa-spin text-4xl text-primary mb-4"></i>
        <p class="text-muted-foreground">Loading prescriptions...</p>
      </div>
    `;

    try {
      const { data: prescriptions, error } = await supabase
        .from('prescriptions')
        .select(`
          *,
          medic:profiles!prescriptions_medic_id_fkey(full_name, department),
          dispensations:prescription_dispensations(id, dose_number, dispensed_at, pharmacist:profiles(full_name))
        `)
        .eq('patient_id', patient.id)
        .order('prescribed_date', { ascending: false });

      if (error) throw error;

      const successBanner = isBarcode ? `
        <div class="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg flex items-center gap-2 text-green-700">
          <i class="fas fa-check-circle"></i>
          <span class="text-sm font-medium">Patient found via MediConnect Card barcode!</span>
        </div>
      ` : '';

      container.innerHTML = `
        ${successBanner}
        <div class="mb-6 p-5 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border-2 ${isBarcode ? 'border-green-300' : 'border-blue-200'}">
          <div class="flex items-start gap-4">
            <div class="w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center text-white font-bold text-2xl flex-shrink-0 ${isBarcode ? 'ring-4 ring-green-300' : ''}">
              ${patient.full_name?.charAt(0).toUpperCase() || 'P'}
            </div>
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-1">
                <h3 class="text-2xl font-bold text-foreground">${patient.full_name || 'Unknown Patient'}</h3>
                ${isBarcode ? '<i class="fas fa-barcode text-green-600" title="Found via barcode"></i>' : ''}
              </div>
              <p class="text-sm text-muted-foreground">${patient.email}</p>
              ${patient.cnp ? `<p class="text-sm text-muted-foreground">CNP: ${patient.cnp}</p>` : ''}
            </div>
            <button onclick="clearSearch()" class="px-4 py-2 text-sm border border-border rounded-lg hover:bg-white transition-colors">
              <i class="fas fa-times mr-2"></i>Close
            </button>
          </div>
        </div>

        ${!prescriptions || prescriptions.length === 0 ? `
          <div class="text-center py-12 text-muted-foreground">
            <i class="fas fa-prescription-bottle text-5xl mb-4 opacity-50"></i>
            <p class="text-lg font-medium mb-2">No Prescriptions Found</p>
            <p class="text-sm">This patient has no prescriptions on file</p>
          </div>
        ` : `
          <div class="space-y-4">
            <h4 class="text-lg font-bold text-foreground flex items-center gap-2">
              <i class="fas fa-prescription"></i>
              Active Prescriptions (${prescriptions.filter((p: any) => p.status === 'active' && !p.is_invalidated).length})
            </h4>
            ${prescriptions.map((rx: any) => renderPrescriptionCard(rx, patient)).join('')}
          </div>
        `}
      `;
    } catch (error) {
      console.error('Error loading prescriptions:', error);
      container.innerHTML = `
        <div class="text-center py-12 text-red-500">
          <i class="fas fa-exclamation-triangle text-5xl mb-4"></i>
          <p>Error loading prescriptions</p>
        </div>
      `;
    }
  }

  function renderPrescriptionCard(rx: any, patient: any) {
    const isActive = rx.status === 'active' && !rx.is_invalidated;
    const dosesRemaining = rx.total_doses - rx.doses_dispensed;
    const canDispense = isActive && dosesRemaining > 0;

    const statusConfig: any = {
      active: { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-700', icon: 'fa-check-circle' },
      completed: { bg: 'bg-gray-50', border: 'border-gray-200', text: 'text-gray-700', icon: 'fa-flag-checkered' },
      cancelled: { bg: 'bg-red-50', border: 'border-red-200', text: 'text-red-700', icon: 'fa-ban' }
    };

    const status = rx.is_invalidated ? 'invalidated' : rx.status;
    const config = status === 'invalidated' 
      ? { bg: 'bg-red-50', border: 'border-red-300', text: 'text-red-700', icon: 'fa-exclamation-triangle' }
      : statusConfig[rx.status] || statusConfig.active;

    return `
      <div class="p-5 rounded-lg border-2 ${config.border} ${config.bg}">
        <div class="flex items-start justify-between mb-4">
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-2">
              <h5 class="text-xl font-bold text-foreground">${rx.medication_name}</h5>
              <span class="px-3 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text} border ${config.border}">
                <i class="fas ${config.icon} mr-1"></i>
                ${rx.is_invalidated ? 'INVALIDATED' : rx.status.toUpperCase()}
              </span>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-3 text-sm">
              <div>
                <p class="text-muted-foreground">Dosage</p>
                <p class="font-semibold">${rx.dosage}</p>
              </div>
              <div>
                <p class="text-muted-foreground">Frequency</p>
                <p class="font-semibold">${rx.frequency}</p>
              </div>
              ${rx.duration ? `
                <div>
                  <p class="text-muted-foreground">Duration</p>
                  <p class="font-semibold">${rx.duration}</p>
                </div>
              ` : ''}
              <div>
                <p class="text-muted-foreground">Doses</p>
                <p class="font-semibold ${dosesRemaining === 0 ? 'text-red-600' : ''}">${rx.doses_dispensed} / ${rx.total_doses} dispensed</p>
              </div>
              <div>
                <p class="text-muted-foreground">Prescribed By</p>
                <p class="font-semibold">${rx.medic?.full_name || 'Unknown'}</p>
              </div>
              <div>
                <p class="text-muted-foreground">Date</p>
                <p class="font-semibold">${new Date(rx.prescribed_date).toLocaleDateString()}</p>
              </div>
            </div>
            ${rx.instructions ? `
              <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                <p class="text-sm font-semibold text-blue-900 mb-1"><i class="fas fa-info-circle mr-1"></i>Instructions</p>
                <p class="text-sm text-blue-800">${rx.instructions}</p>
              </div>
            ` : ''}
            ${rx.is_invalidated ? `
              <div class="mt-3 p-3 bg-red-100 border border-red-300 rounded">
                <p class="text-sm font-semibold text-red-900 mb-1"><i class="fas fa-ban mr-1"></i>Invalidation Reason</p>
                <p class="text-sm text-red-800">${rx.invalidation_reason || 'No reason provided'}</p>
                <p class="text-xs text-red-600 mt-1">Invalidated on ${new Date(rx.invalidated_at).toLocaleString()}</p>
              </div>
            ` : ''}
          </div>
        </div>

        ${canDispense ? `
          <div class="flex gap-3 pt-4 border-t border-border">
            <button 
              onclick="dispenseDose('${rx.id}', '${patient.id}', ${rx.doses_dispensed + 1}, '${rx.medication_name}')"
              class="flex-1 px-4 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl font-medium"
            >
              <i class="fas fa-pills mr-2"></i>
              Dispense Dose ${rx.doses_dispensed + 1} of ${rx.total_doses}
            </button>
            <button 
              onclick="invalidatePrescription('${rx.id}', '${rx.medication_name}')"
              class="px-4 py-3 border-2 border-red-300 text-red-700 rounded-lg hover:bg-red-50 transition-all font-medium"
            >
              <i class="fas fa-ban mr-2"></i>
              Invalidate
            </button>
          </div>
        ` : !isActive ? `
          <div class="pt-4 border-t border-border text-center text-sm text-muted-foreground">
            This prescription is ${rx.is_invalidated ? 'invalidated' : rx.status} and cannot be dispensed
          </div>
        ` : dosesRemaining === 0 ? `
          <div class="pt-4 border-t border-border text-center text-sm text-orange-600 font-medium">
            <i class="fas fa-exclamation-circle mr-2"></i>
            All doses have been dispensed
          </div>
        ` : ''}
      </div>
    `;
  }

  (window as any).clearSearch = function() {
    const searchInput = document.getElementById('patient-search') as HTMLInputElement;
    if (searchInput) searchInput.value = '';
    const container = document.getElementById('search-results');
    if (container) {
      container.innerHTML = `
        <div class="text-center py-12 text-muted-foreground">
          <i class="fas fa-pills text-5xl mb-4 opacity-50"></i>
          <p class="text-lg font-medium mb-2">Search for a Patient</p>
          <p class="text-sm">Enter patient name, email, CNP, or scan their MediConnect Card barcode</p>
        </div>
      `;
    }
  };

  (window as any).dispenseDose = async function(prescriptionId: string, patientId: string, doseNumber: number, medicationName: string) {
    const notes = prompt(`Dispensing ${medicationName} - Dose ${doseNumber}\n\nOptional notes for this dispensation:`);
    
    if (notes === null) return; // User cancelled

    try {
      // Record dispensation
      const { error: dispError } = await supabase
        .from('prescription_dispensations')
        .insert({
          prescription_id: prescriptionId,
          pharmacy_id: currentPharmacyId,
          pharmacist_id: currentPharmacistId,
          dose_number: doseNumber,
          notes: notes || null
        });

      if (dispError) throw dispError;

      // Update prescription doses_dispensed
      const { error: rxError } = await supabase
        .from('prescriptions')
        .update({ 
          doses_dispensed: doseNumber,
          updated_at: new Date().toISOString()
        })
        .eq('id', prescriptionId);

      if (rxError) throw rxError;

      alert(`✅ Dose ${doseNumber} dispensed successfully!`);
      
      // Reload patient prescriptions
      const { data: patient } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', patientId)
        .single();

      if (patient) {
        await displayPatientPrescriptions(patient, false);
        await loadRecentDispensations();
      }
    } catch (error: any) {
      console.error('Error dispensing dose:', error);
      alert(`❌ Error: ${error.message}`);
    }
  };

  (window as any).invalidatePrescription = async function(prescriptionId: string, medicationName: string) {
    const reason = prompt(`Invalidating prescription: ${medicationName}\n\nPlease provide a reason for invalidation:`);
    
    if (!reason) {
      alert('Invalidation reason is required');
      return;
    }

    if (!confirm(`Are you sure you want to invalidate this prescription?\n\nMedication: ${medicationName}\nReason: ${reason}\n\nThis action cannot be undone.`)) {
      return;
    }

    try {
      const { error } = await supabase
        .from('prescriptions')
        .update({
          is_invalidated: true,
          invalidated_at: new Date().toISOString(),
          invalidated_by: currentPharmacistId,
          invalidation_reason: reason,
          updated_at: new Date().toISOString()
        })
        .eq('id', prescriptionId);

      if (error) throw error;

      alert('✅ Prescription invalidated successfully');
      
      // Reload current view
      const searchInput = document.getElementById('patient-search') as HTMLInputElement;
      if (searchInput && searchInput.value) {
        await searchPatients(searchInput.value);
      }
    } catch (error: any) {
      console.error('Error invalidating prescription:', error);
      alert(`❌ Error: ${error.message}`);
    }
  };

  async function loadRecentDispensations() {
    try {
      const { data: dispensations, error } = await supabase
        .from('prescription_dispensations')
        .select(`
          *,
          prescription:prescriptions(
            id,
            medication_name,
            dosage,
            patient:profiles!prescriptions_patient_id_fkey(id, full_name, cnp)
          ),
          pharmacist:profiles(id, full_name),
          pharmacy:pharmacies(id, name)
        `)
        .eq('pharmacy_id', currentPharmacyId)
        .order('dispensed_at', { ascending: false })
        .limit(50);
      
      if (error) throw error;
      
      const container = document.getElementById('recentDispensations');
      
      if (!container) return;
      
      if (!dispensations || dispensations.length === 0) {
        container.innerHTML = `
          <div class="text-center py-12">
            <div class="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gray-100 mb-4">
              <i class="fas fa-history text-gray-400 text-3xl"></i>
            </div>
            <p class="text-muted-foreground text-lg font-medium mb-2">No Recent Dispensations</p>
            <p class="text-sm text-muted-foreground">Dispensations will appear here once you start dispensing prescriptions</p>
          </div>
        `;
      } else {
        container.innerHTML = `
          <div class="space-y-3">
            ${dispensations.map((d: any, index: number) => `
              <div class="flex items-center justify-between p-4 rounded-lg border border-border hover:border-green-300 hover:bg-green-50/50 transition-all duration-200" style="animation: fadeInUp 0.3s ease-out ${index * 0.05}s both;">
                <div class="flex-1">
                  <h4 class="font-semibold text-foreground text-lg">
                    ${d.prescription?.medication_name || 'Unknown Medication'}
                  </h4>
                  <p class="text-sm text-muted-foreground">
                    Patient: ${d.prescription?.patient?.full_name || 'Unknown'}
                    ${d.prescription?.patient?.cnp ? `(CNP: ${d.prescription.patient.cnp})` : ''}
                  </p>
                  <p class="text-sm text-muted-foreground mt-1">
                    Dose ${d.dose_number} - Dispensed by ${d.pharmacist?.full_name || 'Unknown'}
                  </p>
                  ${d.notes ? `<p class="text-sm text-gray-600 mt-1 italic">"${d.notes}"</p>` : ''}
                </div>
                <div class="text-right ml-4">
                  <p class="text-xs text-muted-foreground">
                    ${new Date(d.dispensed_at).toLocaleString()}
                  </p>
                </div>
              </div>
            `).join('')}
          </div>
        `;
      }
    } catch (error: any) {
      const container = document.getElementById('recentDispensations');
      if (container) {
        container.innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-500">Error loading dispensations: ${error.message}</p>
          </div>
        `;
      }
    }
  }
  
  // Load dashboard on page load
  loadDashboard();
</script>

<style>
  @keyframes progress {
    0% { width: 0%; }
    100% { width: 100%; }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-progress {
    animation: progress 1.5s ease-in-out infinite;
  }
</style>
</MainLayout>